var searchIndex = JSON.parse('{\
"arrow":{"doc":"A complete, safe, native Rust implementation of Apache …","t":"AAAACAOOAAACCAACAAARINIINIIDDGDGIIIINGGGGNDDDGDEESSSDGGGGGGIGGGGGGNDGGGGGGGGGGGGGDDGDDGNGGGGGGGGGGGGDDDDDGDGGGSGGGGGGGGGGGGGGGGGGGGGGGGGGGGQGGGGGGGGGGNGGDGDDDQDDDSISDDDGDDDDIIDDQQGGGGNDDGGGGGGGGGGGGGGGGGGGGGGGGDDGGGGGGGGGGGGGGGGDDNSMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLKLKMMAMMMMMMMMMMKKLLLLLLLLLLLLLLLKLKLLLFKLLKLFLFKLLKLLFKLFFFFLFKLLFKLFLFKLFLFLLFKLFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLMMMLLFLALLLLMALLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLMLKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMKKLFLOOOOOOOOLMMKLLLLLLLLLLLLLLLLLLLLLLFLMLMMLAMMLMMMMKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLKMMMMMLKMMMLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLMMMMMMMMMLLLKLLLLLLLALMMLKLLLLMMMMMMMMMMMMMMMLKFKKKLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKLLLLLLLMMMMMMMMMLKFFMKKKKKKKMKKKKMKKKLLLLLLLLLLLLLLLLFLLLLLLLLLLFLLLLLLLLLKLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLMLKLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLKLLLLLLLLLLLLLLLLMMLLLLMMMMMMMMMMMMMMKKLMMMMMMMMLLMMLMLLMMMMMMMMMMALKMKLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMKKLLLLLLLLAALKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLALLLKLLLLLLLKLLLLLLLLLLLLLLLLLLMLLLLLLMMMMMMMMLLMMMMMMMMLLLLLMMMLLLMLLLMMMMMMMMMMMLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKKMMIIIGIGDSGGGGDGGGGDDGGGGDDGSGGGGGGGGGGGGGGQGGGGDQDDISDDGDGGGGGGGGDDGGGGGGGGDMKKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMKKLKKLLMMMMMMMMMLKMMMMMMMMMKMMMMLFMFFKLKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKMMMMMMMMKKMKMMMMMMMMMMMMMMMMMMMMMKKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKIGGGDDDGGGGGGGGGGGGGGGGDDGGGGGGGDDDDGGGGGGGGGGGGGGGGGGGGGGGDDDDDDGGGDGGGGGGGGGGGGGGGGGGGGGGGGDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLMLLLLLLLLLLMMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLMMLMMMMMMKLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFMLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMMMMLLMMMMMMLLLMMMMMMLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMMMMMMMLMMLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLILKLLLFKLKFLFKLKLFKFFFFLFKLFKFLFKFLFLLFKFFFDGGGGGGGGMMMMMMMMMLLLMMMMMMMMMMMMMMMMMMLLLLLMMMMMMMMMLLLLLLLLDMLLLMMMMLLLLLLLLLLLLLRRRRRRRRFFFFFFFFFFFFFFFFFFFFFFFDDLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMLLIIIISGDISSSDDDDIDDDDDDDDDDDDDDDDGGSSQQQSSISDDDDDDDDDDDDSGLKLLKMMMMMMKKFDDDDDDDLLLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLMMMFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMMLLLLLLLLLLLLLLLLLLLMLLLMMMMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGDDDDDDDDFFFFFFFFFLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLFMLLLLLLLLLLLLLMFFLMMFFLLLMFFLLLLLLLLFLMMFLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLLLLFFALFFFFFFFFFFFFFFFFFFFFFFFFFFLLLFLFMFFFFLMFFLFFFFFLFFFFMFFFFFFMMFFFFFLLLLLFFLLLLLLLLLLLLLLLLLLLFFFLLLLLLLLLFFFFMLLLLLLLLLFFFFAAAAAFAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFMMGIKFLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGDDDFMMFMMFFMMFFFFFFFFFFFFFFDFFFFFFDDDMMFFMMFFFFMFFDMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFIIIIIIIISNGNDISSSSRRRRRSENDNDNNDNDINNNDDDDDGDNNNDNDNDDDNDNDNDNDNDDEDNGNNGNSRSSSSRNNNNNQQQNSSQSSNIDDGNQQNNSNDDNDDENDDDDINDNDNDNDSNDENGNSSLLLLKLLLLLLLLLLLLLKLLLLLLLLMMLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLMLLLLKLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMKLKLLLLLKLKLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMKLKLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLFFKLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNNNNNNNNNNNNNNNGNNLLLLLLLLLLLLLLLLLLDSDDDSSLMFLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMLLLFLLLMMLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLMLLMMMMLMLLLLMLLLLMMMMMMLMLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDRRRRDDDMLLLLLLLLLLLLLLFLLLLLLLLLLLLFFLMFLMLFLMLFLLLLLLMLLMMFLMMMLLLLLLLLLLLLLLLLLDIIGDILLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLFKLLLLLLLLLLLLFLLLDDDIILLLLLLLLLLLKLLLMLLLLLLLLLLLLLLLMMLLLLLLMLLLLLLLLMMKLLMLLLLLLLLLLLLLLLLLLLLLLLKRRRRRRRRFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGDGGGGGGGGGGGGMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLFFLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLAAAAAAAAAAFFFFFFFFFFFFDDDGMMMMLLLLLLMMLLLLMMLMLLLLLLLLLLMLLLLLLLLLMLLLLLMLLMLLMLMLLLLLLLLLLLLDDDLLLLLLMLLLMMMMMMLLLLLLLLLLLLLLLMMMLLLLLLLFLLLLLLLLLLLLFFFFFFFFFFFFFFFDEDNNDFLLLLLLLLLLLLLLLLMMLMLLLLLLLLLLLMMLLLLLLLLLLMLLLLFLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFDLLLMLLLLLLLLLLLLLDFLLLMLLMLLLFFLLLMMLLFFFLLLLLL","n":["alloc","array","buffer","compute","csv","datatypes","downcast_dictionary_array","downcast_primitive_array","error","ffi","ffi_stream","ipc","json","pyarrow","record_batch","row","temporal_conversions","tensor","util","ALIGNMENT","Allocation","AlwaysNull","AnyDictionaryArray","Array","Array","ArrayAccessor","ArrayBuilder","ArrayData","ArrayDataBuilder","ArrayDataRef","ArrayIter","ArrayRef","ArrowNativeTypeOp","ArrowNumericType","ArrowPrimitiveType","AsArray","Binary","BinaryArray","BinaryBuilder","BinaryDictionaryBuilder","BinaryRunBuilder","BitMap","BooleanArray","BooleanBufferBuilder","BooleanBuilder","BooleanIter","BufferBuilder","BufferSpec","Capacities","DATA_TYPE","DATA_TYPE","DATA_TYPE_CONSTRUCTOR","DataTypeLayout","Date32Array","Date32BufferBuilder","Date32Builder","Date64Array","Date64BufferBuilder","Date64Builder","Datum","Decimal128Array","Decimal128BufferBuilder","Decimal128Builder","Decimal256Array","Decimal256BufferBuilder","Decimal256Builder","Dictionary","DictionaryArray","DurationMicrosecondArray","DurationMicrosecondBufferBuilder","DurationMicrosecondBuilder","DurationMillisecondArray","DurationMillisecondBufferBuilder","DurationMillisecondBuilder","DurationNanosecondArray","DurationNanosecondBufferBuilder","DurationNanosecondBuilder","DurationSecondArray","DurationSecondBufferBuilder","DurationSecondBuilder","DynComparator","FixedSizeBinaryArray","FixedSizeBinaryBuilder","FixedSizeBinaryIter","FixedSizeListArray","FixedSizeListBuilder","FixedSizeListIter","FixedWidth","Float16Array","Float16BufferBuilder","Float16Builder","Float32Array","Float32BufferBuilder","Float32Builder","Float64Array","Float64BufferBuilder","Float64Builder","GenericBinaryArray","GenericBinaryBuilder","GenericBinaryIter","GenericByteArray","GenericByteBuilder","GenericByteDictionaryBuilder","GenericByteRunBuilder","GenericListArray","GenericListArrayIter","GenericListBuilder","GenericStringArray","GenericStringBuilder","GenericStringIter","IS_LARGE","Int16Array","Int16BufferBuilder","Int16Builder","Int16DictionaryArray","Int16RunArray","Int32Array","Int32BufferBuilder","Int32Builder","Int32DictionaryArray","Int32RunArray","Int64Array","Int64BufferBuilder","Int64Builder","Int64DictionaryArray","Int64RunArray","Int8Array","Int8BufferBuilder","Int8Builder","Int8DictionaryArray","IntervalDayTimeArray","IntervalDayTimeBufferBuilder","IntervalDayTimeBuilder","IntervalMonthDayNanoArray","IntervalMonthDayNanoBufferBuilder","IntervalMonthDayNanoBuilder","IntervalYearMonthArray","IntervalYearMonthBufferBuilder","IntervalYearMonthBuilder","Item","LargeBinaryArray","LargeBinaryBuilder","LargeBinaryDictionaryBuilder","LargeBinaryRunBuilder","LargeListArray","LargeListBuilder","LargeStringArray","LargeStringBuilder","LargeStringDictionaryBuilder","LargeStringRunBuilder","List","ListArray","ListBuilder","MapArray","MapArrayIter","MapBuilder","MapFieldNames","MutableArrayData","Native","NativeAdapter","NullArray","NullBuilder","ONE","OffsetSizeTrait","PREFIX","PrimitiveArray","PrimitiveBuilder","PrimitiveDictionaryBuilder","PrimitiveIter","PrimitiveRunBuilder","RecordBatch","RecordBatchIterator","RecordBatchOptions","RecordBatchReader","RecordBatchWriter","RunArray","Scalar","Simd","SimdMask","StringArray","StringBuilder","StringDictionaryBuilder","StringRunBuilder","Struct","StructArray","StructBuilder","Time32MillisecondArray","Time32MillisecondBufferBuilder","Time32MillisecondBuilder","Time32SecondArray","Time32SecondBufferBuilder","Time32SecondBuilder","Time64MicrosecondArray","Time64MicrosecondBufferBuilder","Time64MicrosecondBuilder","Time64NanosecondArray","Time64NanosecondBufferBuilder","Time64NanosecondBuilder","TimestampMicrosecondArray","TimestampMicrosecondBufferBuilder","TimestampMicrosecondBuilder","TimestampMillisecondArray","TimestampMillisecondBufferBuilder","TimestampMillisecondBuilder","TimestampNanosecondArray","TimestampNanosecondBufferBuilder","TimestampNanosecondBuilder","TimestampSecondArray","TimestampSecondBufferBuilder","TimestampSecondBuilder","TypedDictionaryArray","TypedRunArray","UInt16Array","UInt16BufferBuilder","UInt16Builder","UInt16DictionaryArray","UInt32Array","UInt32BufferBuilder","UInt32Builder","UInt32DictionaryArray","UInt64Array","UInt64BufferBuilder","UInt64Builder","UInt64DictionaryArray","UInt8Array","UInt8BufferBuilder","UInt8Builder","UInt8DictionaryArray","UnionArray","UnionBuilder","VariableWidth","ZERO","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","add_buffer","add_checked","add_child_data","add_wrapping","alloc","alloc","array","array","array","array","array","array","array","array","array","array","arrays","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_dictionary","as_any_dictionary_opt","as_any_dictionary_opt","as_any_mut","as_binary","as_binary_opt","as_boolean","as_boolean_array","as_boolean_opt","as_boolean_opt","as_bytes","as_bytes_opt","as_bytes_opt","as_decimal_array","as_dictionary","as_dictionary_array","as_dictionary_opt","as_dictionary_opt","as_fixed_size_binary","as_fixed_size_binary_opt","as_fixed_size_binary_opt","as_fixed_size_list","as_fixed_size_list_array","as_fixed_size_list_opt","as_fixed_size_list_opt","as_generic_binary_array","as_generic_list_array","as_large_list_array","as_largestring_array","as_list","as_list_array","as_list_opt","as_list_opt","as_map","as_map_array","as_map_opt","as_map_opt","as_null_array","as_primitive","as_primitive_array","as_primitive_opt","as_primitive_opt","as_run_array","as_string","as_string_array","as_string_opt","as_struct","as_struct_array","as_struct_opt","as_struct_opt","as_union_array","bin_op","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffers","buffers","buffers","buffers","buffers","build","build_aligned","build_compare","build_unchecked","builder","builder","builder","builder","builder","can_contain_null_mask","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","child","child_data","child_data","child_data","child_data","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","column","column_by_name","column_names","columns","columns","columns_ref","compare","current","current","current","current","current","current","current","current","current","current_end","current_end","current_end","current_end","current_end","current_end","current_end","current_end","current_end","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_value","current_value","current_value","current_value","current_value","current_value","data","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","dedup","dedup","dedup","dedup","dedup","default_value","dictionary","dictionary","div_checked","div_wrapping","downcast","downcast_array","downcast_dict","downcast_dictionary_array","downcast_integer","downcast_primitive","downcast_primitive_array","downcast_run_array","downcast_run_end_index","downcast_temporal","downcast_temporal_array","entries","entries","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","export_array_into_raw","extend","extend_null_bits","extend_nulls","extend_nulls","extend_values","false_count","ffi","field_builders","field_names","fields","fields","fields","fields","fields","finish","finish_cloned","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_binary","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter_primitive","from_iter_primitive","from_iter_values","from_iter_values","from_opt_vec","from_opt_vec","from_pyarrow","from_trusted_len_iter","from_unary","from_value","from_vec","from_vec","ge","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_array_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_byte_width","get_data_type","get_data_type","get_end_physical_index","get_physical_index","get_physical_indices","get_slice_memory_size","get_start_physical_index","gt","has_current_value","has_current_value","has_current_value","has_current_value","has_current_value","index","init","initial_capacity","inner","inner_schema","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_box_any","into_builder","into_builder","into_builder","into_builder","into_data","into_data","into_data","into_data","into_data","into_data","into_data","into_data","into_data","into_data","into_data","into_data","into_data","into_data","into_data","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","into_parts","into_parts","into_parts","into_parts","into_parts","into_parts","into_parts","into_primitive_dict_builder","into_pyarrow","is_ascii","is_compatible","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_eq","is_ge","is_gt","is_le","is_lt","is_ne","is_null","is_null","is_null","is_nullable","is_nullable","is_nullable","is_nullable","is_nullable","is_nullable","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_valid","is_valid","is_valid","is_zero","iter","iter","iter","iter","iter","iter","iter","iterator","key","key","key_builder","key_type","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys_builder","keys_builder","keys_builder","keys_builder","keys_builder","keys_builder","keys_iter","lanes","layout","le","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","list_len","load","logical_len","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","lookup_key","lt","make_array","make_builder","map","mask_any","mask_from_u64","mask_get","mask_init","mask_select","mask_set","mask_to_u64","match_field_names","mod_checked","mod_wrapping","mul_checked","mul_wrapping","native","ne","neg_checked","neg_wrapping","new","new","new","new","new","new","new","new","new","new","new","new","new","new_binary","new_empty","new_empty","new_empty_array","new_fixed_width","new_from_strings","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null","new_null_array","new_scalar","new_scalar","new_scalar","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","next_batch","normalized_keys","normalized_keys","null_bit_buffer","null_bit_buffer","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_count","null_count","null_count","null_count","null_count","null_count","null_if_overflow_precision","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","num_chars","num_columns","occupancy","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offset","offsets","offsets","offsets","offsets","offsets","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","phantom","phantom","pow_checked","pow_wrapping","precision","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","ptr","ptr","ptr_eq","reinterpret_cast","row_count","row_count","run_array","run_array","run_ends","run_ends","run_ends","run_ends","run_ends","run_ends","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","run_iterator","scale","schema","schema","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice","state","state","state","state","state","sub_checked","sub_wrapping","take_iter","take_iter","take_iter","take_iter","take_iter_unchecked","take_iter_unchecked","take_iter_unchecked","take_iter_unchecked","temporal_conversions","timezone","timezone","to_data","to_data","to_data","to_data","to_data","to_data","to_data","to_data","to_data","to_data","to_data","to_data","to_data","to_data","to_data","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_pyarrow","true_count","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_binary","try_from_iter","try_from_sparse_iter","try_from_sparse_iter_with_size","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_new","try_unary","try_unary_mut","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id_builder","type_ids","type_ids","type_names","types","unary","unary_mut","unary_mut","unary_op","unary_opt","validate","validate_data","validate_decimal_precision","validate_full","validate_nulls","validate_values","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value","value_as_date","value_as_datetime","value_as_datetime_with_tz","value_as_duration","value_as_string","value_as_time","value_builder","value_builder","value_builder","value_builder","value_builder","value_builder","value_builder","value_builder","value_data","value_data","value_data","value_data","value_data","value_data","value_data","value_data","value_data","value_data","value_length","value_length","value_length","value_length","value_length","value_length","value_length","value_length","value_offset","value_offset","value_offset","value_offset_builder","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_type","value_type","value_type","value_type","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_capacities","with_data_type","with_precision_and_scale","with_timezone","with_timezone_opt","with_timezone_utc","with_values","with_values","with_values","write","write","alignment","byte_width","AnyDictionaryArray","Array","ArrayAccessor","ArrayRef","ArrowPrimitiveType","BinaryArray","BooleanArray","DATA_TYPE","Date32Array","Date64Array","Decimal128Array","Decimal256Array","DictionaryArray","DurationMicrosecondArray","DurationMillisecondArray","DurationNanosecondArray","DurationSecondArray","FixedSizeBinaryArray","FixedSizeListArray","Float16Array","Float32Array","Float64Array","GenericBinaryArray","GenericByteArray","GenericListArray","GenericStringArray","IS_LARGE","Int16Array","Int16DictionaryArray","Int16RunArray","Int32Array","Int32DictionaryArray","Int32RunArray","Int64Array","Int64DictionaryArray","Int64RunArray","Int8Array","Int8DictionaryArray","IntervalDayTimeArray","IntervalMonthDayNanoArray","IntervalYearMonthArray","Item","LargeBinaryArray","LargeListArray","LargeStringArray","ListArray","MapArray","Native","NativeAdapter","NullArray","OffsetSizeTrait","PREFIX","PrimitiveArray","RunArray","StringArray","StructArray","Time32MillisecondArray","Time32SecondArray","Time64MicrosecondArray","Time64NanosecondArray","TimestampMicrosecondArray","TimestampMillisecondArray","TimestampNanosecondArray","TimestampSecondArray","TypedDictionaryArray","TypedRunArray","UInt16Array","UInt16DictionaryArray","UInt32Array","UInt32DictionaryArray","UInt64Array","UInt64DictionaryArray","UInt8Array","UInt8DictionaryArray","UnionArray","alloc","as_any","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default_value","dictionary","entries","fields","fields","get_array_memory_size","get_buffer_memory_size","get_byte_width","into_data","is_empty","is_null","is_nullable","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_valid","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","len","len","len","len","len","logical_nulls","make_array","native","new_empty_array","new_null_array","normalized_keys","null_count","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","offset","offsets","phantom","ptr","run_array","run_ends","run_ends","run_ends","run_ends","slice","to_data","type_ids","value","value_data","value_data","value_data","value_data","value_data","value_data","value_data","value_data","value_length","value_length","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","with_values","ArrayBuilder","BinaryBuilder","BinaryDictionaryBuilder","BinaryRunBuilder","BooleanBufferBuilder","BooleanBuilder","BufferBuilder","Date32BufferBuilder","Date32Builder","Date64BufferBuilder","Date64Builder","Decimal128BufferBuilder","Decimal128Builder","Decimal256BufferBuilder","Decimal256Builder","DurationMicrosecondBufferBuilder","DurationMicrosecondBuilder","DurationMillisecondBufferBuilder","DurationMillisecondBuilder","DurationNanosecondBufferBuilder","DurationNanosecondBuilder","DurationSecondBufferBuilder","DurationSecondBuilder","FixedSizeBinaryBuilder","FixedSizeListBuilder","Float16BufferBuilder","Float16Builder","Float32BufferBuilder","Float32Builder","Float64BufferBuilder","Float64Builder","GenericBinaryBuilder","GenericByteBuilder","GenericByteDictionaryBuilder","GenericByteRunBuilder","GenericListBuilder","GenericStringBuilder","Int16BufferBuilder","Int16Builder","Int32BufferBuilder","Int32Builder","Int64BufferBuilder","Int64Builder","Int8BufferBuilder","Int8Builder","IntervalDayTimeBufferBuilder","IntervalDayTimeBuilder","IntervalMonthDayNanoBufferBuilder","IntervalMonthDayNanoBuilder","IntervalYearMonthBufferBuilder","IntervalYearMonthBuilder","LargeBinaryBuilder","LargeBinaryDictionaryBuilder","LargeBinaryRunBuilder","LargeListBuilder","LargeStringBuilder","LargeStringDictionaryBuilder","LargeStringRunBuilder","ListBuilder","MapBuilder","MapFieldNames","NullBuilder","PrimitiveBuilder","PrimitiveDictionaryBuilder","PrimitiveRunBuilder","StringBuilder","StringDictionaryBuilder","StringRunBuilder","StructBuilder","Time32MillisecondBufferBuilder","Time32MillisecondBuilder","Time32SecondBufferBuilder","Time32SecondBuilder","Time64MicrosecondBufferBuilder","Time64MicrosecondBuilder","Time64NanosecondBufferBuilder","Time64NanosecondBuilder","TimestampMicrosecondBufferBuilder","TimestampMicrosecondBuilder","TimestampMillisecondBufferBuilder","TimestampMillisecondBuilder","TimestampNanosecondBufferBuilder","TimestampNanosecondBuilder","TimestampSecondBufferBuilder","TimestampSecondBuilder","UInt16BufferBuilder","UInt16Builder","UInt32BufferBuilder","UInt32Builder","UInt64BufferBuilder","UInt64Builder","UInt8BufferBuilder","UInt8Builder","UnionBuilder","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","advance","advance","append","append","append","append","append","append","append","append","append","append_buffer","append_empty_value","append_empty_values","append_n","append_n","append_n_zeroed","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_null","append_nulls","append_nulls","append_nulls","append_option","append_option","append_option","append_option","append_option","append_option","append_option","append_option","append_packed_range","append_slice","append_slice","append_slice","append_slice","append_trusted_len_iter","append_trusted_len_iter","append_value","append_value","append_value","append_value","append_value","append_value","append_value","append_value","append_value","append_values","append_values","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_slice","as_slice","as_slice_mut","as_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","build","capacity","capacity","capacity","capacity","capacity","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone_into","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_value","current_value","current_value","current_value","current_value","current_value","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","dedup","dedup","dedup","dedup","dedup","default","default","default","default","default","default","default","default","default","default","default","entry","extend","extend","extend","extend","extend","extend","extend","extend","extend","field_builder","field_builders","field_names","fields","fields","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","finish_cloned","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_fields","from_iter","get_bit","has_current_value","has_current_value","has_current_value","has_current_value","has_current_value","initial_capacity","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","into_box_any","is_empty","is_empty","is_empty","key","key_builder","keys","keys_builder","keys_builder","keys_builder","keys_builder","keys_builder","keys_builder","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","list_len","make_builder","map","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_dense","new_from_buffer","new_from_buffer","new_from_buffer","new_from_buffer","new_from_builders","new_from_empty_builders","new_sparse","new_with_dictionary","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","num_fields","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_slice","offsets_slice","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","reserve","reserve","resize","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","set_bit","slices_mut","state","state","state","state","state","to_owned","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id_builder","validity_slice","validity_slice","validity_slice","validity_slice_mut","validity_slice_mut","value","value_builder","value_builder","value_builder","value_builder","value_builder","value_builder","value_builder","value_builder","value_length","value_length","value_offset_builder","values","values","values","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_ref","values_slice","values_slice","values_slice","values_slice_mut","values_slice_mut","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_dense","with_capacity_sparse","with_data_type","with_precision_and_scale","with_timezone","with_timezone_opt","write_str","AsArray","as_any_dictionary","as_any_dictionary_opt","as_binary","as_binary_opt","as_boolean","as_boolean_array","as_boolean_opt","as_bytes","as_bytes_opt","as_decimal_array","as_dictionary","as_dictionary_array","as_dictionary_opt","as_fixed_size_binary","as_fixed_size_binary_opt","as_fixed_size_list","as_fixed_size_list_array","as_fixed_size_list_opt","as_generic_binary_array","as_generic_list_array","as_large_list_array","as_largestring_array","as_list","as_list_array","as_list_opt","as_map","as_map_array","as_map_opt","as_null_array","as_primitive","as_primitive_array","as_primitive_opt","as_run_array","as_string","as_string_array","as_string_opt","as_struct","as_struct_array","as_struct_opt","as_union_array","downcast_array","export_array_into_raw","ArrayIter","BooleanIter","FixedSizeBinaryIter","FixedSizeListIter","GenericBinaryIter","GenericListArrayIter","GenericStringIter","MapArrayIter","PrimitiveIter","array","array","array","array","array","array","array","array","array","borrow","borrow_mut","cast","current","current","current","current","current","current","current","current","current","current_end","current_end","current_end","current_end","current_end","current_end","current_end","current_end","current_end","fmt","from","from_cast","into","into_iter","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","new","next","next_back","size_hint","try_from","try_into","type_id","vzip","RunArrayIter","array","borrow","borrow_mut","cast","current_back_logical","current_back_physical","current_front_logical","current_front_physical","fmt","from","from_cast","into","into_iter","new","next","next_back","size_hint","try_from","try_into","type_id","vzip","EPOCH_DAYS_FROM_CE","MICROSECONDS","MICROSECONDS_IN_DAY","MILLISECONDS","MILLISECONDS_IN_DAY","NANOSECONDS","NANOSECONDS_IN_DAY","SECONDS_IN_DAY","as_date","as_datetime","as_datetime_with_timezone","as_duration","as_time","date32_to_datetime","date64_to_datetime","duration_ms_to_duration","duration_ns_to_duration","duration_s_to_duration","duration_us_to_duration","time32ms_to_time","time32s_to_time","time64ns_to_time","time64us_to_time","time_to_time32ms","time_to_time32s","time_to_time64ns","time_to_time64us","timestamp_ms_to_datetime","timestamp_ns_to_datetime","timestamp_s_to_datetime","timestamp_us_to_datetime","Tz","TzOffset","borrow","borrow","borrow_mut","borrow_mut","cast","cast","clone","clone","clone_into","clone_into","fix","fmt","fmt","fmt","from","from","from_cast","from_cast","from_offset","from_str","into","into","offset","offset_from_local_date","offset_from_local_datetime","offset_from_utc_date","offset_from_utc_datetime","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","tz","vzip","vzip","ArrowDictionaryKeyType","ArrowPrimitiveType","ArrowTemporalType","ArrowTimestampType","BYTE_LENGTH","BinaryType","BooleanType","ByteArrayType","DATA_TYPE","DATA_TYPE","DEFAULT_TYPE","Date32Type","Date64Type","Decimal128Type","Decimal256Type","DecimalType","DurationMicrosecondType","DurationMillisecondType","DurationNanosecondType","DurationSecondType","Float16Type","Float32Type","Float64Type","GenericBinaryType","GenericStringType","Int16Type","Int32Type","Int64Type","Int8Type","IntervalDayTimeType","IntervalMonthDayNanoType","IntervalYearMonthType","LargeBinaryType","LargeUtf8Type","MAX_PRECISION","MAX_SCALE","Native","Native","Offset","PREFIX","PREFIX","RunEndIndexType","TYPE_CONSTRUCTOR","Time32MillisecondType","Time32SecondType","Time64MicrosecondType","Time64NanosecondType","TimestampMicrosecondType","TimestampMillisecondType","TimestampNanosecondType","TimestampSecondType","UInt16Type","UInt32Type","UInt64Type","UInt8Type","UNIT","Utf8Type","default_value","format_decimal","get_byte_width","get_time_unit","make_value","phantom","phantom","phantom","phantom","phantom","phantom","validate","validate_decimal_precision","validate_decimal_precision_and_scale","BooleanBuffer","Buffer","MutableBuffer","NullBuffer","OffsetBuffer","RunEndBuffer","ScalarBuffer","as_mut_ptr","as_ptr","as_ptr","as_ref","as_ref","as_slice","as_slice","as_slice_mut","bit_chunks","bit_chunks","bit_slice","bitand","bitor","bitwise_bin_op_helper","bitwise_quaternary_op_helper","bitwise_unary_op_helper","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","buffer","buffer","buffer_bin_and","buffer_bin_or","buffer_bin_xor","buffer_unary_not","capacity","capacity","cast","cast","cast","cast","cast","cast","cast","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect_bool","collect_bool","contains","count_set_bits","count_set_bits","count_set_bits_offset","data","data","default","deref","deref","deref","deref","deref_mut","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expand","extend","extend_from_slice","extend_zeros","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_custom_allocation","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_len_zeroed","from_lengths","from_raw_parts","from_slice_ref","from_trusted_len_iter","from_trusted_len_iter","from_trusted_len_iter_bool","from_vec","from_vec","get_end_physical_index","get_physical_index","get_start_physical_index","inner","inner","inner","inner","inner","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_mutable","into_vec","is_empty","is_empty","is_empty","is_empty","is_empty","is_null","is_set","is_valid","iter","iter","layout","len","len","len","len","len","len","len","len","length","max_value","new","new","new","new","new","new","new_empty","new_null","new_null","new_set","new_unchecked","new_unchecked","new_unchecked","new_unset","new_valid","new_zeroed","not","null_count","null_count","offset","offset","offset","offset","offset","phantom","ptr","ptr_eq","ptr_eq","ptr_eq","ptr_eq","push","push_unchecked","reserve","resize","run_ends","set_indices","set_len","set_null_bits","set_slices","shrink_to_fit","slice","slice","slice","slice","slice","slice","slice_with_length","sliced","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_for_each_valid_idx","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_trusted_len_iter","try_from_trusted_len_iter","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","typed_data","typed_data","typed_data_mut","union","valid_indices","valid_slices","validity","value","value_unchecked","values","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_bitset","with_capacity","CastOptions","Filter","FilterBuilder","FilterPredicate","LexicographicalComparator","Partitions","SlicesIterator","SortColumn","SortOptions","TakeOptions","and","and_kleene","binary","binary_mut","bit_and","bit_or","bit_xor","bool_and","bool_or","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_filter","can_cast_types","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_with_options","check_bounds","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compare","compare","compare_items","concat","concat_batches","count","count","count","day","day_dyn","default","default","default","descending","doy","doy_dyn","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","filter","filter","filter","filter","filter_record_batch","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_options","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","hash","hash","hour","hour_dyn","interleave","into","into","into","into","into","into","into","into","into","into_iter","into_py_dict","is_empty","is_not_null","is_null","kernels","len","lexicographical_partition_ranges","lexsort","lexsort_to_indices","max","max_array","max_binary","max_boolean","max_string","microsecond","microsecond_dyn","millisecond","millisecond_dyn","min","min_array","min_binary","min_boolean","min_string","minute","minute_dyn","month","month_dyn","multiply_fixed_point","multiply_fixed_point_checked","multiply_fixed_point_dyn","nanosecond","nanosecond_dyn","new","new","next","not","not","nullif","nulls_first","num_days_from_monday","num_days_from_monday_dyn","num_days_from_sunday","num_days_from_sunday_dyn","optimize","options","or","or_kleene","partial_cmp","partial_sort","partition","prep_null_mask_filter","quarter","quarter_dyn","ranges","rank","regexp_is_match_utf8","regexp_is_match_utf8_scalar","regexp_match","safe","second","second_dyn","shift","sort","sort_limit","sort_to_indices","strategy","strategy","sum","sum_array","sum_array_checked","sum_checked","take","to_owned","to_owned","to_owned","to_owned","to_owned","try_binary","try_binary_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_unary","try_unary_dyn","try_unary_mut","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary_dyn","unary_mut","using_chrono_tz_and_utc_naive_date_time","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","week","week_dyn","year","year_dyn","aggregate","arity","bitwise","boolean","cast","cast","cast_utils","cmp","comparison","concat","concat_elements","filter","interleave","length","nullif","numeric","partition","rank","regexp","sort","substring","take","temporal","window","zip","bit_and","bit_or","bit_xor","bool_and","bool_or","max","max_array","max_binary","max_boolean","max_string","min","min_array","min_binary","min_boolean","min_string","sum","sum_array","sum_array_checked","sum_checked","binary","binary_mut","try_binary","try_binary_mut","try_unary","try_unary_dyn","try_unary_mut","unary","unary_dyn","unary_mut","bitwise_and","bitwise_and_scalar","bitwise_not","bitwise_or","bitwise_or_scalar","bitwise_shift_left","bitwise_shift_left_scalar","bitwise_shift_right","bitwise_shift_right_scalar","bitwise_xor","bitwise_xor_scalar","and","and_kleene","is_not_null","is_null","not","or","or_kleene","CastOptions","can_cast_types","cast","cast_with_options","format_options","safe","MonthDayNano","Parser","parse","parse_decimal","parse_formatted","parse_interval_day_time","parse_interval_month_day_nano","parse_interval_year_month","string_to_datetime","string_to_time_nanoseconds","string_to_timestamp_nanos","distinct","eq","gt","gt_eq","lt","lt_eq","neq","not_distinct","contains","ends_with","eq","eq_binary","eq_binary_scalar","eq_bool","eq_bool_scalar","eq_dyn","eq_dyn_binary_scalar","eq_dyn_bool_scalar","eq_dyn_scalar","eq_dyn_utf8_scalar","eq_scalar","eq_utf8","eq_utf8_scalar","gt","gt_binary","gt_binary_scalar","gt_bool","gt_bool_scalar","gt_dyn","gt_dyn_binary_scalar","gt_dyn_bool_scalar","gt_dyn_scalar","gt_dyn_utf8_scalar","gt_eq","gt_eq_binary","gt_eq_binary_scalar","gt_eq_bool","gt_eq_bool_scalar","gt_eq_dyn","gt_eq_dyn_binary_scalar","gt_eq_dyn_bool_scalar","gt_eq_dyn_scalar","gt_eq_dyn_utf8_scalar","gt_eq_scalar","gt_eq_utf8","gt_eq_utf8_scalar","gt_scalar","gt_utf8","gt_utf8_scalar","ilike","in_list","in_list_utf8","like","lt","lt_binary","lt_binary_scalar","lt_bool","lt_bool_scalar","lt_dyn","lt_dyn_binary_scalar","lt_dyn_bool_scalar","lt_dyn_scalar","lt_dyn_utf8_scalar","lt_eq","lt_eq_binary","lt_eq_binary_scalar","lt_eq_bool","lt_eq_bool_scalar","lt_eq_dyn","lt_eq_dyn_binary_scalar","lt_eq_dyn_bool_scalar","lt_eq_dyn_scalar","lt_eq_dyn_utf8_scalar","lt_eq_scalar","lt_eq_utf8","lt_eq_utf8_scalar","lt_scalar","lt_utf8","lt_utf8_scalar","neq","neq_binary","neq_binary_scalar","neq_bool","neq_bool_scalar","neq_dyn","neq_dyn_binary_scalar","neq_dyn_bool_scalar","neq_dyn_scalar","neq_dyn_utf8_scalar","neq_scalar","neq_utf8","neq_utf8_scalar","nilike","nlike","no_simd_compare_op","no_simd_compare_op_scalar","regexp_is_match_utf8","regexp_is_match_utf8_scalar","starts_with","unary_cmp","concat","concat_batches","concat_element_binary","concat_elements_bytes","concat_elements_dyn","concat_elements_utf8","concat_elements_utf8_many","Filter","FilterBuilder","FilterPredicate","SlicesIterator","build_filter","count","count","filter","filter","filter","filter_record_batch","prep_null_mask_filter","strategy","strategy","interleave","bit_length","length","nullif","add","add_wrapping","div","mul","mul_wrapping","neg","neg_wrapping","rem","sub","sub_wrapping","Partitions","lexicographical_partition_ranges","partition","rank","regexp_is_match_utf8","regexp_is_match_utf8_scalar","regexp_match","LexicographicalComparator","SortColumn","SortOptions","compare_items","descending","lexsort","lexsort_to_indices","nulls_first","options","partial_sort","sort","sort_limit","sort_to_indices","values","substring","substring_by_char","TakeOptions","check_bounds","take","day","day_dyn","doy","doy_dyn","hour","hour_dyn","microsecond","microsecond_dyn","millisecond","millisecond_dyn","minute","minute_dyn","month","month_dyn","nanosecond","nanosecond_dyn","num_days_from_monday","num_days_from_monday_dyn","num_days_from_sunday","num_days_from_sunday_dyn","quarter","quarter_dyn","second","second_dyn","using_chrono_tz_and_utc_naive_date_time","week","week_dyn","year","year_dyn","shift","zip","ArrowDictionaryKeyType","ArrowNativeType","ArrowNativeTypeOp","ArrowNumericType","ArrowPrimitiveType","ArrowPrimitiveType","ArrowTemporalType","ArrowTimestampType","BYTE_LENGTH","Binary","BinaryType","Boolean","BooleanType","ByteArrayType","DATA_TYPE","DATA_TYPE","DATA_TYPE","DATA_TYPE","DECIMAL128_MAX_PRECISION","DECIMAL128_MAX_SCALE","DECIMAL256_MAX_PRECISION","DECIMAL256_MAX_SCALE","DECIMAL_DEFAULT_SCALE","DEFAULT_TYPE","DataType","Date32","Date32Type","Date64","Date64Type","DayTime","Decimal128","Decimal128Type","Decimal256","Decimal256Type","DecimalType","Dense","Dictionary","Duration","DurationMicrosecondType","DurationMillisecondType","DurationNanosecondType","DurationSecondType","Field","FieldRef","Fields","FixedSizeBinary","FixedSizeList","Float16","Float16Type","Float32","Float32Type","Float64","Float64Type","GenericBinaryType","GenericStringType","Int16","Int16Type","Int32","Int32Type","Int64","Int64Type","Int8","Int8Type","Interval","IntervalDayTimeType","IntervalMonthDayNanoType","IntervalUnit","IntervalYearMonthType","LargeBinary","LargeBinaryType","LargeList","LargeUtf8","LargeUtf8Type","List","MAX","MAX_DECIMAL_FOR_EACH_PRECISION","MAX_PRECISION","MAX_SCALE","MIN","MINUS_ONE","MIN_DECIMAL_FOR_EACH_PRECISION","Map","Microsecond","Millisecond","MonthDayNano","Nanosecond","Native","Native","Native","Null","ONE","ONE","Offset","PREFIX","PREFIX","RunEndEncoded","RunEndIndexType","Schema","SchemaBuilder","SchemaRef","Second","Simd","SimdMask","Sparse","Struct","TYPE_CONSTRUCTOR","Time32","Time32MillisecondType","Time32SecondType","Time64","Time64MicrosecondType","Time64NanosecondType","TimeUnit","Timestamp","TimestampMicrosecondType","TimestampMillisecondType","TimestampNanosecondType","TimestampSecondType","ToByteSlice","UInt16","UInt16Type","UInt32","UInt32Type","UInt64","UInt64Type","UInt8","UInt8Type","UNIT","Union","UnionFields","UnionMode","Utf8","Utf8Type","YearMonth","ZERO","ZERO","add","add","add","add","add_checked","add_checked","add_day_time","add_day_time","add_day_time","add_day_time","add_day_time","add_day_time","add_month_day_nano","add_month_day_nano","add_month_day_nano","add_month_day_nano","add_month_day_nano","add_month_day_nano","add_wrapping","add_wrapping","add_year_months","add_year_months","add_year_months","add_year_months","add_year_months","add_year_months","all_fields","alloc","alloc","as_i128","as_usize","as_usize","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","checked_abs","checked_add","checked_div","checked_mul","checked_neg","checked_pow","checked_rem","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","column_with_name","compare","compare","compare","compare","compare","compare","compare","compare","compare","compare","contains","contains","contains","contains","data_type","data_type","default","default","default","default_value","default_value","deref","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dict_id","dict_id","dict_is_ordered","dict_is_ordered","div","div","div","div","div_checked","div_checked","div_wrapping","div_wrapping","empty","empty","empty","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equals_datatype","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","ffi","field","field_with_name","fields","fields","fields","fields_with_dict_id","find","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_decimal","format_decimal","format_decimal","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_f64","from_i128","from_i128","from_i32","from_i64","from_iter","from_iter","from_iter","from_le_bytes","from_naive_date","from_naive_date","from_parts","from_pyarrow","from_pyarrow","from_pyarrow","from_str","from_string","from_usize","from_usize","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","get_byte_width","get_byte_width","get_time_unit","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","hash","hash","hash","hash","hash","hash","hash","hash","hash","high","i256","index_of","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_pyarrow","into_pyarrow","into_pyarrow","is_dictionary_key_type","is_empty","is_eq","is_eq","is_floating","is_ge","is_gt","is_integer","is_le","is_lt","is_ne","is_negative","is_nested","is_nullable","is_numeric","is_positive","is_primitive","is_run_ends_type","is_signed_integer","is_temporal","is_unsigned_integer","is_zero","is_zero","iter","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","len","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","low","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","make_value","make_value","make_value","make_value","make_value","make_value","make_value","make_value","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","metadata","metadata","metadata","metadata","mod_checked","mod_checked","mod_wrapping","mod_wrapping","mul","mul","mul","mul","mul_checked","mul_checked","mul_wrapping","mul_wrapping","name","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","neg","neg_checked","neg_checked","neg_wrapping","neg_wrapping","new","new","new","new","new_dict","new_dictionary","new_large_list","new_list","new_list","new_map","new_struct","new_union","new_with_metadata","nullable","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse_formatted","parse_formatted","parse_formatted","parse_formatted","parse_formatted","parse_formatted","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","phantom","phantom","phantom","phantom","phantom","phantom","phantom","phantom","pow_checked","pow_checked","pow_wrapping","pow_wrapping","primitive_width","project","ptr","ptr","push","rem","rem","rem","rem","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_metadata","shl","shr","signum","size","size","size","size","sub","sub","sub","sub","sub_checked","sub_checked","sub_wrapping","sub_wrapping","subtract_day_time","subtract_day_time","subtract_day_time","subtract_day_time","subtract_day_time","subtract_day_time","subtract_month_day_nano","subtract_month_day_nano","subtract_month_day_nano","subtract_month_day_nano","subtract_month_day_nano","subtract_month_day_nano","subtract_year_months","subtract_year_months","subtract_year_months","subtract_year_months","subtract_year_months","subtract_year_months","to_be_bytes","to_byte_slice","to_byte_slice","to_i128","to_i64","to_isize","to_isize","to_le_bytes","to_months","to_naive_date","to_naive_date","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_parts","to_parts","to_parts","to_pyarrow","to_pyarrow","to_pyarrow","to_string","to_string","to_string","to_string","to_u64","to_usize","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_merge","try_merge","try_merge","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","usize_as","usize_as","validate","validate","validate","validate_decimal256_precision","validate_decimal_precision","validate_decimal_precision","validate_decimal_precision","validate_decimal_precision","validate_decimal_precision_and_scale","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_capacity","with_data_type","with_metadata","with_metadata","with_name","with_nullable","wrapping_abs","wrapping_add","wrapping_div","wrapping_mul","wrapping_neg","wrapping_pow","wrapping_rem","wrapping_sub","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","ArrowError","CDataInterface","CastError","ComputeError","CsvError","DictionaryKeyOverflowError","DivideByZero","Err","ExternalError","InvalidArgumentError","IoError","IpcError","JsonError","MemoryError","NotYetImplemented","Ok","ParquetError","ParseError","Result","RunEndIndexOverflowError","SchemaError","borrow","borrow_mut","cast","fmt","fmt","from","from","from","from","from_cast","from_external_error","into","source","to_string","try_from","try_into","type_id","vzip","ArrowArray","DICTIONARY_ORDERED","FFI_ArrowArray","FFI_ArrowSchema","Flags","MAP_KEYS_SORTED","NULLABLE","all","array","bit_width","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_len","buffers","buffers","cast","cast","cast","cast","child","child","child","children","children","children","complement","consume","contains","create_buffer","dictionary","dictionary","dictionary","dictionary","dictionary","dictionary_ordered","difference","drop","drop","empty","empty","empty","extend","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_cast","from_cast","from_cast","from_cast","from_ffi","from_iter","from_name","insert","intersection","intersects","into","into","into","into","into_iter","is_all","is_empty","is_empty","is_released","iter","iter_names","len","length","map_keys_sorted","metadata","metadata","n_buffers","n_children","n_children","name","name","new","not","null_bit_buffer","null_count","null_count","nullable","num_buffers","num_children","offset","offset","owner","private_data","private_data","release","release","remove","schema","set","sub","sub_assign","symmetric_difference","to_ffi","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","union","vzip","vzip","vzip","vzip","with_flags","with_metadata","with_name","ArrowArrayStreamReader","EINVAL","EIO","ENOMEM","ENOSYS","ExportedArrayStream","FFI_ArrowArrayStream","StreamPrivateData","batch_reader","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","drop","empty","export_reader_into_raw","fmt","fmt","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_pyarrow","from_raw","get_error_code","get_last_error","get_last_error","get_last_error","get_next","get_next","get_next","get_private_data","get_schema","get_schema","get_schema","get_stream_last_error","get_stream_schema","into","into","into","into","into_iter","into_pyarrow","last_error","new","next","private_data","release","release_stream","schema","schema","stream","stream","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ArrowException","FromPyArrow","IntoPyArrow","PyArrowException","PyArrowType","ToPyArrow","arguments","as_ptr","as_ref","borrow","borrow","borrow_mut","borrow_mut","cast","cast","deref","extract","extract","fmt","fmt","fmt","from","from","from","from","from_borrowed_ptr_or_opt","from_cast","from_cast","from_owned_ptr_or_opt","from_pyarrow","into","into","into_py","into_py","into_pyarrow","new_err","source","to_object","to_py_err","to_pyarrow","to_string","try_from","try_from","try_from","try_from_exact","try_from_unchecked","try_into","try_into","type_id","type_id","type_object_raw","type_object_raw","validate_class","vzip","vzip","wrap","RecordBatch","RecordBatchIterator","RecordBatchOptions","RecordBatchReader","RecordBatchWriter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","clone","clone_into","close","column","column_by_name","columns","columns","default","eq","fmt","fmt","from","from","from","from","from","from_cast","from_cast","from_cast","from_pyarrow","get_array_memory_size","index","inner","inner_schema","into","into","into","into_iter","into_py_dict","into_pyarrow","match_field_names","new","new","new_empty","next","next_batch","num_columns","num_rows","project","row_count","row_count","schema","schema","schema","schema","size_hint","slice","to_owned","to_pyarrow","try_from","try_from","try_from","try_from_iter","try_from_iter_with_nullable","try_into","try_into","try_into","try_new","try_new_with_options","type_id","type_id","type_id","vzip","vzip","vzip","with_match_field_names","with_row_count","with_schema","write","EPOCH_DAYS_FROM_CE","MICROSECONDS","MICROSECONDS_IN_DAY","MILLISECONDS","MILLISECONDS_IN_DAY","NANOSECONDS","NANOSECONDS_IN_DAY","SECONDS_IN_DAY","as_date","as_datetime","as_datetime_with_timezone","as_duration","as_time","date32_to_datetime","date64_to_datetime","duration_ms_to_duration","duration_ns_to_duration","duration_s_to_duration","duration_us_to_duration","time32ms_to_time","time32s_to_time","time64ns_to_time","time64us_to_time","time_to_time32ms","time_to_time32s","time_to_time64ns","time_to_time64us","timestamp_ms_to_datetime","timestamp_ns_to_datetime","timestamp_s_to_datetime","timestamp_us_to_datetime","BooleanTensor","Date32Tensor","Date64Tensor","Decimal128Tensor","Decimal256Tensor","DurationMicrosecondTensor","DurationMillisecondTensor","DurationNanosecondTensor","DurationSecondTensor","Float16Tensor","Float32Tensor","Float64Tensor","Int16Tensor","Int32Tensor","Int64Tensor","Int8Tensor","IntervalDayTimeTensor","IntervalMonthDayNanoTensor","IntervalYearMonthTensor","Tensor","Time32MillisecondTensor","Time32SecondTensor","Time64MicrosecondTensor","Time64NanosecondTensor","TimestampMicrosecondTensor","TimestampMillisecondTensor","TimestampNanosecondTensor","TimestampSecondTensor","UInt16Tensor","UInt32Tensor","UInt64Tensor","UInt8Tensor","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","borrow","borrow_mut","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","cast","compute_column_major_strides","compute_row_major_strides","data","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","dim_name","fmt","from","from_cast","into","is_column_major","is_contiguous","is_row_major","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","names","ndim","new_column_major","new_row_major","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","shape","size","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","strides","try_from","try_into","try_new","type_id","vzip","bench_util","bit_chunk_iterator","bit_iterator","bit_mask","bit_util","data_gen","display","pretty","string_writer","test_util","create_binary_array","create_boolean_array","create_dict_from_values","create_fsb_array","create_primitive_array","create_primitive_array_with_seed","create_primitive_run_array","create_sparse_dict_from_values","create_string_array","create_string_array_for_runs","create_string_array_with_len","create_string_dict_array","BitChunkIterator","BitChunks","UnalignedBitChunk","UnalignedBitChunkIterator","a","b","bit_offset","bit_offset","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","cast","cast","cast","chunk_len","chunk_len","chunk_len","chunks","chunks","count_ones","fmt","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","index","into","into","into","into_iter","into_iter","iter","iter","iter_padded","lead_padding","lead_padding","len","new","new","next","prefix","prefix","remainder_bits","remainder_len","remainder_len","size_hint","suffix","suffix","trailing_padding","trailing_padding","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BitIndexIterator","BitIterator","BitSliceIterator","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","cast","cast","cast","chunk_offset","current_chunk","current_chunk","current_offset","current_offset","end_offset","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","into","into","into","into_iter","into_iter","into_iter","into_py_dict","iter","iter","len","new","new","new","next","next","next","next_back","try_for_each_valid_idx","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","set_bits","ceil","get_bit","get_bit_raw","round_upto_multiple_of_64","round_upto_power_of_2","set_bit","set_bit_raw","unset_bit","unset_bit_raw","create_random_array","create_random_batch","create_random_list_array","create_random_null_buffer","create_random_offsets","ArrayFormatter","DurationFormat","FormatOptions","ISO8601","Pretty","ValueFormatter","array_value_to_string","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","clone","clone","clone_into","clone_into","date_format","datetime_format","default","duration_format","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","format","formatter","from","from","from","from","from_cast","from_cast","from_cast","from_cast","hash","hash","idx","into","into","into","into","lexical_to_string","new","null","safe","safe","time_format","timestamp_format","timestamp_tz_format","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","try_to_string","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","with_date_format","with_datetime_format","with_display_error","with_duration_format","with_null","with_time_format","with_timestamp_format","with_timestamp_tz_format","write","pretty_format_batches","pretty_format_batches_with_options","pretty_format_columns","pretty_format_columns_with_options","print_batches","print_columns","StringWriter","borrow","borrow_mut","cast","data","default","flush","fmt","from","from_cast","into","new","to_string","try_from","try_into","type_id","vzip","write","BadIterator","arrow_test_data","borrow","borrow_mut","cast","claimed","clone","clone_into","cur","fmt","from","from_cast","get_data_dir","get_temp_file","into","into_iter","into_py_dict","items","limit","new","next","parquet_test_data","random_bytes","seedable_rng","size_hint","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"arrow"],[19,"arrow::alloc"],[21,"arrow::array"],[1889,"arrow::array::BufferSpec"],[1891,"arrow::array::array"],[2207,"arrow::array::builder"],[3073,"arrow::array::cast"],[3115,"arrow::array::ffi"],[3116,"arrow::array::iterator"],[3177,"arrow::array::run_iterator"],[3199,"arrow::array::temporal_conversions"],[3230,"arrow::array::timezone"],[3271,"arrow::array::types"],[3342,"arrow::buffer"],[3641,"arrow::compute"],[3903,"arrow::compute::kernels"],[3928,"arrow::compute::kernels::aggregate"],[3947,"arrow::compute::kernels::arity"],[3957,"arrow::compute::kernels::bitwise"],[3968,"arrow::compute::kernels::boolean"],[3975,"arrow::compute::kernels::cast"],[3981,"arrow::compute::kernels::cast_utils"],[3992,"arrow::compute::kernels::cmp"],[4000,"arrow::compute::kernels::comparison"],[4092,"arrow::compute::kernels::concat"],[4094,"arrow::compute::kernels::concat_elements"],[4099,"arrow::compute::kernels::filter"],[4113,"arrow::compute::kernels::interleave"],[4114,"arrow::compute::kernels::length"],[4116,"arrow::compute::kernels::nullif"],[4117,"arrow::compute::kernels::numeric"],[4127,"arrow::compute::kernels::partition"],[4130,"arrow::compute::kernels::rank"],[4131,"arrow::compute::kernels::regexp"],[4134,"arrow::compute::kernels::sort"],[4148,"arrow::compute::kernels::substring"],[4150,"arrow::compute::kernels::take"],[4153,"arrow::compute::kernels::temporal"],[4182,"arrow::compute::kernels::window"],[4183,"arrow::compute::kernels::zip"],[4184,"arrow::datatypes"],[5833,"arrow::error"],[5872,"arrow::ffi"],[6030,"arrow::ffi_stream"],[6112,"arrow::pyarrow"],[6168,"arrow::record_batch"],[6251,"arrow::temporal_conversions"],[6282,"arrow::tensor"],[6533,"arrow::util"],[6543,"arrow::util::bench_util"],[6555,"arrow::util::bit_chunk_iterator"],[6626,"arrow::util::bit_iterator"],[6683,"arrow::util::bit_mask"],[6684,"arrow::util::bit_util"],[6693,"arrow::util::data_gen"],[6698,"arrow::util::display"],[6792,"arrow::util::pretty"],[6798,"arrow::util::string_writer"],[6816,"arrow::util::test_util"],[6846,"core::result"],[6847,"core::any"],[6848,"core::marker"],[6849,"core::option"],[6850,"core::ops::function"],[6851,"alloc::alloc"],[6852,"alloc::vec"],[6853,"alloc::boxed"],[6854,"alloc::sync"],[6855,"core::clone"],[6856,"core::cmp"],[6857,"core::convert"],[6858,"core::fmt"],[6859,"core::fmt"],[6860,"half::binary16"],[6861,"core::ops::function"],[6862,"pyo3::types::any"],[6863,"pyo3::err"],[6864,"core::marker"],[6865,"pyo3::instance"],[6866,"pyo3::err"],[6867,"core::convert"],[6868,"chrono::naive::datetime"],[6869,"chrono::datetime"],[6870,"chrono::duration"],[6871,"chrono::naive::time"],[6872,"core::convert"],[6873,"core::default"],[6874,"chrono::offset::fixed"],[6875,"chrono::offset"],[6876,"core::marker"],[6877,"core::ptr::non_null"],[6878,"core::hash"],[6879,"pyo3::types::dict"],[6880,"chrono::offset"],[6881,"serde::de"],[6882,"arrow_ipc::gen::Schema"],[6883,"std::collections::hash::map"],[6884,"std::collections::hash::map"],[6885,"std::io::error"],[6886,"std::io"],[6887,"std::io::buffered"],[6888,"alloc::string"],[6889,"core::fmt"],[6890,"bitflags::iter"],[6891,"alloc::ffi::c_str"],[6892,"std::os::raw"],[6893,"pyo3::err::err_state"],[6894,"pyo3::err"],[6895,"core::option"],[6896,"core::iter::adapters::cloned"],[6897,"core::iter::adapters::chain"],[6898,"rand::distributions::uniform"],[6899,"lexical_core"],[6900,"core::fmt"],[6901,"std::fs"],[6902,"rand::rngs::std"]],"d":["Defines the low-level <code>Allocation</code> API for shared memory …","Statically typed implementations of Arrow Arrays","Types of shared memory region","Computation kernels on Arrow Arrays","","Defines the logical data types of Arrow arrays.","Downcast an <code>Array</code> to a <code>DictionaryArray</code> based on its …","Downcast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>","Defines <code>ArrowError</code> for representing failures in various …","Contains declarations to bind to the C Data Interface.","Contains declarations to bind to the C Stream Interface.","","","Pass Arrow objects from and to PyArrow, using Arrow’s C …","","","Conversion methods for dates and times.","Arrow Tensor Type, defined in <code>format/Tensor.fbs</code>.","","Cache and allocation multiple alignment size","The owner of an allocation. The trait implementation is …","Buffer is always null. Unused currently in Rust …","A <code>DictionaryArray</code> with the key type erased","An array in the arrow columnar format","Don’t preallocate inner buffers and rely on array growth …","A generic trait for accessing the values of an <code>Array</code>","Trait for dealing with different array builders at runtime","An generic representation of Arrow array data which …","Builder for <code>ArrayData</code> type","","An iterator that returns Some(T) or None, that can be used …","A reference-counted reference to a generic <code>Array</code>","Trait for <code>ArrowNativeType</code> that adds checked and unchecked …","A subtype of primitive type that represents numeric values.","Trait bridging the dynamic-typed nature of Arrow (via …","An extension trait for <code>dyn Array</code> that provides ergonomic …","Binary, Utf8 and LargeUtf8 data types Define","A <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets","Builder for <code>BinaryArray</code>","Builder for <code>DictionaryArray</code> of <code>BinaryArray</code>","Builder for <code>RunArray</code> of <code>BinaryArray</code>","Buffer holds a bitmap.","An array of boolean values","Builder for <code>BooleanBuffer</code>","Builder for <code>BooleanArray</code>","an iterator that returns Some(T) or None, that can be used …","Builder for creating a Buffer object.","Layout specification for a single data type buffer","Define capacities of child data or data buffers.","Data type of the array.","the corresponding Arrow data type of this primitive type.","The data type constructor of list array. The input is the …","Layout specification for a data type","A <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>","Buffer builder for 32-bit date type.","A 32-bit date array builder.","A <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …","Buffer builder for 64-bit date type.","A 64-bit date array builder.","A possibly <code>Scalar</code> <code>Array</code>","A <code>PrimitiveArray</code> of 128-bit fixed point decimals","Buffer builder for 128-bit decimal type.","A decimal 128 array builder","A <code>PrimitiveArray</code> of 256-bit fixed point decimals","Buffer builder for 256-bit decimal type.","A decimal 256 array builder","Dictionary type","An array of dictionary encoded values","A <code>PrimitiveArray</code> of elapsed durations in microseconds","Buffer builder for elaspsed time of microseconds unit.","An elapsed time in microseconds array builder.","A <code>PrimitiveArray</code> of elapsed durations in milliseconds","Buffer builder for elaspsed time of milliseconds unit.","An elapsed time in milliseconds array builder.","A <code>PrimitiveArray</code> of elapsed durations in nanoseconds","Buffer builder for elaspsed time of nanoseconds unit.","An elapsed time in nanoseconds array builder.","A <code>PrimitiveArray</code> of elapsed durations in seconds","Buffer builder for elaspsed time of second unit.","An elapsed time in seconds array builder.","Compare the values at two arbitrary indices in two arrays.","An array of fixed size binary arrays","Builder for <code>FixedSizeBinaryArray</code>","an iterator that returns Some(T) or None, that can be used …","An array of [fixed length lists], similar to JSON arrays …","Builder for <code>FixedSizeListArray</code>","an iterator that returns Some(T) or None, that can be used …","Each element is a fixed width primitive, with the given …","A <code>PrimitiveArray</code> of <code>f16</code>","Buffer builder for 16-bit floating point type.","A 16-bit floating point array builder.","A <code>PrimitiveArray</code> of <code>f32</code>","Buffer builder for 32-bit floating point type.","A 32-bit floating point array builder.","A <code>PrimitiveArray</code> of <code>f64</code>","Buffer builder for 64-bit floating point type.","A 64-bit floating point array builder.","A <code>GenericBinaryArray</code> for storing <code>[u8]</code>","Array builder for <code>GenericBinaryArray</code>","an iterator that returns Some(T) or None, that can be used …","An array of variable length byte arrays","Builder for <code>GenericByteArray</code>","Builder for <code>DictionaryArray</code> of <code>GenericByteArray</code>","Builder for <code>RunArray</code> of <code>GenericByteArray</code>","An array of variable length lists, similar to JSON arrays …","an iterator that returns Some(T) or None, that can be used …","Builder for <code>GenericListArray</code>","A <code>GenericByteArray</code> for storing <code>str</code>","Array builder for <code>GenericStringArray</code>","an iterator that returns Some(T) or None, that can be used …","True for 64 bit offset size and false for 32 bit offset …","A <code>PrimitiveArray</code> of <code>i16</code>","Buffer builder for signed 16-bit integer type.","A signed 16-bit integer array builder.","A <code>DictionaryArray</code> indexed by <code>i16</code>","A <code>RunArray</code> with <code>i16</code> run ends","A <code>PrimitiveArray</code> of <code>i32</code>","Buffer builder for signed 32-bit integer type.","A signed 32-bit integer array builder.","A <code>DictionaryArray</code> indexed by <code>i32</code>","A <code>RunArray</code> with <code>i32</code> run ends","A <code>PrimitiveArray</code> of <code>i64</code>","Buffer builder for signed 64-bit integer type.","A signed 64-bit integer array builder.","A <code>DictionaryArray</code> indexed by <code>i64</code>","A <code>RunArray</code> with <code>i64</code> run ends","A <code>PrimitiveArray</code> of <code>i8</code>","Buffer builder for signed 8-bit integer type.","A signed 8-bit integer array builder.","A <code>DictionaryArray</code> indexed by <code>i8</code>","A <code>PrimitiveArray</code> of “calendar” intervals in days and …","Buffer builder for “calendar” interval in days and …","A “calendar” interval in days and milliseconds array …","A <code>PrimitiveArray</code> of “calendar” intervals in  months, …","Buffer builder “calendar” interval in months, days, …","A “calendar” interval in months, days, and nanoseconds …","A <code>PrimitiveArray</code> of “calendar” intervals in months","Buffer builder for “calendar” interval in months.","A “calendar” interval in months array builder.","The Arrow type of the element being accessed.","A <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets","Builder for <code>LargeBinaryArray</code>","Builder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>","Builder for <code>RunArray</code> of <code>LargeBinaryArray</code>","A <code>GenericListArray</code> of variable size lists, storing offsets …","Builder for <code>LargeListArray</code>","A <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets","Builder for <code>LargeStringArray</code>","Builder for <code>DictionaryArray</code> of <code>LargeStringArray</code>","Builder for <code>RunArray</code> of <code>LargeStringArray</code>","List and LargeList data types Define","A <code>GenericListArray</code> of variable size lists, storing offsets …","Builder for <code>ListArray</code>","An array of key-value maps","an iterator that returns Some(T) or None, that can be used …","Builder for <code>MapArray</code>","The <code>Field</code> names for a <code>MapArray</code>","Struct to efficiently and interactively create an ArrayData…","Corresponding Rust native type for the primitive type.","An optional primitive value","An array of null values","Builder for <code>NullArray</code>","The multiplicative identity","A type that can be used within a variable-size array to …","Prefix for the offset size","An array of primitive values","Builder for <code>PrimitiveArray</code>","Builder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>","an iterator that returns Some(T) or None, that can be used …","Builder for <code>RunArray</code> of <code>PrimitiveArray</code>","A two-dimensional batch of column-oriented data with a …","Generic implementation of RecordBatchReader that wraps an …","Options that control the behaviour used when creating a …","Trait for types that can read <code>RecordBatch</code>’s.","Trait for types that can write <code>RecordBatch</code>’s.","An array of run-end encoded values","A wrapper around a single value <code>Array</code> that implements <code>Datum</code>…","Defines the SIMD type that should be used for this numeric …","Defines the SIMD Mask type that should be used for this …","A <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets","Builder for <code>StringArray</code>","Builder for <code>DictionaryArray</code> of <code>StringArray</code>","Builder for <code>RunArray</code> of <code>StringArray</code>","Struct type","An array of structs","Builder for <code>StructArray</code>","A <code>PrimitiveArray</code> of milliseconds since midnight stored as …","Buffer builder for 32-bit elaspsed time since midnight of …","A 32-bit elaspsed time in milliseconds array builder.","A <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>","Buffer builder for 32-bit elaspsed time since midnight of …","A 32-bit elaspsed time in seconds array builder.","A <code>PrimitiveArray</code> of microseconds since midnight stored as …","Buffer builder for 64-bit elaspsed time since midnight of …","A 64-bit elaspsed time in microseconds array builder.","A <code>PrimitiveArray</code> of nanoseconds since midnight stored as …","Buffer builder for 64-bit elaspsed time since midnight of …","A 64-bit elaspsed time in nanoseconds array builder.","A <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …","Buffer builder for timestamp type of microsecond unit.","A timestamp microsecond array builder.","A <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …","Buffer builder for timestamp type of millisecond unit.","A timestamp millisecond array builder.","A <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …","Buffer builder for timestamp type of nanosecond unit.","A timestamp nanosecond array builder.","A <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>","Buffer builder for timestamp type of second unit.","A timestamp second array builder.","A <code>DictionaryArray</code> typed on its child values array","A <code>RunArray</code> typed typed on its child values array","A <code>PrimitiveArray</code> of <code>u16</code>","Buffer builder for usigned 16-bit integer type.","An usigned 16-bit integer array builder.","A <code>DictionaryArray</code> indexed by <code>u16</code>","A <code>PrimitiveArray</code> of <code>u32</code>","Buffer builder for usigned 32-bit integer type.","An usigned 32-bit integer array builder.","A <code>DictionaryArray</code> indexed by <code>u32</code>","A <code>PrimitiveArray</code> of <code>u64</code>","Buffer builder for usigned 64-bit integer type.","An usigned 64-bit integer array builder.","A <code>DictionaryArray</code> indexed by <code>u64</code>","A <code>PrimitiveArray</code> of <code>u8</code>","Buffer builder for usigned 8-bit integer type.","An usigned 8-bit integer array builder.","A <code>DictionaryArray</code> indexed by <code>u8</code>","An array of values of varying types","Builder for <code>UnionArray</code>","Variable width, such as string data for utf8 data","The additive identity","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checked addition operation","","Wrapping addition operation","","","The concrete array definitions","","","","","","","","","","","Returns the array as <code>Any</code> so that it can be downcasted to a …","Returns the builder as a non-mutable <code>Any</code> reference.","","","","","","","","","","","","","","","Downcasts this to a <code>AnyDictionaryArray</code> panicking if not …","Downcasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …","","Returns the builder as a mutable <code>Any</code> reference.","Downcast this to a <code>GenericBinaryArray</code> panicking if not …","Downcast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …","Downcast this to a <code>BooleanArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>BooleanArray</code> returning <code>None</code> if not …","","Downcast this to a <code>GenericByteArray</code> panicking if not …","Downcast this to a <code>GenericByteArray</code> returning <code>None</code> if not …","","Force downcast of an Array, such as an ArrayRef to …","Downcast this to a <code>DictionaryArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>DictionaryArray</code> returning <code>None</code> if not …","","Downcast this to a <code>FixedSizeBinaryArray</code> panicking if not …","Downcast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …","","Downcast this to a <code>FixedSizeListArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …","","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>GenericListArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>GenericListArray</code> returning <code>None</code> if not …","","Downcast this to a <code>MapArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>MapArray</code> returning <code>None</code> if not possible","","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>PrimitiveArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …","Downcast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …","","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>GenericStringArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>GenericStringArray</code> returning <code>None</code> if …","Downcast this to a <code>StructArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>StructArray</code> returning <code>None</code> if not …","","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Performs a SIMD binary operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>buffer</code> as a slice of type <code>T</code> starting at …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Buffer</code> storing data for this <code>ArrayData</code>","","","A vector of buffer layout specifications, one for each …","","Creates an array data, validating all inputs","Creates an array data, validating all inputs, and aligning …","returns a comparison function that compares two values at …","Creates an array data, without any validation","Defines push-based APIs for constructing arrays","Returns a builder to construct a <code>ArrayData</code> instance of the …","Returns a new primitive array builder","Returns a new boolean array builder","Returns a new null array builder","Can contain a null bitmask","Defines helper functions for downcasting <code>dyn Array</code> to …","","","","","","","","","","","","","","","","","","","","","","","Accesses the child array for <code>type_id</code>.","Returns a slice of children <code>ArrayData</code>. This will be non …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write footer or termination data, then mark the writer as …","Returns the field at <code>pos</code>.","Return child array whose field name equals to column_name","Return field names in this struct array","Returns the fields of the struct array","","Returns child array refs of the struct array","Compare operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the <code>DataType</code> of this array.","","","","Returns a reference to the <code>DataType</code> of this <code>ArrayData</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a default value of this primitive type.","","","Checked division operation","Wrapping division operation","Downcast this <code>RunArray</code> to a <code>TypedRunArray</code>","Downcasts a <code>dyn Array</code> to a concrete type","Downcast this dictionary to a <code>TypedDictionaryArray</code>","Downcast an <code>Array</code> to a <code>DictionaryArray</code> based on its …","Given one or more expressions evaluating to an integer …","Given one or more expressions evaluating to primitive …","Downcast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>","Downcast an <code>Array</code> to a <code>RunArray</code> based on its <code>DataType</code>, …","Given one or more expressions evaluating to an integer …","Given one or more expressions evaluating to primitive …","Downcast an <code>Array</code> to a temporal <code>PrimitiveArray</code> based on …","Returns a reference to the <code>StructArray</code> entries of this map","","<code>Field</code> name for map entries","SIMD version of equal","","","","","","","","","","","","","","","","","","","","","","","Exports an array to raw pointers of the C Data Interface …","Extends this array with a chunk of its source arrays","","Extends this MutableArrayData with null elements, …","","","Returns the number of non null, false values within this …","Contains functionality to load an ArrayData from the C …","","","Returns the <code>Fields</code> of this <code>StructArray</code>","","","","","Builds the array","Builds the array without resetting the underlying builder.","","","","","","","","","","","","","","","","","","","","","","","Creates a ArrayData from the pushed regions up to this …","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>BooleanArray</code> by evaluating the binary operation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>GenericListArray</code> from an iterator of primitive …","Creates a <code>FixedSizeListArray</code> from an iterator of primitive …","Creates a <code>GenericByteArray</code> based on an iterator of values …","Creates a PrimitiveArray based on an iterator of values …","Creates a GenericBinaryArray from a vector of Optional …","Construct a timestamp array from a vec of <code>Option&lt;i64&gt;</code> …","","Creates a <code>PrimitiveArray</code> from an iterator of trusted …","Create a <code>BooleanArray</code> by evaluating the operation for each …","Creates a PrimitiveArray based on a constant value with …","Creates a GenericBinaryArray from a vector of byte slices","Construct a timestamp array from a vec of i64 values and …","SIMD version of greater than or equal to","Returns the value for this <code>Datum</code> and a boolean indicating …","","","","","","","","","","","","","","","","","","Returns the total number of bytes of memory occupied …","","","","Returns the total number of bytes of memory occupied …","","","","","","","","","","","","Returns the total number of bytes of memory pointed to by …","","","","Returns the total number of bytes of memory occupied by the","","","","","","","","","","","","Returns the byte width of this primitive type.","Get the data type of the array.","Get the data type of the array.","Returns the physical index at which the array slice ends.","Returns index to the physical array for the given index to …","Returns the physical indices of the input logical indices. …","Returns the total number of the bytes of memory occupied by","Returns the physical index at which the array slice starts.","SIMD version of greater than","","","","","","Get a reference to a column’s array by name.","Initializes a SIMD register to a constant value","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns <code>GenericByteBuilder</code> of this byte array for mutating …","Creates a ArrayDataBuilder from the pushed regions up to …","Converts this <code>ArrayData</code> into an <code>ArrayDataBuilder</code>","Returns <code>PrimitiveBuilder</code> of this primitive array for …","Returns the underlying data of this array","","","","","","","","","","","","","","","","","","","","","Deconstruct this array into its constituent parts","Deconstruct this array into its constituent parts","Deconstruct this array into its constituent parts","Deconstruct this array into its constituent parts","Deconstruct this array into its constituent parts","Deconstruct this array into its constituent parts","Deconstruct this array into its constituent parts","Deconstruct this array into its constituent parts","Returns <code>PrimitiveDictionaryBuilder</code> of this dictionary …","","Returns true if all data within this array is ASCII","Returns if this <code>PrimitiveArray</code> is compatible with the …","Returns whether this array is empty.","","Whether this dictionary is empty","","","Returns true if len is 0","Returns whether this <code>ArrayData</code> is empty","","","Returns whether this array is empty.","","","Returns whether number of array slots is zero","Returns whether this array is empty.","","","","","","","","Equality operation","Greater than equals operation","Greater than operation","Less than equals operation","Less than operation","Not equal operation","Returns whether the element at index <code>i</code> is null","Returns whether the element at <code>index</code> is null. When using …","Union types always return non null as there is no validity …","","","","","Returns <code>false</code> if the array is guaranteed to not contain …","","Currently exists for compatibility purposes with Arrow IPC.","","","","","","","","","","Returns whether the element at index <code>i</code> is not null","Returns whether the element at <code>index</code> is not null. When …","Union types always return non null as there is no validity …","Returns true if zero else false","constructs a new iterator","constructs a new iterator","constructs a new iterator","constructs a new iterator","constructs a new iterator","constructs a new iterator","constructs a new iterator","Idiomatic iterators for <code>Array</code>","Return the value of <code>keys</code> (the dictionary key) at index <code>i</code>, …","<code>Field</code> name for map key","","Returns the data type of the map’s keys.","Returns the primitive keys of this dictionary as an <code>Array</code>","Return an array view of the keys of this dictionary as a …","","Returns the keys of this <code>TypedDictionaryArray</code>","Returns a reference to the keys of this map","","","","","","","","","","","","","","","","Return an iterator over the keys (indexes into the …","The number of SIMD lanes available","Return the expected <code>DataTypeLayout</code> Arrays of this data …","SIMD version of less than or equal to","Returns the length (i.e., number of elements) of this …","Returns the number of array slots in the builder","","The length of the dictionary is the length of the keys …","","","Returns the current length","Returns the length (i.e., number of elements) of this …","","","","Returns the length of this array.","","","","Returns the length of this array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Loads a slice into a SIMD register","Calculates the logical length of the array encoded by the …","","","","","Returns the logical null buffer of this array if any","","","","","","","","","","","If <code>value</code> is present in <code>values</code> (aka the dictionary), …","SIMD version of less than","Constructs an array using the input <code>data</code>. Returns a …","Returns a builder with capacity <code>capacity</code> that corresponds …","","Returns <code>true</code> if any of the lanes in the mask are <code>true</code>","Creates a new SIMD mask for this SIMD type from the …","Gets the value of a single lane in a SIMD mask","Creates a new SIMD mask for this SIMD type filling it with …","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Sets the value of a single lane of a SIMD mask","Creates a bitmask from the given SIMD mask. Each bit …","Match field names of structs and lists. If set to <code>true</code>, …","Checked remainder operation","Wrapping remainder operation","Checked multiplication operation","Wrapping multiplication operation","Corresponding Rust native type if available","SIMD version of not equal","Checked negation operation","Wrapping negation operation","Create a new <code>GenericByteArray</code> from the provided parts, …","Attempt to create a new DictionaryArray with a specified …","returns a new MutableArrayData with capacity to <code>capacity</code> …","","Create a new <code>GenericListArray</code> from the provided parts","Create a new <code>PrimitiveArray</code> from the provided values and …","Create a new <code>BooleanArray</code> from the provided values and …","Create a new <code>FixedSizeBinaryArray</code> with <code>size</code> element size, …","Create a new <code>FixedSizeListArray</code> with <code>size</code> element size, …","Create a new <code>MapArray</code> from the provided parts","Create a new <code>NullArray</code> of the specified length","Create a new <code>StructArray</code> from the provided parts, …","Create a new <code>Scalar</code> from an <code>Array</code>","Describes a basic numeric array where each element has a …","Returns a new empty ArrayData valid for <code>data_type</code>.","Describes arrays which have no data of their own (e.g. …","Creates a new empty array","Describes a basic numeric array where each element has …","Creates map array from provided keys, values and …","Create a new <code>GenericByteArray</code> of length <code>len</code> where all …","Returns a new <code>ArrayData</code> valid for <code>data_type</code> containing <code>len</code> …","Create a new <code>GenericListArray</code> of length <code>len</code> where all …","Create a new <code>PrimitiveArray</code> of the given length where all …","Create a new <code>BooleanArray</code> with length <code>len</code> consisting only …","Create a new <code>FixedSizeBinaryArray</code> of length <code>len</code> where all …","Create a new <code>FixedSizeListArray</code> of length <code>len</code> where all …","Create a new <code>StructArray</code> of length <code>len</code> where all values …","Creates a new array of <code>data_type</code> of length <code>length</code> filled …","Create a new <code>Scalar</code> from <code>v</code>","Create a new <code>Scalar</code> from <code>value</code>","Create a new <code>Scalar</code> from <code>value</code>","Create a new <code>GenericByteArray</code> from the provided parts, …","Create a new <code>DictionaryArray</code> without performing validation","Create a new ArrayData instance;","Create a new <code>StructArray</code> from the provided parts without …","Creates a new <code>UnionArray</code>.","Reads the next <code>RecordBatch</code>.","Returns the keys of this dictionary as usize","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the current null count","Returns the total number of nulls in this array","","Returns the total number of physical null values in this …","Union types always return 0 null count as there is no …","","Validates the Decimal Array, if the value of slot is …","Returns the null buffer of this array if any","","","","Returns a reference to the null buffer of this <code>ArrayData</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of <code>Unicode Scalar Value</code> in the string …","Return the number of fields in this struct array","Computes an occupancy mask for this dictionary’s values","Returns the offset into the underlying data used by this …","","","","Returns the offset of this <code>ArrayData</code>","","","","","","","","","","","","","","","Returns a reference to the offsets of this array","Returns a reference to the offsets of this list","Returns a reference to the offsets of this map","Returns the <code>offsets</code> buffer if this is a dense array","","","","","","","","","","","","","","","Checked exponentiation operation","Wrapping exponentiation operation","Returns the decimal precision of this array","","","","","","","","","Returns true if this <code>ArrayData</code> is equal to <code>other</code>, using …","Reinterprets this array’s contents as a different data …","","Optional row count, useful for specifying a row count for …","Returns the run array of this <code>TypedRunArray</code>","","Returns a reference to <code>RunEndBuffer</code>","Returns the run_ends of this <code>TypedRunArray</code>","","","","","","","","","","","Idiomatic iterator for <code>RunArray</code>","Returns the decimal scale of this array","Returns the schema of this <code>RecordBatchReader</code>.","","Returns a zero-copy slice of this array with the indicated …","Returns a zero-copy slice of this array with the indicated …","","","Returns a zero-copy slice of this array with the indicated …","","Creates a zero-copy slice of itself. This creates a new …","Returns a zero-copy slice of this array with the indicated …","","","Returns a zero-copy slice of this array with the indicated …","","Returns a zero-copy slice of this array with the indicated …","","","Returns a zero-copy slice of this array with the indicated …","","Returns a zero-copy slice of this array with the indicated …","Returns a zero-copy slice of this array with the indicated …","","Returns a zero-copy slice of this array with the indicated …","","Returns a zero-copy slice of this array with the indicated …","","Returns a zero-copy slice of this array with the indicated …","","Returns a zero-copy slice of this array with the indicated …","","","","","","","Checked subtraction operation","Wrapping subtraction operation","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Conversion methods for dates and times.","Timezone for timestamp arrays","Returns the timezone of this array if any","Returns the underlying data of this array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of non null, true values within this …","","","","","","","","","","","","","","","","","","","","","builds a StructArray from a vector of names and arrays.","","","Fallibly creates a <code>GenericStringArray</code> from a …","Create an array from an iterable argument of byte slices.","Create an array from an iterable argument of sparse byte …","Create an array from an iterable argument of sparse byte …","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>GenericByteArray</code> from the provided parts, …","Attempt to create a new DictionaryArray with a specified …","Create a new ArrayData, validating that the provided …","Create a new <code>GenericListArray</code> from the provided parts","Create a new <code>PrimitiveArray</code> from the provided values and …","Attempts to create RunArray using given run_ends (index …","Create a new <code>FixedSizeBinaryArray</code> from the provided parts, …","Create a new <code>FixedSizeListArray</code> from the provided parts, …","Create a new <code>MapArray</code> from the provided parts","Create a new <code>StructArray</code> from the provided parts, …","Attempts to create a new <code>UnionArray</code>, validating the inputs …","Applies a unary and fallible function to all valid values …","Applies an unary and fallible function to all valid values …","","","","","","","","","","","","","","","","","","","","","","Returns the <code>type_id</code> for the array slot at <code>index</code>.","","","Returns the <code>type_ids</code> buffer for this array","","Returns the names of the types in the union.","Zero-sized types used to parameterize generic array …","Applies an unary and infallible function to a primitive …","Applies an unary and infallible function to a mutable …","Applies an unary and infallible function to a mutable …","Performs a SIMD unary operation","Applies a unary and nullable function to all valid values …","“cheap” validation of an <code>ArrayData</code>. Ensures buffers are","Validate that the data contained within this <code>ArrayData</code> is …","Validates values in this array can be properly interpreted …","Performs a full recursive validation of this <code>ArrayData</code> and …","Validates the values stored within this <code>ArrayData</code> are valid","Validates the values stored within this <code>ArrayData</code> are valid","Returns the element at index <code>i</code>","Returns the element at index <code>i</code>","","","","Returns ith value of this list array.","Returns the primitive value at index <code>i</code>.","","","Returns the boolean value at index <code>i</code>.","","","Returns the element at index <code>i</code> as a byte slice.","Returns ith value of this list array.","","","","Returns ith value of this map array.","Returns the array’s value at index <code>i</code>.","<code>Field</code> name for map value","Returns value as a chrono <code>NaiveDate</code> by using …","Returns value as a chrono <code>NaiveDateTime</code>, handling time …","Returns value as a chrono <code>NaiveDateTime</code>, handling time …","Returns a value as a chrono <code>Duration</code>","Returns <code>Self::value</code> formatted as a string","Returns a value as a chrono <code>NaiveTime</code>","","","","","","","","","Returns the raw value data","Returns a clone of the value data buffer","","","","","","","","","Returns the length for value at index <code>i</code>.","Returns the length for value at index <code>i</code>.","Returns the length for an element.","Returns the length for an element.","Returns the length for value at index <code>i</code>.","","","","Returns the offset for the element at index <code>i</code>.","Returns the offset for value at index <code>i</code>.","Returns the offset into the underlying values array for …","","Returns the offset values in the offsets buffer","Returns the offset values in the offsets buffer","Returns the offset values in the offsets buffer","","","","","","","","","","","","Returns a clone of the value type of this list.","Returns a clone of the value type of this list.","Returns a clone of the value type of this list.","Returns the data type of the map’s values.","Returns the element at index <code>i</code>","Returns the element at index <code>i</code>","","","","Returns ith value of this list array.","","Returns the primitive value at index <code>i</code>.","","Returns the boolean value at index <code>i</code>.","","Returns the element at index <code>i</code> as a byte slice.","","","","Returns ith value of this map array.","","Returns the values of this dictionary","Returns the values of this array","Returns a reference to the dictionary values array","","Returns the values of this <code>TypedDictionaryArray</code>","Returns a reference to the values of this list","Returns the values of this array","Returns a reference to values array","Returns the values of this <code>TypedRunArray</code>","Returns the underlying <code>BooleanBuffer</code> holding all the …","Returns a reference to the values of this list.","Returns a reference to the values of this map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Similar to MutableArrayData::new, but lets users define …","Overrides the <code>DataType</code> of this <code>PrimitiveArray</code>","Returns a Decimal array with the same data as self, with …","Construct a timestamp array with new timezone","Construct a timestamp array with an optional timezone","Construct a timestamp array with UTC","Create a new <code>DictionaryArray</code> replacing <code>values</code> with the new …","Returns a new dictionary with the same keys as the current …","","Write a single batch to the writer.","Writes a SIMD result back to a slice","","","A <code>DictionaryArray</code> with the key type erased","An array in the arrow columnar format","A generic trait for accessing the values of an <code>Array</code>","A reference-counted reference to a generic <code>Array</code>","Trait bridging the dynamic-typed nature of Arrow (via …","A <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets","An array of boolean values","the corresponding Arrow data type of this primitive type.","A <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>","A <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …","A <code>PrimitiveArray</code> of 128-bit fixed point decimals","A <code>PrimitiveArray</code> of 256-bit fixed point decimals","An array of dictionary encoded values","A <code>PrimitiveArray</code> of elapsed durations in microseconds","A <code>PrimitiveArray</code> of elapsed durations in milliseconds","A <code>PrimitiveArray</code> of elapsed durations in nanoseconds","A <code>PrimitiveArray</code> of elapsed durations in seconds","An array of fixed size binary arrays","An array of [fixed length lists], similar to JSON arrays …","A <code>PrimitiveArray</code> of <code>f16</code>","A <code>PrimitiveArray</code> of <code>f32</code>","A <code>PrimitiveArray</code> of <code>f64</code>","A <code>GenericBinaryArray</code> for storing <code>[u8]</code>","An array of variable length byte arrays","An array of variable length lists, similar to JSON arrays …","A <code>GenericByteArray</code> for storing <code>str</code>","True for 64 bit offset size and false for 32 bit offset …","A <code>PrimitiveArray</code> of <code>i16</code>","A <code>DictionaryArray</code> indexed by <code>i16</code>","A <code>RunArray</code> with <code>i16</code> run ends","A <code>PrimitiveArray</code> of <code>i32</code>","A <code>DictionaryArray</code> indexed by <code>i32</code>","A <code>RunArray</code> with <code>i32</code> run ends","A <code>PrimitiveArray</code> of <code>i64</code>","A <code>DictionaryArray</code> indexed by <code>i64</code>","A <code>RunArray</code> with <code>i64</code> run ends","A <code>PrimitiveArray</code> of <code>i8</code>","A <code>DictionaryArray</code> indexed by <code>i8</code>","A <code>PrimitiveArray</code> of “calendar” intervals in days and …","A <code>PrimitiveArray</code> of “calendar” intervals in  months, …","A <code>PrimitiveArray</code> of “calendar” intervals in months","The Arrow type of the element being accessed.","A <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets","A <code>GenericListArray</code> of variable size lists, storing offsets …","A <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets","A <code>GenericListArray</code> of variable size lists, storing offsets …","An array of key-value maps","Corresponding Rust native type for the primitive type.","An optional primitive value","An array of null values","A type that can be used within a variable-size array to …","Prefix for the offset size","An array of primitive values","An array of run-end encoded values","A <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets","An array of structs","A <code>PrimitiveArray</code> of milliseconds since midnight stored as …","A <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>","A <code>PrimitiveArray</code> of microseconds since midnight stored as …","A <code>PrimitiveArray</code> of nanoseconds since midnight stored as …","A <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …","A <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …","A <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …","A <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>","A <code>DictionaryArray</code> typed on its child values array","A <code>RunArray</code> typed typed on its child values array","A <code>PrimitiveArray</code> of <code>u16</code>","A <code>DictionaryArray</code> indexed by <code>u16</code>","A <code>PrimitiveArray</code> of <code>u32</code>","A <code>DictionaryArray</code> indexed by <code>u32</code>","A <code>PrimitiveArray</code> of <code>u64</code>","A <code>DictionaryArray</code> indexed by <code>u64</code>","A <code>PrimitiveArray</code> of <code>u8</code>","A <code>DictionaryArray</code> indexed by <code>u8</code>","An array of values of varying types","","Returns the array as <code>Any</code> so that it can be downcasted to a …","Returns a reference to the <code>DataType</code> of this array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a default value of this primitive type.","","","","","Returns the total number of bytes of memory occupied …","Returns the total number of bytes of memory pointed to by …","Returns the byte width of this primitive type.","Returns the underlying data of this array","Returns whether this array is empty.","Returns whether the element at <code>index</code> is null. When using …","Returns <code>false</code> if the array is guaranteed to not contain …","","","","","","","","","","Returns whether the element at <code>index</code> is not null. When …","Returns the primitive keys of this dictionary as an <code>Array</code>","","","","","","","","","","Returns the length (i.e., number of elements) of this …","","","","","Returns the logical null buffer of this array if any","Constructs an array using the input <code>data</code>. Returns a …","Corresponding Rust native type if available","Creates a new empty array","Creates a new array of <code>data_type</code> of length <code>length</code> filled …","Returns the keys of this dictionary as usize","Returns the total number of physical null values in this …","Returns the null buffer of this array if any","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the offset into the underlying data used by this …","","","","","","","","","Returns a zero-copy slice of this array with the indicated …","Returns the underlying data of this array","","Returns the element at index <code>i</code>","","","","","","","","","","","","","","","","","","","","","","Returns the element at index <code>i</code>","Returns the values of this dictionary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>DictionaryArray</code> replacing <code>values</code> with the new …","Trait for dealing with different array builders at runtime","Builder for <code>BinaryArray</code>","Builder for <code>DictionaryArray</code> of <code>BinaryArray</code>","Builder for <code>RunArray</code> of <code>BinaryArray</code>","Builder for <code>BooleanBuffer</code>","Builder for <code>BooleanArray</code>","Builder for creating a Buffer object.","Buffer builder for 32-bit date type.","A 32-bit date array builder.","Buffer builder for 64-bit date type.","A 64-bit date array builder.","Buffer builder for 128-bit decimal type.","A decimal 128 array builder","Buffer builder for 256-bit decimal type.","A decimal 256 array builder","Buffer builder for elaspsed time of microseconds unit.","An elapsed time in microseconds array builder.","Buffer builder for elaspsed time of milliseconds unit.","An elapsed time in milliseconds array builder.","Buffer builder for elaspsed time of nanoseconds unit.","An elapsed time in nanoseconds array builder.","Buffer builder for elaspsed time of second unit.","An elapsed time in seconds array builder.","Builder for <code>FixedSizeBinaryArray</code>","Builder for <code>FixedSizeListArray</code>","Buffer builder for 16-bit floating point type.","A 16-bit floating point array builder.","Buffer builder for 32-bit floating point type.","A 32-bit floating point array builder.","Buffer builder for 64-bit floating point type.","A 64-bit floating point array builder.","Array builder for <code>GenericBinaryArray</code>","Builder for <code>GenericByteArray</code>","Builder for <code>DictionaryArray</code> of <code>GenericByteArray</code>","Builder for <code>RunArray</code> of <code>GenericByteArray</code>","Builder for <code>GenericListArray</code>","Array builder for <code>GenericStringArray</code>","Buffer builder for signed 16-bit integer type.","A signed 16-bit integer array builder.","Buffer builder for signed 32-bit integer type.","A signed 32-bit integer array builder.","Buffer builder for signed 64-bit integer type.","A signed 64-bit integer array builder.","Buffer builder for signed 8-bit integer type.","A signed 8-bit integer array builder.","Buffer builder for “calendar” interval in days and …","A “calendar” interval in days and milliseconds array …","Buffer builder “calendar” interval in months, days, …","A “calendar” interval in months, days, and nanoseconds …","Buffer builder for “calendar” interval in months.","A “calendar” interval in months array builder.","Builder for <code>LargeBinaryArray</code>","Builder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>","Builder for <code>RunArray</code> of <code>LargeBinaryArray</code>","Builder for <code>LargeListArray</code>","Builder for <code>LargeStringArray</code>","Builder for <code>DictionaryArray</code> of <code>LargeStringArray</code>","Builder for <code>RunArray</code> of <code>LargeStringArray</code>","Builder for <code>ListArray</code>","Builder for <code>MapArray</code>","The <code>Field</code> names for a <code>MapArray</code>","Builder for <code>NullArray</code>","Builder for <code>PrimitiveArray</code>","Builder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>","Builder for <code>RunArray</code> of <code>PrimitiveArray</code>","Builder for <code>StringArray</code>","Builder for <code>DictionaryArray</code> of <code>StringArray</code>","Builder for <code>RunArray</code> of <code>StringArray</code>","Builder for <code>StructArray</code>","Buffer builder for 32-bit elaspsed time since midnight of …","A 32-bit elaspsed time in milliseconds array builder.","Buffer builder for 32-bit elaspsed time since midnight of …","A 32-bit elaspsed time in seconds array builder.","Buffer builder for 64-bit elaspsed time since midnight of …","A 64-bit elaspsed time in microseconds array builder.","Buffer builder for 64-bit elaspsed time since midnight of …","A 64-bit elaspsed time in nanoseconds array builder.","Buffer builder for timestamp type of microsecond unit.","A timestamp microsecond array builder.","Buffer builder for timestamp type of millisecond unit.","A timestamp millisecond array builder.","Buffer builder for timestamp type of nanosecond unit.","A timestamp nanosecond array builder.","Buffer builder for timestamp type of second unit.","A timestamp second array builder.","Buffer builder for usigned 16-bit integer type.","An usigned 16-bit integer array builder.","Buffer builder for usigned 32-bit integer type.","An usigned 32-bit integer array builder.","Buffer builder for usigned 64-bit integer type.","An usigned 64-bit integer array builder.","Buffer builder for usigned 8-bit integer type.","An usigned 8-bit integer array builder.","Builder for <code>UnionArray</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Advances the buffer by <code>additional</code> bits","Increases the number of elements in the internal buffer by …","Appends a boolean <code>v</code> into the buffer","Appends a value of type <code>T</code> into the builder, growing the …","Appends an element (either null or non-null) to the …","Finish the current fixed-length list array slot","Finish the current variable-length list array slot","Finish the current map array slot","Append a primitive value to the array. Return an existing …","Append a value to the array. Return an existing index if …","Appends a value to this builder.","Append <code>BooleanBuffer</code> to this <code>BooleanBufferBuilder</code>","Appends a null slot into the builder","Appends <code>n</code> <code>null</code>s into the builder.","Appends n <code>additional</code> bits of value <code>v</code> into the buffer","Appends a value of type <code>T</code> into the builder N times, …","Appends <code>n</code>, zero-initialized values","Append a null value into the builder.","Appends a null element to the struct.","Appends a null slot into the builder","Append a null value to the array.","Append a null to this <code>GenericListBuilder</code>","Appends a null slot into the builder","Appends a null slot into the builder","Appends a null slot into the builder","Appends null to the logical array encoded by the run-ends …","Appends a null slot into the builder","Appends null to the logical array encoded by the RunArray.","Appends a null to this builder, encoding the null in the …","Appends <code>n</code> <code>null</code>s into the builder.","Appends <code>n</code> <code>null</code>s into the builder.","Appends <code>n</code> no. of null’s into the builder","Append an <code>Option</code> value into the builder.","Appends an <code>Option&lt;T&gt;</code> into the builder","Appends an optional value into this <code>GenericListBuilder</code>","Appends an <code>Option&lt;T&gt;</code> into the builder","Append an <code>Option</code> value into the builder","Appends optional value to the logical array encoded by the …","Append an <code>Option</code> value into the builder","Appends optional value to the logical array encoded by the …","Append <code>range</code> bits from <code>to_set</code>","Appends a slice of booleans into the buffer","Appends a slice of type <code>T</code>, growing the internal buffer as …","Appends a slice of type <code>T</code> into the builder","Appends a slice of type <code>T</code> into the builder","Safety","Appends values from a trusted length iterator.","Appends a value into the builder.","Appends a value of type <code>T</code> into the builder","Appends a byte slice into the builder.","Append a value to this <code>GenericListBuilder</code>","Appends a value of type <code>T</code> into the builder","Infallibly append a value to this builder","Appends value to the logical array encoded by the run-ends …","Infallibly append a value to this builder","Appends value to the logical array encoded by the RunArray.","Appends values from a slice of type <code>T</code> and a validity …","Appends values from a slice of type <code>T</code> and a validity …","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a non-mutable <code>Any</code> reference.","","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as an non-mutable <code>Any</code> reference.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as an non-mutable <code>Any</code> reference.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","Returns the builder as a mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","Returns the builder as an mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","Returns the builder as an mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","Returns the packed bits","View the contents of this buffer as a slice","Returns the packed bits","View the contents of this buffer as a mutable slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds this builder creating a new <code>UnionArray</code>.","Returns the capacity of the buffer","Returns the actual capacity (number of elements) of the …","Returns the capacity of this builder measured in slots of …","Returns the capacity of this builder measured in slots of …","Returns the capacity of this builder measured in slots of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Field</code> name for map entries","","","","","","","","","","Returns a mutable reference to the child field builder at …","","","","","Builds the array","Creates a <code>BooleanBuffer</code>","Resets this builder and returns an immutable Buffer.","Builds the array and reset this builder.","Builds the <code>GenericByteArray</code> and reset this builder.","Builds the <code>StructArray</code> and reset this builder.","Builds the array.","Builds the BooleanArray and reset this builder.","Builds the array and reset this builder.","Builds the array and reset this builder.","Builds the <code>FixedSizeBinaryArray</code> and reset this builder.","Builds the array and reset this builder.","Builds the <code>FixedSizeListBuilder</code> and reset this builder.","Builds the array and reset this builder.","Builds the <code>GenericListArray</code> and reset this builder.","","Builds the <code>MapArray</code>","Builds the array and reset this builder.","Builds the NullArray and reset this builder.","Builds the array and reset this builder.","Builds the <code>PrimitiveArray</code> and reset this builder.","Builds the <code>DictionaryArray</code> and reset this builder.","Builds the array and reset this builder.","Builds the array and reset this builder.","Creates the RunArray and resets the builder. Panics if …","Builds the <code>DictionaryArray</code> and reset this builder.","Builds the array and reset this builder.","Builds the array and reset this builder.","Creates the RunArray and resets the builder. Panics if …","Builds the array without resetting the underlying builder.","Builds the BooleanBuffer without resetting the builder.","Builds the <code>GenericByteArray</code> without resetting the builder.","Builds the array without resetting the builder.","Builds the array without resetting the builder.","Builds the <code>StructArray</code> without resetting the builder.","Builds the BooleanArray without resetting the builder.","Builds the array without resetting the builder.","Builds the array without resetting the builder.","Builds the <code>FixedSizeBinaryArray</code> without resetting the …","Builds the array without resetting the builder.","Builds the <code>FixedSizeListBuilder</code> without resetting the …","Builds the <code>GenericListArray</code> without resetting the builder.","Builds the array without resetting the builder.","Builds the <code>MapArray</code> without resetting the builder.","Builds the array without resetting the builder.","Builds the NullArray without resetting the builder.","Builds the array without resetting the builder.","Builds the array without resetting the builder.","Builds the <code>PrimitiveArray</code> without resetting the builder.","Builds the <code>DictionaryArray</code> without resetting the builder.","Builds the array without resetting the builder.","Creates the RunArray and without resetting the builder. …","Builds the array without resetting the builder.","Builds the array without resetting the builder.","Builds the <code>DictionaryArray</code> without resetting the builder.","Creates the RunArray and without resetting the builder. …","Builds the array without resetting the builder.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Creates a new <code>StructBuilder</code> from <code>Fields</code> and <code>capacity</code>","","Gets a bit in the buffer at <code>index</code>","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns true if empty","Returns whether the internal buffer is empty.","Returns whether number of array slots is zero","<code>Field</code> name for map key","","Returns the key array builder of the map","","","","","","","Returns the number of array slots in the builder","Returns the length of the buffer","Returns the current number of array elements in the …","Returns the number of binary slots in the builder","Returns the number of array slots in the builder.","Returns the number of array slots in the builder","Returns the number of array slots in the builder","Returns the number of array slots in the builder","Returns the number of array slots in the builder","","Returns the number of array slots in the builder","Returns the number of array slots in the builder","Returns the number of array slots in the builder","Returns the length of logical array encoded by the …","Returns the number of array slots in the builder","Returns the length of logical array encoded by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a builder with capacity <code>capacity</code> that corresponds …","","Creates a new <code>BooleanBufferBuilder</code>","Creates a new builder with initial capacity for <em>at least</em> …","Creates a new <code>GenericByteBuilder</code>.","Creates a new <code>StructBuilder</code>","Creates a new boolean builder","Creates a new <code>FixedSizeBinaryBuilder</code>","Creates a new <code>FixedSizeListBuilder</code> from a given values …","Creates a new <code>GenericListBuilder</code> from a given values array …","Creates a new <code>MapBuilder</code>","Creates a new null builder","Creates a new primitive array builder","Creates a new <code>PrimitiveDictionaryBuilder</code>.","Creates a new <code>PrimitiveRunBuilder</code>","Creates a new <code>GenericByteDictionaryBuilder</code>","Creates a new <code>GenericByteRunBuilder</code>","Creates a new dense array builder.","Creates a new <code>BooleanBufferBuilder</code> from <code>MutableBuffer</code> of …","Creates a new builder from a <code>MutableBuffer</code>","Creates a new  <code>GenericByteBuilder</code> from buffers.","Creates a new primitive array builder from buffers","Creates a new <code>PrimitiveDictionaryBuilder</code> from existing …","Creates a new <code>PrimitiveDictionaryBuilder</code> from the provided …","Creates a new sparse array builder.","Creates a new <code>GenericByteDictionaryBuilder</code> from a keys …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of fields for the struct this builder …","","","","","","","","","","","","Returns the current offsets buffer as a slice","Returns the current offsets buffer as a slice","","","","","","","Reserve space to at least <code>additional</code> new bits. Capacity …","Reserves memory for <em>at least</em> <code>n</code> more elements of type <code>T</code>.","Resizes the buffer, either truncating its contents (with …","","","","","","","Sets a bit in the buffer at <code>index</code>","Returns the current values buffer and null buffer as a …","","","","","","","Truncates the builder to the given length","Shorten this BufferBuilder to <code>len</code> items","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the current null buffer as a slice","Returns the current null buffer as a slice","Returns the current null buffer as a slice","Returns the current null buffer as a mutable slice","Returns the current null buffer as a mutable slice","<code>Field</code> name for map value","","","","","","","","","Returns the length of the list","","","Returns the child array builder as a mutable reference.","Returns the child array builder as a mutable reference.","Returns the value array builder of the map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the child array builder as an immutable reference","Returns the current values buffer as a slice","Returns the current values buffer as a slice","Returns the current dictionary values buffer as a slice","Returns the current values buffer as a mutable slice","Returns the current dictionary values buffer as a mutable …","","","","","","","","","","","","","","","","","","Creates a new <code>GenericByteBuilder</code>.","Creates a new boolean builder with space for <code>capacity</code> …","Creates a new <code>FixedSizeBinaryBuilder</code>, <code>capacity</code> is the …","Creates a new <code>FixedSizeListBuilder</code> from a given values …","Creates a new <code>GenericListBuilder</code> from a given values array …","Creates a new <code>MapBuilder</code> with capacity","Creates a new null builder with space for <code>capacity</code> …","Creates a new primitive array builder with capacity no of …","Creates a new <code>PrimitiveDictionaryBuilder</code> with the provided …","Creates a new <code>PrimitiveRunBuilder</code> with the provided …","Creates a new <code>GenericByteDictionaryBuilder</code> with the …","Creates a new <code>GenericByteRunBuilder</code> with the provided …","Creates a new dense array builder with capacity.","Creates a new sparse array builder  with capacity.","By default <code>PrimitiveBuilder</code> uses …","Sets the precision and scale","Sets the timezone","Sets an optional timezone","","An extension trait for <code>dyn Array</code> that provides ergonomic …","Downcasts this to a <code>AnyDictionaryArray</code> panicking if not …","Downcasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …","Downcast this to a <code>GenericBinaryArray</code> panicking if not …","Downcast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …","Downcast this to a <code>BooleanArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>BooleanArray</code> returning <code>None</code> if not …","Downcast this to a <code>GenericByteArray</code> panicking if not …","Downcast this to a <code>GenericByteArray</code> returning <code>None</code> if not …","Force downcast of an Array, such as an ArrayRef to …","Downcast this to a <code>DictionaryArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>DictionaryArray</code> returning <code>None</code> if not …","Downcast this to a <code>FixedSizeBinaryArray</code> panicking if not …","Downcast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …","Downcast this to a <code>FixedSizeListArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>GenericListArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>GenericListArray</code> returning <code>None</code> if not …","Downcast this to a <code>MapArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>MapArray</code> returning <code>None</code> if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>PrimitiveArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …","Downcast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>GenericStringArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>GenericStringArray</code> returning <code>None</code> if …","Downcast this to a <code>StructArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>StructArray</code> returning <code>None</code> if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcasts a <code>dyn Array</code> to a concrete type","Exports an array to raw pointers of the C Data Interface …","An iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","create a new iterator","","","","","","","","The <code>RunArrayIter</code> provides an idiomatic way to iterate over …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","create a new iterator","","","","","","","","Number of days between 0001-01-01 and 1970-01-01","Number of microseconds in a second","Number of microseconds in a day","Number of milliseconds in a second","Number of milliseconds in a day","Number of nanoseconds in a second","Number of nanoseconds in a day","Number of seconds in a day","Converts an <code>ArrowPrimitiveType</code> to <code>NaiveDate</code>","Converts an <code>ArrowPrimitiveType</code> to <code>NaiveDateTime</code>","Converts an <code>ArrowPrimitiveType</code> to <code>DateTime&lt;Tz&gt;</code>","Converts an <code>ArrowPrimitiveType</code> to <code>Duration</code>","Converts an <code>ArrowPrimitiveType</code> to <code>NaiveTime</code>","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>","converts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>","converts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>","converts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>","converts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>","converts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>","converts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>","converts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>","converts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>","converts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>","converts a <code>i64</code> representing a <code>timestamp(ms)</code> to …","converts a <code>i64</code> representing a <code>timestamp(ns)</code> to …","converts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>timestamp(us)</code> to …","An Arrow <code>TimeZone</code>","An <code>Offset</code> for <code>Tz</code>","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","A subtype of primitive type that represents legal …","Trait bridging the dynamic-typed nature of Arrow (via …","A subtype of primitive type that represents temporal …","A timestamp type allows us to create array builders that …","Width of the type","An arrow binary array with i32 offsets","A boolean datatype","A trait over the variable-size byte array types","the corresponding Arrow data type of this primitive type.","Datatype of array elements","Default values for <code>DataType</code>","A 32-bit date type representing the elapsed time since …","A 64-bit date type representing the elapsed time since …","The decimal type for a Decimal128Array","The decimal type for a Decimal256Array","A trait over the decimal types, used by <code>PrimitiveArray</code> to …","An elapsed time type in microseconds.","An elapsed time type in milliseconds.","An elapsed time type in nanoseconds.","An elapsed time type in seconds.","A 16-bit floating point number type.","A 32-bit floating point number type.","A 64-bit floating point number type.","<code>ByteArrayType</code> for binary arrays","<code>ByteArrayType</code> for string arrays","A signed 16-bit integer type.","A signed 32-bit integer type.","A signed 64-bit integer type.","A signed 8-bit integer type.","A “calendar” interval type in days and milliseconds.","A “calendar” interval type in months, days, and …","A “calendar” interval type in months.","An arrow binary array with i64 offsets","An arrow utf8 array with i64 offsets","Maximum number of significant digits","Maximum no of digits after the decimal point (note the …","Corresponding Rust native type for the primitive type.","Type for representing its equivalent rust type i.e …","Type of offset i.e i32/i64","“Decimal128” or “Decimal256”, for use in error …","“Binary” or “String”, for use in error messages","A subtype of primitive type that is used as run-ends index …","fn to create its <code>DataType</code>","A 32-bit time type representing the elapsed time since …","A 32-bit time type representing the elapsed time since …","A 64-bit time type representing the elapsed time since …","A 64-bit time type representing the elapsed time since …","A timestamp microsecond type with an optional timezone.","A timestamp millisecond type with an optional timezone.","A timestamp nanosecond type with an optional timezone.","A timestamp second type with an optional timezone.","An unsigned 16-bit integer type.","An unsigned 32-bit integer type.","An unsigned 64-bit integer type.","An unsigned 8-bit integer type.","The <code>TimeUnit</code> of this timestamp.","An arrow utf8 array with i32 offsets","Returns a default value of this primitive type.","Formats the decimal value with the provided precision and …","Returns the byte width of this primitive type.","Returns the <code>TimeUnit</code> of this timestamp.","Creates a ArrowTimestampType::Native from the provided …","","","","","","","Verifies that every consecutive pair of <code>offsets</code> denotes a …","Validates that <code>value</code> contains no more than <code>precision</code> …","Validate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>","A slice-able <code>Buffer</code> containing bit-packed booleans","Buffer represents a contiguous memory region that can be …","A <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …","A <code>BooleanBuffer</code> used to encode validity for arrow arrays","A non-empty buffer of monotonically increasing, positive …","A slice-able buffer of monotonically increasing, positive …","A strongly-typed <code>Buffer</code> supporting zero-copy cloning and …","Returns a mutable raw pointer to this buffer’s internal …","Returns a pointer to the start of this buffer.","Returns a raw pointer to this buffer’s internal memory …","","","Returns the byte slice stored in this buffer","Returns the data stored in this buffer as a slice.","Returns the data stored in this buffer as a mutable slice.","Returns a <code>BitChunks</code> instance which can be used to iterate …","Returns a <code>BitChunks</code> instance which can be used to iterate …","Returns a slice of this buffer starting at a certain bit …","","","Apply a bitwise operation <code>op</code> to two inputs and return the …","Apply a bitwise operation <code>op</code> to four inputs and return the …","Apply a bitwise operation <code>op</code> to one input and return the …","","","","","","","","","","","","","","","","Returns the underlying <code>Buffer</code>","","","","Apply a bitwise and to two inputs and return the result as …","Apply a bitwise or to two inputs and return the result as …","Apply a bitwise xor to two inputs and return the result as …","Apply a bitwise not to one input and return the result as …","Returns the capacity of this buffer. For externally owned …","Returns the total capacity in this buffer. The invariant …","","","","","","","","Clear all existing data from this buffer.","","","","","","","","","","","","","Invokes <code>f</code> with values <code>0..len</code> collecting the boolean …","Invokes <code>f</code> with indexes <code>0..len</code> collecting the boolean …","Returns true if all nulls in <code>other</code> also exist in self","Returns the number of 1-bits in this buffer.","Returns the number of set bits in this buffer","Returns the number of 1-bits in this buffer, starting from …","","","","","","","","","","","","","","","","","","","","","","","","Returns a new <code>NullBuffer</code> where each bit in the current …","","Extends this buffer from a slice of items that can be …","Extends the buffer by <code>additional</code> bytes equal to <code>0u8</code>, …","","","","","","","","Freezes this buffer and return an immutable version of it.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Auxiliary method to create a new Buffer","","","","","","","","Creates a buffer from an existing memory region. Ownership …","","","","","","","","Allocates a new MutableBuffer with <code>len</code> and capacity to be …","Create a new <code>OffsetBuffer</code> from the iterator of slice …","Creates a buffer from an existing aligned memory region …","Initializes a Buffer from a slice of items.","Creates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …","Creates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …","Creates a <code>MutableBuffer</code> from a boolean <code>Iterator</code> with a …","Create a <code>Buffer</code> from the provided <code>Vec</code> without copying","Create a <code>MutableBuffer</code> from the provided <code>Vec</code> without …","Returns the physical index at which the logical array ends","Performs a binary search to find the physical index for …","Returns the physical index at which the logical array …","Returns the inner <code>ScalarBuffer</code>","Returns the inner <code>Buffer</code>","Returns the inner <code>Buffer</code>","Returns the inner <code>BooleanBuffer</code>","Returns the inner <code>ScalarBuffer</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner <code>ScalarBuffer</code>, consuming self","Returns the inner <code>Buffer</code>, consuming self","Returns the inner <code>Buffer</code>, consuming self","Returns the inner <code>BooleanBuffer</code>","Returns the inner <code>ScalarBuffer</code>, consuming self","","","","Returns <code>MutableBuffer</code> for mutating the buffer if this …","Returns <code>Vec</code> for mutating the buffer","Returns whether the buffer is empty.","Returns whether this buffer is empty or not.","Returns true if this <code>BooleanBuffer</code> is empty","Returns true if this <code>NullBuffer</code> is empty","Returns true if this buffer is empty","Returns <code>true</code> if the value at <code>idx</code> is null","Returns <code>true</code> if the bit at index <code>i</code> is set","Returns <code>true</code> if the value at <code>idx</code> is not null","Returns an iterator over the bits in this <code>BooleanBuffer</code>","Returns an iterator over the bits in this <code>NullBuffer</code>","","Returns the number of bytes in the buffer","Returns the length (the number of bytes written) in this …","Returns the length of this <code>BooleanBuffer</code> in bits","Returns the length of this <code>NullBuffer</code>","Returns the logical length of the run-ends stored by this …","","","","","Returns the maximum run-end encoded in the underlying …","Create a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>","Allocate a new MutableBuffer with initial capacity to be …","Create a new <code>ScalarBuffer</code> from a <code>Buffer</code>, and an <code>offset</code> and …","Create a new <code>BooleanBuffer</code> from a <code>Buffer</code>, an <code>offset</code> and …","Create a new <code>NullBuffer</code> computing the null count","Create a new <code>RunEndBuffer</code> from a <code>ScalarBuffer</code>, an <code>offset</code> …","Create a new <code>OffsetBuffer</code> containing a single 0 value","creates a new MutableBuffer with capacity and length …","Create a new <code>NullBuffer</code> of length <code>len</code> where all values are …","Create a new <code>BooleanBuffer</code> of <code>length</code> where all values are …","Create a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>","Create a new <code>NullBuffer</code> with the provided <code>buffer</code> and …","Create a new <code>RunEndBuffer</code> from an <code>ScalarBuffer</code>, an <code>offset</code> …","Create a new <code>BooleanBuffer</code> of <code>length</code> where all values are …","Create a new <code>NullBuffer</code> of length <code>len</code> where all values are …","Create a new <code>OffsetBuffer</code> containing <code>len + 1</code> <code>0</code> values","","Returns the null count for this <code>NullBuffer</code>","","Returns the offset of this <code>BooleanBuffer</code> in bits","Returns the offset of this <code>NullBuffer</code> in bits","Returns the logical offset into the run-ends stored by …","","","","","Returns true if this <code>OffsetBuffer</code> is equal to <code>other</code>, using …","Returns true if this <code>Buffer</code> is equal to <code>other</code>, using …","Returns true if this <code>ScalarBuffer</code> is equal to <code>other</code>, using …","Returns true if this <code>BooleanBuffer</code> is equal to <code>other</code>, …","Extends the buffer with a new item, increasing its …","Extends the buffer with a new item, without checking for …","Ensures that this buffer has at least <code>self.len + additional</code>…","Resizes the buffer, either truncating its contents (with …","","Returns an iterator over the set bit positions in this …","Safety","Ensure that <code>count</code> bytes from <code>start</code> contain zero bits","Returns a <code>BitSliceIterator</code> yielding contiguous ranges of …","Shrinks the capacity of the buffer as much as possible. …","Returns a zero-copy slice of this buffer with length <code>len</code> …","Returns a new Buffer that is a slice of this buffer …","Returns a zero-copy slice of this buffer with length <code>len</code> …","Slices this <code>BooleanBuffer</code> by the provided <code>offset</code> and <code>length</code>","Slices this <code>NullBuffer</code> by the provided <code>offset</code> and <code>length</code>","Slices this <code>RunEndBuffer</code> by the provided <code>offset</code> and <code>length</code>","Returns a new Buffer that is a slice of this buffer …","Returns a <code>Buffer</code> containing the sliced contents of this …","","","","","","","Truncates this buffer to <code>len</code> bytes","Calls the provided closure for each index in this null …","","","","","","","","Creates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …","Creates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …","","","","","","","","","","","","","","","View buffer as a slice of a specific type.","View buffer as a immutable slice of a specific type.","View this buffer as a mutable slice of a specific type.","Computes the union of the nulls in two optional <code>NullBuffer</code>","Returns a <code>BitIndexIterator</code> over the valid indices in this …","Returns a <code>BitSliceIterator</code> yielding contiguous ranges of …","Returns the packed validity of this <code>NullBuffer</code> not …","Returns the boolean value at index <code>i</code>.","Returns the boolean value at index <code>i</code>.","Returns the packed values of this <code>BooleanBuffer</code> not …","Returns the values of this <code>RunEndBuffer</code> not including any …","","","","","","","","Set the bits in the range of <code>[0, end)</code> to 0 (if <code>val</code> is …","Allocate a new MutableBuffer with initial capacity to be …","CastOptions provides a way to override the default cast …","Function that can filter arbitrary arrays","A builder to construct <code>FilterPredicate</code>","A filtering predicate that can be applied to an <code>Array</code>","A lexicographical comparator that wraps given array data …","A computed set of partitions, see <code>partition</code>","An iterator of <code>(usize, usize)</code> each representing an interval","One column to be used in lexicographical sort","Options that define the sort order of a given column","Options that define how <code>take</code> should behave","Performs <code>AND</code> operation on two arrays. If either left or …","Logical ‘and’ boolean values with Kleene logic","Given two arrays of length <code>len</code>, calls <code>op(a[i], b[i])</code> for <code>i</code> …","Given two arrays of length <code>len</code>, calls <code>op(a[i], b[i])</code> for <code>i</code> …","Returns the bitwise and of all non-null input values.","Returns the bitwise or of all non-null input values.","Returns the bitwise xor of all non-null input values.","Returns true if all non-null input values are true, …","Returns true if any non-null input value is true, …","","","","","","","","","","","","","","","","","","","Construct the final <code>FilterPredicate</code>","Returns a prepared function optimized to filter multiple …","Return true if a value of type <code>from_type</code> can be cast into a","Cast <code>array</code> to the provided data type and return a new …","","","","","","","","","","Cast <code>array</code> to the provided data type and return a new …","Perform bounds check before taking indices from values. If …","","","","","","","","","","","","lexicographically compare values at the wrapped columns …","","","Concatenate multiple Array of the same type into a single …","Concatenates <code>batches</code> together into a single <code>RecordBatch</code>.","Number of rows being selected based on this <code>FilterPredicate</code>","","","Extracts the day of a given temporal primitive array as an …","Extracts the day of a given temporal array as an array of …","","","","Whether to sort in descending order","Extracts the day of year of a given temporal primitive …","Extracts the day of year of a given temporal array as an …","","","","","","","","","Filters an Array, returning elements matching the filter …","Selects rows from <code>values</code> based on this <code>FilterPredicate</code>","","","Returns a new RecordBatch with arrays containing only …","","","","","","","","","Formatting options when casting from temporal types to …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Extracts the hours of a given temporal primitive array as …","Extracts the hours of a given array as an array of …","Takes elements by index from a list of <code>Array</code>, creating a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if this contains no partitions","Returns a non-null BooleanArray with whether each value of …","Returns a non-null BooleanArray with whether each value of …","Computation kernels on Arrow Arrays","Returns the number of partitions","Given a list of already sorted columns, find partition …","Sort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …","Sort elements lexicographically from a list of <code>ArrayRef</code> …","Returns the maximum value in the array, according to the …","Returns the max of values in the array of <code>ArrowNumericType</code> …","Returns the maximum value in the binary array, according …","Returns the maximum value in the boolean array","Returns the maximum value in the string array, according …","Extracts the microseconds of a given temporal primitive …","Extracts the microseconds of a given temporal primitive …","Extracts the milliseconds of a given temporal primitive …","Extracts the milliseconds of a given temporal primitive …","Returns the minimum value in the array, according to the …","Returns the min of values in the array of <code>ArrowNumericType</code> …","Returns the minimum value in the binary array, according …","Returns the minimum value in the boolean array.","Returns the minimum value in the string array, according …","Extracts the minutes of a given temporal primitive array …","Extracts the minutes of a given temporal array as an array …","Extracts the month of a given temporal primitive array as …","Extracts the month of a given temporal array as an array …","Perform <code>left * right</code> operation on two decimal arrays. If …","Perform <code>left * right</code> operation on two decimal arrays. If …","Perform <code>left * right</code> operation on two decimal arrays. If …","Extracts the nanoseconds of a given temporal primitive …","Extracts the nanoseconds of a given temporal primitive …","","Create a new <code>FilterBuilder</code> that can be used to construct a …","","Performs unary <code>NOT</code> operation on an arrays. If value is …","","Copies original array, setting validity bit to false if a …","Whether to sort nulls first","Extracts the day of week of a given temporal primitive …","Extracts the day of week of a given temporal array as an …","Extracts the day of week of a given temporal primitive …","Extracts the day of week of a given temporal array as an …","Compute an optimised representation of the provided <code>filter</code> …","","Performs <code>OR</code> operation on two arrays. If either left or …","Logical ‘or’ boolean values with Kleene logic","","It’s unstable_sort, may not preserve the order of equal …","Given a list of lexicographically sorted columns, computes …","Remove null values by do a bitmask AND operation with null …","Extracts the quarter of a given temporal primitive array …","Extracts the quarter of a given temporal array as an array …","Returns the range of each partition","Assigns a rank to each value in <code>array</code> based on its …","Perform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …","Perform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …","Extract all groups matched by a regular expression for a …","how to handle cast failures, either return NULL …","Extracts the seconds of a given temporal primitive array …","Extracts the seconds of a given temporal array as an array …","Shifts array by defined number of items (to left or right) …","Sort the <code>ArrayRef</code> using <code>SortOptions</code>.","Sort the <code>ArrayRef</code> partially.","Sort elements from <code>ArrayRef</code> into an unsigned integer (…","","","Returns the sum of values in the primitive array.","Returns the sum of values in the array.","Returns the sum of values in the array.","Returns the sum of values in the primitive array.","Take elements by index from Array, creating a new Array …","","","","","","Applies the provided fallible binary operation across <code>a</code> …","Applies the provided fallible binary operation across <code>a</code> …","","","","","","","","","","","","","","","","","","","Create a new lex comparator that will wrap the given sort …","See <code>PrimitiveArray::try_unary</code>","Applies a fallible unary function to an array with …","See <code>PrimitiveArray::try_unary_mut</code>","","","","","","","","","","See <code>PrimitiveArray::unary</code>","Applies an infallible unary function to an array with …","See <code>PrimitiveArray::unary_mut</code>","Parse the given string into a string representing …","","","","","","","","","","","Extracts the week of a given temporal primitive array as …","Extracts the week of a given temporal array as an array of …","Extracts the years of a given temporal primitive array as …","Extracts the years of a given temporal array as an array …","Defines aggregations over Arrow arrays.","Defines kernels suitable to perform operations to …","","Defines boolean kernels on Arrow <code>BooleanArray</code>’s, e.g. <code>AND</code>…","Defines cast kernels for <code>ArrayRef</code>, to convert <code>Array</code>s …","Cast <code>array</code> to the provided data type and return a new …","","Comparison kernels for <code>Array</code>s.","Comparison kernels for <code>Array</code>s.","Defines concat kernel for <code>ArrayRef</code>","","Defines filter kernels","","Defines kernel for length of string arrays and binary …","","Defines numeric arithmetic kernels on <code>PrimitiveArray</code>, such …","Defines partition kernel for <code>ArrayRef</code>","","Defines kernel to extract substrings based on a regular …","Defines sort kernel for <code>ArrayRef</code>","Defines kernel to extract a substring of an Array …","Defines take kernel for Array","Defines temporal kernels for time and date related …","Defines windowing functions, like <code>shift</code>ing","","Returns the bitwise and of all non-null input values.","Returns the bitwise or of all non-null input values.","Returns the bitwise xor of all non-null input values.","Returns true if all non-null input values are true, …","Returns true if any non-null input value is true, …","Returns the maximum value in the array, according to the …","Returns the max of values in the array of <code>ArrowNumericType</code> …","Returns the maximum value in the binary array, according …","Returns the maximum value in the boolean array","Returns the maximum value in the string array, according …","Returns the minimum value in the array, according to the …","Returns the min of values in the array of <code>ArrowNumericType</code> …","Returns the minimum value in the binary array, according …","Returns the minimum value in the boolean array.","Returns the minimum value in the string array, according …","Returns the sum of values in the primitive array.","Returns the sum of values in the array.","Returns the sum of values in the array.","Returns the sum of values in the primitive array.","Given two arrays of length <code>len</code>, calls <code>op(a[i], b[i])</code> for <code>i</code> …","Given two arrays of length <code>len</code>, calls <code>op(a[i], b[i])</code> for <code>i</code> …","Applies the provided fallible binary operation across <code>a</code> …","Applies the provided fallible binary operation across <code>a</code> …","See <code>PrimitiveArray::try_unary</code>","Applies a fallible unary function to an array with …","See <code>PrimitiveArray::try_unary_mut</code>","See <code>PrimitiveArray::unary</code>","Applies an infallible unary function to an array with …","See <code>PrimitiveArray::unary_mut</code>","Perform <code>left &amp; right</code> operation on two arrays. If either …","Perform bitwise <code>and</code> every value in an array with the …","Perform <code>!array</code> operation on array. If array value is null …","Perform <code>left | right</code> operation on two arrays. If either …","Perform bitwise <code>or</code> every value in an array with the …","Perform bitwise <code>left &lt;&lt; right</code> operation on two arrays. If …","Perform bitwise <code>left &lt;&lt; right</code> every value in an array with …","Perform bitwise <code>left &gt;&gt; right</code> operation on two arrays. If …","Perform bitwise <code>left &gt;&gt; right</code> every value in an array with …","Perform <code>left ^ right</code> operation on two arrays. If either …","Perform bitwise <code>xor</code> every value in an array with the …","Performs <code>AND</code> operation on two arrays. If either left or …","Logical ‘and’ boolean values with Kleene logic","Returns a non-null BooleanArray with whether each value of …","Returns a non-null BooleanArray with whether each value of …","Performs unary <code>NOT</code> operation on an arrays. If value is …","Performs <code>OR</code> operation on two arrays. If either left or …","Logical ‘or’ boolean values with Kleene logic","CastOptions provides a way to override the default cast …","Return true if a value of type <code>from_type</code> can be cast into a","Cast <code>array</code> to the provided data type and return a new …","Cast <code>array</code> to the provided data type and return a new …","Formatting options when casting from temporal types to …","how to handle cast failures, either return NULL …","","Specialized parsing implementations used by csv and json …","","Parse the string format decimal value to i128/i256 format …","","","","","Accepts a string and parses it relative to the provided …","Accepts a string in ISO8601 standard format and some …","Accepts a string in RFC3339 / ISO8601 standard format and …","Perform <code>left IS DISTINCT FROM right</code> operation on two <code>Datum</code>","Perform <code>left == right</code> operation on two <code>Datum</code>","Perform <code>left &gt; right</code> operation on two <code>Datum</code>","Perform <code>left &gt;= right</code> operation on two <code>Datum</code>","Perform <code>left &lt; right</code> operation on two <code>Datum</code>","Perform <code>left &lt;= right</code> operation on two <code>Datum</code>","Perform <code>left != right</code> operation on two <code>Datum</code>","Perform <code>left IS NOT DISTINCT FROM right</code> operation on two …","Perform SQL <code>CONTAINS(left, right)</code>","Perform SQL <code>ENDSWITH(left, right)</code>","Perform <code>left == right</code> operation on two <code>PrimitiveArray</code>s.","Perform <code>left == right</code> operation on <code>BinaryArray</code> / …","Perform <code>left == right</code> operation on <code>BinaryArray</code> / …","Perform <code>left == right</code> operation on <code>BooleanArray</code>","Perform <code>left == right</code> operation on <code>BooleanArray</code> and a …","Perform <code>left == right</code> operation on two (dynamic) <code>Array</code>s.","Perform <code>left == right</code> operation on an array and a numeric …","Perform <code>left == right</code> operation on an array and a numeric …","Perform <code>left == right</code> operation on an array and a numeric …","Perform <code>left == right</code> operation on an array and a numeric …","Perform <code>left == right</code> operation on a <code>PrimitiveArray</code> and a …","Perform <code>left == right</code> operation on <code>StringArray</code> / …","Perform <code>left == right</code> operation on <code>StringArray</code> / …","Perform <code>left &gt; right</code> operation on two <code>PrimitiveArray</code>s. …","Perform <code>left &gt; right</code> operation on <code>BinaryArray</code> / …","Perform <code>left &gt; right</code> operation on <code>BinaryArray</code> / …","Perform <code>left &gt; right</code> operation on <code>BooleanArray</code>","Perform <code>left &gt; right</code> operation on <code>BooleanArray</code> and a scalar","Perform <code>left &gt; right</code> operation on two (dynamic) <code>Array</code>s.","Perform <code>left &gt; right</code> operation on an array and a numeric …","Perform <code>left &gt; right</code> operation on an array and a numeric …","Perform <code>left &gt; right</code> operation on an array and a numeric …","Perform <code>left &gt; right</code> operation on an array and a numeric …","Perform <code>left &gt;= right</code> operation on two <code>PrimitiveArray</code>s. …","Perform <code>left &gt;= right</code> operation on <code>BinaryArray</code> / …","Perform <code>left &gt;= right</code> operation on <code>BinaryArray</code> / …","Perform <code>left &gt;= right</code> operation on <code>BooleanArray</code>","Perform <code>left &gt;= right</code> operation on <code>BooleanArray</code> and a …","Perform <code>left &gt;= right</code> operation on two (dynamic) <code>Array</code>s.","Perform <code>left &gt;= right</code> operation on an array and a numeric …","Perform <code>left &gt;= right</code> operation on an array and a numeric …","Perform <code>left &gt;= right</code> operation on an array and a numeric …","Perform <code>left &gt;= right</code> operation on an array and a numeric …","Perform <code>left &gt;= right</code> operation on a <code>PrimitiveArray</code> and a …","Perform <code>left &gt;= right</code> operation on <code>StringArray</code> / …","Perform <code>left &gt;= right</code> operation on <code>StringArray</code> / …","Perform <code>left &gt; right</code> operation on a <code>PrimitiveArray</code> and a …","Perform <code>left &gt; right</code> operation on <code>StringArray</code> / …","Perform <code>left &gt; right</code> operation on <code>StringArray</code> / …","Perform SQL <code>left ILIKE right</code>","Checks if a <code>GenericListArray</code> contains a value in the …","Checks if a <code>GenericListArray</code> contains a value in the …","Perform SQL <code>left LIKE right</code>","Perform <code>left &lt; right</code> operation on two <code>PrimitiveArray</code>s. …","Perform <code>left &lt; right</code> operation on <code>BinaryArray</code> / …","Perform <code>left &lt; right</code> operation on <code>BinaryArray</code> / …","Perform <code>left &lt; right</code> operation on <code>BooleanArray</code>","Perform <code>left &lt; right</code> operation on <code>BooleanArray</code> and a scalar","Perform <code>left &lt; right</code> operation on two (dynamic) <code>Array</code>s.","Perform <code>left &lt; right</code> operation on an array and a numeric …","Perform <code>left &lt; right</code> operation on an array and a numeric …","Perform <code>left &lt; right</code> operation on an array and a numeric …","Perform <code>left &lt; right</code> operation on an array and a numeric …","Perform <code>left &lt;= right</code> operation on two <code>PrimitiveArray</code>s. …","Perform <code>left &lt;= right</code> operation on <code>BinaryArray</code> / …","Perform <code>left &lt;= right</code> operation on <code>BinaryArray</code> / …","Perform <code>left &lt;= right</code> operation on <code>BooleanArray</code>","Perform <code>left &lt;= right</code> operation on <code>BooleanArray</code> and a …","Perform <code>left &lt;= right</code> operation on two (dynamic) <code>Array</code>s.","Perform <code>left &lt;= right</code> operation on an array and a numeric …","Perform <code>left &lt;= right</code> operation on an array and a numeric …","Perform <code>left &lt;= right</code> operation on an array and a numeric …","Perform <code>left &lt;= right</code> operation on an array and a numeric …","Perform <code>left &lt;= right</code> operation on a <code>PrimitiveArray</code> and a …","Perform <code>left &lt;= right</code> operation on <code>StringArray</code> / …","Perform <code>left &lt;= right</code> operation on <code>StringArray</code> / …","Perform <code>left &lt; right</code> operation on a <code>PrimitiveArray</code> and a …","Perform <code>left &lt; right</code> operation on <code>StringArray</code> / …","Perform <code>left &lt; right</code> operation on <code>StringArray</code> / …","Perform <code>left != right</code> operation on two <code>PrimitiveArray</code>s.","Perform <code>left != right</code> operation on <code>BinaryArray</code> / …","Perform <code>left != right</code> operation on <code>BinaryArray</code> / …","Perform <code>left != right</code> operation on <code>BooleanArray</code>","Perform <code>left != right</code> operation on <code>BooleanArray</code> and a …","Perform <code>left != right</code> operation on two (dynamic) <code>Array</code>s.","Perform <code>left != right</code> operation on an array and a numeric …","Perform <code>left != right</code> operation on an array and a numeric …","Perform <code>left != right</code> operation on an array and a numeric …","Perform <code>left != right</code> operation on an array and a numeric …","Perform <code>left != right</code> operation on a <code>PrimitiveArray</code> and a …","Perform <code>left != right</code> operation on <code>StringArray</code> / …","Perform <code>left != right</code> operation on <code>StringArray</code> / …","Perform SQL <code>left NOT ILIKE right</code>","Perform SQL <code>left NOT LIKE right</code>","Evaluate <code>op(left, right)</code> for <code>PrimitiveArray</code>s using a …","Evaluate <code>op(left, right)</code> for <code>PrimitiveArray</code> and scalar …","Perform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …","Perform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …","Perform SQL <code>STARTSWITH(left, right)</code>","Applies an unary and infallible comparison function to a …","Concatenate multiple Array of the same type into a single …","Concatenates <code>batches</code> together into a single <code>RecordBatch</code>.","Returns the elementwise concatenation of a …","Returns the elementwise concatenation of a <code>GenericByteArray</code>…","","Returns the elementwise concatenation of a …","Returns the elementwise concatenation of <code>StringArray</code>.","Function that can filter arbitrary arrays","A builder to construct <code>FilterPredicate</code>","A filtering predicate that can be applied to an <code>Array</code>","An iterator of <code>(usize, usize)</code> each representing an interval","Returns a prepared function optimized to filter multiple …","","","Filters an Array, returning elements matching the filter …","","","Returns a new RecordBatch with arrays containing only …","Remove null values by do a bitmask AND operation with null …","","","Takes elements by index from a list of <code>Array</code>, creating a …","Returns an array of Int32/Int64 denoting the number of …","Returns an array of Int32/Int64 denoting the length of …","Copies original array, setting validity bit to false if a …","Perform <code>lhs + rhs</code>, returning an error on overflow","Perform <code>lhs + rhs</code>, wrapping on overflow for …","Perform <code>lhs / rhs</code>","Perform <code>lhs * rhs</code>, returning an error on overflow","Perform <code>lhs * rhs</code>, wrapping on overflow for …","Negates each element of  <code>array</code>, returning an error on …","Negates each element of  <code>array</code>, wrapping on overflow for …","Perform <code>lhs % rhs</code>","Perform <code>lhs - rhs</code>, returning an error on overflow","Perform <code>lhs - rhs</code>, wrapping on overflow for …","A computed set of partitions, see <code>partition</code>","Given a list of already sorted columns, find partition …","Given a list of lexicographically sorted columns, computes …","Assigns a rank to each value in <code>array</code> based on its …","Perform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …","Perform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …","Extract all groups matched by a regular expression for a …","A lexicographical comparator that wraps given array data …","One column to be used in lexicographical sort","Options that define the sort order of a given column","","Whether to sort in descending order","Sort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …","Sort elements lexicographically from a list of <code>ArrayRef</code> …","Whether to sort nulls first","","It’s unstable_sort, may not preserve the order of equal …","Sort the <code>ArrayRef</code> using <code>SortOptions</code>.","Sort the <code>ArrayRef</code> partially.","Sort elements from <code>ArrayRef</code> into an unsigned integer (…","","Returns an <code>ArrayRef</code> with substrings of all the elements in …","Arguments","Options that define how <code>take</code> should behave","Perform bounds check before taking indices from values. If …","Take elements by index from Array, creating a new Array …","Extracts the day of a given temporal primitive array as an …","Extracts the day of a given temporal array as an array of …","Extracts the day of year of a given temporal primitive …","Extracts the day of year of a given temporal array as an …","Extracts the hours of a given temporal primitive array as …","Extracts the hours of a given array as an array of …","Extracts the microseconds of a given temporal primitive …","Extracts the microseconds of a given temporal primitive …","Extracts the milliseconds of a given temporal primitive …","Extracts the milliseconds of a given temporal primitive …","Extracts the minutes of a given temporal primitive array …","Extracts the minutes of a given temporal array as an array …","Extracts the month of a given temporal primitive array as …","Extracts the month of a given temporal array as an array …","Extracts the nanoseconds of a given temporal primitive …","Extracts the nanoseconds of a given temporal primitive …","Extracts the day of week of a given temporal primitive …","Extracts the day of week of a given temporal array as an …","Extracts the day of week of a given temporal primitive …","Extracts the day of week of a given temporal array as an …","Extracts the quarter of a given temporal primitive array …","Extracts the quarter of a given temporal array as an array …","Extracts the seconds of a given temporal primitive array …","Extracts the seconds of a given temporal array as an array …","Parse the given string into a string representing …","Extracts the week of a given temporal primitive array as …","Extracts the week of a given temporal array as an array of …","Extracts the years of a given temporal primitive array as …","Extracts the years of a given temporal array as an array …","Shifts array by defined number of items (to left or right) …","Zip two arrays by some boolean mask. Where the mask …","A subtype of primitive type that represents legal …","Trait expressing a Rust type that has the same in-memory …","Trait for <code>ArrowNativeType</code> that adds checked and unchecked …","A subtype of primitive type that represents numeric values.","Trait bridging the dynamic-typed nature of Arrow (via …","Trait bridging the dynamic-typed nature of Arrow (via …","A subtype of primitive type that represents temporal …","A timestamp type allows us to create array builders that …","Width of the type","Opaque binary data of variable length.","An arrow binary array with i32 offsets","A boolean datatype representing the values <code>true</code> and <code>false</code>.","A boolean datatype","A trait over the variable-size byte array types","the corresponding Arrow data type of this primitive type.","the corresponding Arrow data type of this primitive type.","Datatype of array elements","The corresponding Arrow data type","The maximum precision for DataType::Decimal128 values","The maximum scale for DataType::Decimal128 values","The maximum precision for DataType::Decimal256 values","The maximum scale for DataType::Decimal256 values","The default scale for DataType::Decimal128 and …","Default values for <code>DataType</code>","The set of datatypes that are supported by this …","A 32-bit date representing the elapsed time since UNIX …","A 32-bit date type representing the elapsed time since …","A 64-bit date representing the elapsed time since UNIX …","A 64-bit date type representing the elapsed time since …","Indicates the number of elapsed days and milliseconds, …","Exact 128-bit width decimal value with precision and scale","The decimal type for a Decimal128Array","Exact 256-bit width decimal value with precision and scale","The decimal type for a Decimal256Array","A trait over the decimal types, used by <code>PrimitiveArray</code> to …","","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","Measure of elapsed time in either seconds, milliseconds, …","An elapsed time type in microseconds.","An elapsed time type in milliseconds.","An elapsed time type in nanoseconds.","An elapsed time type in seconds.","Describes a single column in a <code>Schema</code>.","A reference counted <code>Field</code>","A cheaply cloneable, owned slice of <code>FieldRef</code>","Opaque binary data of fixed size. Enum parameter specifies …","A list of some logical data type with fixed length.","A 16-bit floating point number.","A 16-bit floating point number type.","A 32-bit floating point number.","A 32-bit floating point number type.","A 64-bit floating point number.","A 64-bit floating point number type.","<code>ByteArrayType</code> for binary arrays","<code>ByteArrayType</code> for string arrays","A signed 16-bit integer.","A signed 16-bit integer type.","A signed 32-bit integer.","A signed 32-bit integer type.","A signed 64-bit integer.","A signed 64-bit integer type.","A signed 8-bit integer.","A signed 8-bit integer type.","A “calendar” interval which models types that don’t …","A “calendar” interval type in days and milliseconds.","A “calendar” interval type in months, days, and …","YEAR_MONTH, DAY_TIME, MONTH_DAY_NANO interval in SQL style.","A “calendar” interval type in months.","Opaque binary data of variable length and 64-bit offsets.","An arrow binary array with i64 offsets","A list of some logical data type with variable length and …","A variable-length string in Unicode with UFT-8 encoding …","An arrow utf8 array with i64 offsets","A list of some logical data type with variable length.","The maximum value that can be represented by this integer …","<code>MAX_DECIMAL_FOR_EACH_PRECISION[p]</code> holds the maximum <code>i128</code> …","Maximum number of significant digits","Maximum no of digits after the decimal point (note the …","The minimum value that can be represented by this integer …","The multiplicative inverse for this integer type, i.e. <code>-1</code>.","<code>MIN_DECIMAL_FOR_EACH_PRECISION[p]</code> holds the minimum <code>i128</code> …","A Map is a logical nested type that is represented as","Time in microseconds.","Time in milliseconds.","A triple of the number of elapsed months, days, and …","Time in nanoseconds.","Corresponding Rust native type for the primitive type.","Corresponding Rust native type for the primitive type.","Type for representing its equivalent rust type i.e …","Null type","The multiplicative identity for this integer type, i.e. <code>1</code>.","The multiplicative identity","Type of offset i.e i32/i64","“Decimal128” or “Decimal256”, for use in error …","“Binary” or “String”, for use in error messages","A run-end encoding (REE) is a variation of run-length …","A subtype of primitive type that is used as run-ends index …","Describes the meta-data of an ordered sequence of relative …","A builder to facilitate building a <code>Schema</code> from iteratively …","A reference-counted reference to a <code>Schema</code>.","Time in seconds.","Defines the SIMD type that should be used for this numeric …","Defines the SIMD Mask type that should be used for this …","","A nested datatype that contains a number of sub-fields.","fn to create its <code>DataType</code>","A 32-bit time representing the elapsed time since midnight …","A 32-bit time type representing the elapsed time since …","A 32-bit time type representing the elapsed time since …","A 64-bit time representing the elapsed time since midnight …","A 64-bit time type representing the elapsed time since …","A 64-bit time type representing the elapsed time since …","An absolute length of time in seconds, milliseconds, …","A timestamp with an optional timezone.","A timestamp microsecond type with an optional timezone.","A timestamp millisecond type with an optional timezone.","A timestamp nanosecond type with an optional timezone.","A timestamp second type with an optional timezone.","Allows conversion from supported Arrow types to a byte …","An unsigned 16-bit integer.","An unsigned 16-bit integer type.","An unsigned 32-bit integer.","An unsigned 32-bit integer type.","An unsigned 64-bit integer.","An unsigned 64-bit integer type.","An unsigned 8-bit integer.","An unsigned 8-bit integer type.","The <code>TimeUnit</code> of this timestamp.","A nested datatype that can represent slots of differing …","A cheaply cloneable, owned collection of <code>FieldRef</code> and …","","A variable-length string in Unicode with UTF-8 encoding","An arrow utf8 array with i32 offsets","Indicates the number of elapsed whole months, stored as …","The additive identity for this integer type, i.e. <code>0</code>.","The additive identity","","","","","Checked addition operation","","Adds the given IntervalDayTimeType to an arrow …","Adds the given IntervalDayTimeType to an arrow …","Adds the given IntervalDayTimeType to an arrow …","Adds the given IntervalDayTimeType to an arrow …","Adds the given IntervalDayTimeType to an arrow Date32Type","Adds the given IntervalDayTimeType to an arrow Date64Type","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","Wrapping addition operation","","Adds the given IntervalYearMonthType to an arrow …","Adds the given IntervalYearMonthType to an arrow …","Adds the given IntervalYearMonthType to an arrow …","Adds the given IntervalYearMonthType to an arrow …","Adds the given IntervalYearMonthType to an arrow Date32Type","Adds the given IntervalYearMonthType to an arrow Date64Type","Returns a vector with references to all fields (including …","","","Wraps this <code>i256</code> into an <code>i128</code>","Convert to usize according to the <code>as</code> operator","","Performs a SIMD binary operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the absolute value of this i256 returning <code>None</code> if …","Performs checked addition","Performs checked division","Performs checked multiplication","Negates this i256 returning <code>None</code> if <code>Self == Self::MIN</code>","Performs checked exponentiation","Performs checked remainder","Performs checked subtraction","","","","","","","","","","","","","","","","","","","","","","","","","","","Look up a column by name and return a immutable reference …","Compare operation","","","","","","","","","","Check to see if <code>self</code> is a superset of <code>other</code>","Check to see if <code>self</code> is a superset of <code>other</code> field. …","Check to see if <code>self</code> is a superset of <code>other</code>","Check to see if <code>self</code> is a superset of <code>other</code> schema.","Returns an immutable reference to the <code>Field</code>’s  <code>DataType</code>.","","","","","Returns a default value of this primitive type.","Returns a default value of this primitive type.","","","","","","","","","","Returns the dictionary ID, if this is a dictionary type.","","Returns whether this <code>Field</code>’s dictionary is ordered, if …","","","","","","Checked division operation","","Wrapping division operation","","Returns a new empty <code>Fields</code>","Create a new <code>UnionFields</code> with no fields","Creates an empty <code>Schema</code>","SIMD version of equal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compares the datatype with another, ignoring nested field …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an immutable reference of a specific <code>Field</code> …","Returns an immutable reference of a specific <code>Field</code> …","Returns an immutable reference of the vector of <code>Field</code> …","","","Returns a vector of immutable references to all <code>Field</code> …","Searches for a field by name, returning it along with its …","Consume this <code>SchemaBuilder</code> yielding the final <code>Schema</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Formats the decimal value with the provided precision and …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an integer value from its representation as a byte …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an optional i256 from the provided <code>f64</code>. Returning …","Convert native type from i128.","","Convert native type from i32.","Convert native type from i64.","","","","Create an integer value from its representation as a byte …","Converts a chrono::NaiveDate into an arrow Date32Type","Converts a chrono::NaiveDate into an arrow Date64Type","Create an i256 from the provided low u128 and high i128","","","","","Create an integer value from its representation as string.","Convert native integer type from usize","","SIMD version of greater than or equal to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the byte width of this primitive type.","Returns the byte width of this primitive type.","Returns the <code>TimeUnit</code> of this timestamp.","SIMD version of greater than","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A signed 256-bit integer","Find the index of the column with the given name.","Initializes a SIMD register to a constant value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns true if this type is valid as a dictionary key","Returns <code>true</code> if this is empty","Equality operation","","Returns true if this type is floating: (Float*).","Greater than equals operation","Greater than operation","Returns true if this type is integer: (Int*, UInt*).","Less than equals operation","Less than operation","Not equal operation","Returns <code>true</code> if this <code>i256</code> is negative","Returns true if this type is nested (List, FixedSizeList, …","Indicates whether this <code>Field</code> supports null values.","Returns true if this type is numeric: (UInt*, Int*, Float*…","Returns <code>true</code> if this <code>i256</code> is positive","Returns true if the type is primitive: (numeric, temporal).","Returns true if this type is valid for run-ends array in …","Returns true if this type is signed integer: (Int*).","Returns true if this type is temporal: (Date*, Time*, …","Returns true if this type is unsigned integer: (UInt*).","Returns true if zero else false","","Returns an iterator over the fields and type ids in this …","The number of SIMD lanes available","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SIMD version of less than or equal to","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of fields in this <code>UnionFields</code>","Loads a slice into a SIMD register","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","SIMD version of less than","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a ArrowTimestampType::Native from the provided …","","","","","Creates a IntervalYearMonthType::Native","Creates a IntervalDayTimeType::Native","Creates a IntervalMonthDayNanoType::Native","Returns <code>true</code> if any of the lanes in the mask are <code>true</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new SIMD mask for this SIMD type from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets the value of a single lane in a SIMD mask","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new SIMD mask for this SIMD type filling it with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","","Sets the value of a single lane of a SIMD mask","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a bitmask from the given SIMD mask. Each bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the immutable reference to the <code>Field</code>’s optional …","Returns an immutable reference to the Map of custom …","","A map of key-value pairs containing additional meta data.","Checked remainder operation","","Wrapping remainder operation","","","","","","Checked multiplication operation","","Wrapping multiplication operation","","Returns an immutable reference to the <code>Field</code>’s name.","","SIMD version of not equal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checked negation operation","","Wrapping negation operation","","Creates a new field","Create a new <code>UnionFields</code> from a <code>Fields</code> and array of …","Creates a new empty <code>SchemaBuilder</code>","Creates a new <code>Schema</code> from a sequence of <code>Field</code> values.","Creates a new field that has additional dictionary …","Create a new <code>Field</code> with <code>DataType::Dictionary</code>","Create a new <code>Field</code> with <code>DataType::LargeList</code>","Create a List DataType default name is “item”","Create a new <code>Field</code> with <code>DataType::List</code>","Create a new <code>Field</code> with <code>DataType::Map</code>","Create a new <code>Field</code> with <code>DataType::Struct</code>","Create a new <code>Field</code> with <code>DataType::Union</code>","Creates a new <code>Schema</code> from a sequence of <code>Field</code> values and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checked exponentiation operation","","Wrapping exponentiation operation","","Returns the bit width of this type if it is a primitive …","Returns a new schema with only the specified columns in …","","","Appends a <code>FieldRef</code> to this <code>SchemaBuilder</code> without checking …","","","","","","","","","","","","","Sets the <code>Field</code>’s optional custom metadata.","","","Returns a number <code>i256</code> representing sign of this <code>i256</code>.","Return size of this instance in bytes.","Return size of this instance in bytes.","Return size of this instance in bytes.","Return size of this instance in bytes.","","","","","Checked subtraction operation","","Wrapping subtraction operation","","Subtracts the given IntervalDayTimeType to an arrow …","Subtracts the given IntervalDayTimeType to an arrow …","Subtracts the given IntervalDayTimeType to an arrow …","Subtracts the given IntervalDayTimeType to an arrow …","Subtract the given IntervalDayTimeType to an arrow …","Subtract the given IntervalDayTimeType to an arrow …","Subtracts the given IntervalMonthDayNanoType to an arrow …","Subtracts the given IntervalMonthDayNanoType to an arrow …","Subtracts the given IntervalMonthDayNanoType to an arrow …","Subtracts the given IntervalMonthDayNanoType to an arrow …","Subtract the given IntervalMonthDayNanoType to an arrow …","Subtract the given IntervalMonthDayNanoType to an arrow …","Subtracts the given IntervalYearMonthType to an arrow …","Subtracts the given IntervalYearMonthType to an arrow …","Subtracts the given IntervalYearMonthType to an arrow …","Subtracts the given IntervalYearMonthType to an arrow …","Subtract the given IntervalYearMonthType to an arrow …","Subtract the given IntervalYearMonthType to an arrow …","Return the memory representation of this integer as a byte …","Converts this instance into a byte slice","","Converts this <code>i256</code> into an <code>i128</code> returning <code>None</code> if this …","","Convert native type to isize.","","Return the memory representation of this integer as a byte …","Turns a IntervalYearMonthType type into an i32 of months.","Converts an arrow Date32Type into a chrono::NaiveDate","Converts an arrow Date64Type into a chrono::NaiveDate","","","","","","","","","","Returns this <code>i256</code> as a low u128 and high i128","Turns a IntervalDayTimeType into a tuple of (days, …","Turns a IntervalMonthDayNanoType into a tuple of (months, …","","","","","","","","","Convert native type to usize.","","","See CDataInterface docs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merge this field into self if it is compatible.","Appends a <code>FieldRef</code> to this <code>SchemaBuilder</code> checking for …","Merge schema into self if it is compatible. Struct fields …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs a SIMD unary operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from usize according to the <code>as</code> operator","","Verifies that every consecutive pair of <code>offsets</code> denotes a …","","","Validates that the specified <code>i256</code> of value can be properly …","Validates that the specified <code>i128</code> value can be properly …","Validates that <code>value</code> contains no more than <code>precision</code> …","","","Validate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new empty <code>SchemaBuilder</code> with space for <code>capacity</code> …","Set <code>DataType</code> of the <code>Field</code> and returns self.","Sets the metadata of this <code>Field</code> to be <code>metadata</code> and returns …","Sets the metadata of this <code>Schema</code> to be <code>metadata</code> and …","Set the name of the <code>Field</code> and returns self.","Set <code>nullable</code> of the <code>Field</code> and returns self.","Computes the absolute value of this i256","Performs wrapping addition","Performs wrapping division","Performs wrapping multiplication","Negates this i256","Performs wrapping exponentiation","Performs wrapping remainder","Performs wrapping subtraction","Writes a SIMD result back to a slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Many different operations in the <code>arrow</code> crate return this …","Error during import or export to/from the C Data Interface","","","","","","Contains the error value","","","","","","","Returned when functionality is not yet available.","Contains the success value","","","","","","","","","","","","Returns the argument unchanged.","","","","Wraps an external error in an <code>ArrowError</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","ABI-compatible struct for ArrowArray from C Data Interface …","ABI-compatible struct for <code>ArrowSchema</code> from C Data Interface","","","","Get a flags value with all known bits set.","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","Returns the buffer at the provided index","Returns the length, in bytes, of the buffer <code>i</code> (indexed …","returns all buffers, as organized by Rust (i.e. null …","","","","","","","Returns the child at the provided index","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Whether all set bits in a source flags value are also set …","returns a new buffer corresponding to the index <code>i</code> of the …","","Returns the dictionary if any","","","","","The intersection of a source flags value with the …","","","create an empty <code>FFI_ArrowArray</code>, which can be used to …","Get a flags value with all bits unset.","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","","returns the format of this schema.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","","","","","Import ArrayData from the C Data Interface","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","whether the array is empty","Whether all bits in this flags value are unset.","Whether the array has been released","Yield a set of contained flags values.","Yield a set of contained named flags values.","the length of the array","","","","","","","","returns the name of this schema.","","creates a new <code>FFI_ArrowArray</code> from existing data.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","returns the null bit buffer. Rust implementation uses a …","the null count of the array","","","Returns the number of buffers","Returns the number of children","the offset of the array","","","","","","","The intersection of a source flags value with the …","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","Export to the C Data Interface","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","See CDataInterface docs","","","","","","","create a new <code>FFI_ArrowSchema</code>. This fails if the fields’ …","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","A <code>RecordBatchReader</code> which imports Arrays from …","","","","","","ABI-compatible struct for <code>ArrayStream</code> from C Stream …","","","","","","","","","","","","","","","","Creates a new empty FFI_ArrowArrayStream. Used to import …","Exports a record batch reader to raw pointer of the C …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new <code>ArrowArrayStreamReader</code> from a raw pointer of …","","","","","","","","","","","","Get the last error from <code>ArrowArrayStreamReader</code>","Gets schema from a raw pointer of <code>FFI_ArrowArrayStream</code>. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new <code>FFI_ArrowArrayStream</code>.","","","","","","","","","","","","","","","","","Creates a new <code>ArrowArrayStreamReader</code> from a …","","","","","","","","","A Rust type representing an exception defined in Python …","","Convert an arrow-rs type into a PyArrow object.","","A newtype wrapper. When wrapped around a type …","Create a new PyArrow object from a arrow-rs type.","","Gets the underlying FFI pointer, returns a borrowed …","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new <code>PyErr</code> of this type.","","","","","","","","","","","","","","","","","","","","","A two-dimensional batch of column-oriented data with a …","Generic implementation of RecordBatchReader that wraps an …","Options that control the behaviour used when creating a …","Trait for types that can read <code>RecordBatch</code>’s.","Trait for types that can write <code>RecordBatch</code>’s.","","","","","","","","","","","","Write footer or termination data, then mark the writer as …","Get a reference to a column’s array by index.","Get a reference to a column’s array by name.","Get a reference to all columns in the record batch.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the total number of bytes of memory occupied …","Get a reference to a column’s array by name.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Match field names of structs and lists. If set to <code>true</code>, …","Create a new RecordBatchIterator.","Creates a new <code>RecordBatchOptions</code>","Creates a new empty <code>RecordBatch</code>.","","Reads the next <code>RecordBatch</code>.","Returns the number of columns in the record batch.","Returns the number of rows in each column.","Projects the schema onto the specified columns","","Optional row count, useful for specifying a row count for …","Returns the schema of this <code>RecordBatchReader</code>.","","Returns the <code>Schema</code> of the record batch.","","","Return a new RecordBatch where each column is sliced …","","","","","","Create a <code>RecordBatch</code> from an iterable list of pairs of the …","Create a <code>RecordBatch</code> from an iterable list of tuples of the","","","","Creates a <code>RecordBatch</code> from a schema and columns.","Creates a <code>RecordBatch</code> from a schema and columns, with …","","","","","","","Sets the match_field_names of RecordBatchOptions and …","Sets the row_count of RecordBatchOptions and returns self","Override the schema of this <code>RecordBatch</code>","Write a single batch to the writer.","Number of days between 0001-01-01 and 1970-01-01","Number of microseconds in a second","Number of microseconds in a day","Number of milliseconds in a second","Number of milliseconds in a day","Number of nanoseconds in a second","Number of nanoseconds in a day","Number of seconds in a day","Converts an <code>ArrowPrimitiveType</code> to <code>NaiveDate</code>","Converts an <code>ArrowPrimitiveType</code> to <code>NaiveDateTime</code>","Converts an <code>ArrowPrimitiveType</code> to <code>DateTime&lt;Tz&gt;</code>","Converts an <code>ArrowPrimitiveType</code> to <code>Duration</code>","Converts an <code>ArrowPrimitiveType</code> to <code>NaiveTime</code>","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>","converts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>","converts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>","converts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>","converts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>","converts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>","converts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>","converts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>","converts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>","converts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>","converts a <code>i64</code> representing a <code>timestamp(ms)</code> to …","converts a <code>i64</code> representing a <code>timestamp(ns)</code> to …","converts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>timestamp(us)</code> to …","","","","","","","","","","","","","","","","","","","","Tensor of primitive types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the strides required assuming a column major …","Computes the strides required assuming a row major memory …","Returns a reference to the underlying <code>Buffer</code>","The data type of the <code>Tensor</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The name of dimension i","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Indicates if the memory layout column major","Indicates if the data is laid out contiguously in memory","Indicates if the memory layout row major","The names of the dimensions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of dimensions","Creates a new Tensor using column major memory layout","Creates a new Tensor using row major memory layout","The sizes of the dimensions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The total number of elements in the <code>Tensor</code>","The number of bytes between elements in each dimension","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Tensor</code>","","","Utils to make benchmarking easier","Types for iterating over bitmasks in 64-bit chunks","Types for iterating over packed bitmasks","Utils for working with packed bit masks","Utils for working with bits","Utilities to generate random arrays and batches","Functions for printing array values, as strings, for …","Utilities for pretty printing record batches. Note this …","String Writer This string writer encapsulates …","Utils to make testing easier","Creates an random (but fixed-seeded) binary array of a …","Creates an random (but fixed-seeded) array of a given size …","Creates a random (but fixed-seeded) dictionary array of a …","Creates an random (but fixed-seeded) array of a given size …","Creates an random (but fixed-seeded) array of a given size …","","Create primitive run array for given logical and physical …","Creates a random (but fixed-seeded) dictionary array of a …","Creates an random (but fixed-seeded) array of a given size …","Create string array to be used by run array builder. The …","Creates a random (but fixed-seeded) array of a given size, …","Creates an random (but fixed-seeded) array of a given size …","","Iterates over an arbitrarily aligned byte buffer","Iterates over an arbitrarily aligned byte buffer","","","","","","","","","","","","","","","","","Returns the number of chunks","","","","","Counts the number of ones","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns an iterator over chunks of 64 bits represented as …","Returns an iterator over chunks of 64 bits, with the …","","","","Create a from a byte array, and and an offset and length …","","","","","Returns the bitmask of remaining bits","Returns the number of remaining bits, guaranteed to be …","","","","","","","","","","","","","","","","","","","An iterator of <code>usize</code> whose index in a provided bitmask is …","Iterator over the bits within a packed bitmask","Iterator of contiguous ranges of set bits within a …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Create a new <code>BitIterator</code> from the provided <code>buffer</code>, and …","Create a new <code>BitSliceIterator</code> from the provided <code>buffer</code>, …","Create a new <code>BitIndexIterator</code> from the provide <code>buffer</code>, and …","","","","","Calls the provided closure for each index in the provided …","","","","","","","","","","","","","Sets all bits on <code>write_data</code> in the range …","Returns the ceil of <code>value</code>/<code>divisor</code>","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","Returns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …","Returns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…","Sets bit at position <code>i</code> for <code>data</code> to 1","Sets bit at position <code>i</code> for <code>data</code>","Sets bit at position <code>i</code> for <code>data</code> to 0","Sets bit at position <code>i</code> for <code>data</code> to 0","Create a random ArrayRef from a DataType with a length, …","Create a random RecordBatch from a schema","","","Generate random offsets for list arrays","A string formatter for an <code>Array</code>","Format for displaying durations","Options for formatting arrays","ISO 8601 - <code>P198DT72932.972880S</code>","A human readable representation - …","Implements <code>Display</code> for a specific array value","Get the value at the given row in an array as a String.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts numeric type to a <code>String</code>","","","","","","","","","","","","","","","","","","","Returns an <code>ArrayFormatter</code> that can be used to format <code>array</code>","Fallibly converts this to a string","","","","","Returns a <code>ValueFormatter</code> that implements <code>Display</code> for the …","","","","","Overrides the format used for <code>DataType::Date32</code> columns","Overrides the format used for <code>DataType::Date64</code> columns","If set to <code>true</code> any formatting errors will be written to …","Overrides the format used for duration columns","Overrides the string used to represent a null","Overrides the format used for <code>DataType::Time32</code> and …","Overrides the format used for <code>DataType::Timestamp</code> columns …","Overrides the format used for <code>DataType::Timestamp</code> columns …","Writes this value to the provided <code>Write</code>","Create a visual representation of record batches","Create a visual representation of record batches","Create a visual representation of columns","","Prints a visual representation of record batches to stdout","Prints a visual representation of a list of column to …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","An iterator that is untruthful about its actual length","Returns the arrow test data directory, which is by default …","","","","How many items this iterator claims it will make","","","where the iterator currently is","","Returns the argument unchanged.","","Returns a directory path for finding test data.","Returns file handle for a temp file in ‘target’ …","Calls <code>U::from(self)</code>.","","","The items to return. If there are fewer items than <code>limit</code> …","How many items will this iterator <em>actually</em> make","Create a new iterator for <code>&lt;limit&gt;</code> items, but that reports …","","Returns the parquest test data directory, which is by …","Returns a vector of size <code>n</code>, filled with randomly generated …","Returns fixed seedable RNG","report whatever the iterator says to","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,48,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,56,0,0,0,0,0,0,0,8,15,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,15,0,0,0,253,0,13,0,0,0,0,0,0,0,0,0,0,0,0,173,173,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,253,143,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,1,253,1,253,284,57,0,285,286,287,288,289,290,291,292,121,61,29,124,8,10,12,14,16,18,19,20,21,22,23,24,25,26,293,293,29,124,293,293,293,0,293,29,293,293,29,0,293,0,293,29,293,293,29,293,0,293,29,0,0,0,0,293,0,293,29,293,0,293,29,0,293,0,293,29,0,293,0,293,293,0,293,29,0,173,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,26,50,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,26,50,5,142,143,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,5,1,5,55,1,1,1,0,1,0,5,16,20,24,55,0,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,26,50,26,5,1,5,1,8,10,12,5,48,14,16,18,19,20,21,22,23,24,25,26,50,8,10,12,5,48,14,16,18,19,20,21,22,23,24,25,26,50,294,25,25,25,25,108,25,253,285,286,287,288,289,290,291,292,121,285,286,287,288,289,290,291,292,121,295,296,297,298,151,152,295,296,297,298,151,152,61,29,8,10,12,5,1,14,16,18,19,20,21,22,23,24,25,26,231,299,300,8,301,302,303,304,305,306,307,308,10,5,1,14,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,16,232,341,342,18,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,21,22,23,25,26,43,376,377,378,379,148,15,12,61,253,253,18,0,10,0,0,0,0,0,0,0,0,23,23,155,173,8,8,10,5,55,56,14,16,29,29,20,21,22,23,24,25,55,55,55,56,56,56,0,61,61,61,61,61,20,0,144,147,25,144,25,26,149,124,124,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,26,50,61,8,8,8,8,8,8,8,8,8,8,8,8,10,10,12,61,5,5,5,5,5,5,5,5,5,5,5,5,5,55,56,1,1,48,14,14,14,14,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18,18,19,20,20,20,20,20,21,21,21,21,21,22,22,23,23,24,24,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,25,25,25,25,25,26,26,50,20,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,26,50,8,8,10,10,16,18,18,20,14,22,8,16,8,16,5,16,20,16,8,16,173,186,8,10,12,14,16,18,19,29,29,20,21,22,23,24,25,26,50,29,8,10,12,5,14,16,18,19,20,21,22,23,24,25,26,29,8,10,12,5,14,16,18,19,20,21,22,23,24,25,26,15,8,8,18,18,18,5,18,173,295,296,297,298,152,25,173,149,229,229,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,26,50,124,8,61,5,16,29,8,10,12,14,16,18,19,20,21,22,23,24,25,26,8,12,16,19,20,21,8,10,14,16,21,22,23,25,10,5,8,16,29,8,10,10,12,61,5,14,16,16,18,19,124,20,20,21,22,23,24,25,26,253,253,253,253,253,253,5,29,26,10,12,18,19,29,24,10,301,302,303,304,305,306,307,308,10,5,29,26,253,8,14,16,20,21,22,23,0,10,155,147,23,27,10,10,12,23,301,302,303,304,305,306,307,308,10,376,377,378,379,117,148,10,173,0,173,29,124,8,10,10,12,61,5,1,14,16,16,18,19,20,20,21,22,23,24,25,26,5,1,142,143,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,21,22,24,25,45,149,145,173,18,10,12,18,19,29,24,285,286,287,288,289,290,291,292,121,10,173,0,0,117,173,173,173,173,173,173,173,228,253,253,253,253,66,173,253,253,8,10,61,1,14,16,20,21,22,23,24,25,50,55,5,55,0,55,23,8,5,14,16,20,21,22,25,0,8,16,20,8,10,5,25,26,211,27,10,1,1,115,380,381,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,144,382,383,384,385,386,387,44,150,145,146,147,43,61,5,1,29,26,1,16,29,8,10,12,5,1,14,16,18,19,20,21,22,23,24,25,26,231,299,300,8,5,1,14,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,16,232,341,342,20,21,22,23,25,8,25,10,29,8,10,12,5,1,14,16,18,19,20,21,22,23,24,25,26,5,1,8,14,23,26,26,115,380,381,382,383,384,385,386,387,146,147,284,57,253,253,16,295,296,297,298,151,152,284,57,5,16,108,228,19,19,18,19,18,343,344,345,295,296,297,298,151,152,0,16,211,108,29,8,8,10,10,12,5,14,14,16,16,18,18,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,376,377,378,379,148,253,253,8,8,16,20,8,8,16,20,0,0,16,29,8,10,12,14,16,18,19,20,21,22,23,24,25,26,8,10,12,5,48,14,16,18,19,20,21,22,23,24,25,26,50,5,20,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,25,26,50,8,21,21,21,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,26,50,8,10,5,14,16,18,21,22,23,25,26,16,16,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,26,26,50,149,26,26,26,0,16,10,16,173,16,5,5,16,5,5,5,109,8,8,12,14,14,16,16,19,20,20,21,21,22,22,22,23,23,26,155,16,16,16,16,16,16,115,380,381,384,385,386,387,147,8,21,231,299,300,8,232,341,342,21,8,14,21,22,23,21,22,150,21,22,26,149,8,14,23,231,299,300,8,14,309,310,232,341,342,23,10,14,22,23,109,8,8,12,14,14,16,16,19,20,20,21,21,22,22,23,23,27,8,10,10,12,14,16,18,19,20,22,23,301,302,303,304,305,306,307,308,10,12,14,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,16,18,343,344,345,19,20,22,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,295,296,297,298,382,383,44,150,145,146,43,117,151,148,152,8,10,12,61,5,55,56,1,48,14,16,18,19,20,21,22,23,24,66,25,26,50,61,16,16,16,16,16,27,10,10,294,173,388,388,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,15,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,29,29,231,299,300,8,301,302,303,304,305,306,307,308,10,14,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,16,232,341,342,18,343,344,345,21,22,23,25,26,15,12,23,25,26,29,29,15,29,29,29,29,301,302,303,304,305,306,307,308,10,29,27,301,302,303,304,305,306,307,308,10,29,21,22,24,25,29,0,66,0,0,27,29,29,231,299,300,8,14,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,16,232,341,342,20,21,22,23,25,29,26,57,57,19,18,343,344,345,29,29,26,109,231,299,300,8,232,341,342,21,21,22,231,299,300,8,14,309,310,232,341,342,23,109,27,301,302,303,304,305,306,307,308,10,12,14,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,16,18,343,344,345,19,20,22,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,142,143,142,143,144,145,146,147,117,148,149,142,45,45,142,143,143,115,144,44,150,146,45,43,117,151,148,152,149,44,45,43,115,44,146,43,117,151,148,152,142,142,143,44,43,143,43,115,44,150,146,43,117,151,148,152,44,43,124,115,144,44,150,145,146,147,45,43,117,151,148,152,124,115,144,44,150,145,146,147,45,43,117,151,148,152,142,143,142,143,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,142,143,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,149,142,143,44,45,43,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,155,155,295,296,297,298,151,152,295,296,297,298,151,152,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,43,376,377,378,379,148,143,115,44,146,155,45,43,117,151,148,152,155,143,115,44,146,43,117,151,148,152,144,144,147,144,149,124,142,143,115,115,144,144,44,44,150,150,145,145,146,146,147,147,45,45,43,43,117,117,151,151,148,148,152,152,124,142,115,115,144,144,44,44,150,150,145,145,146,146,147,147,45,45,43,43,117,117,151,151,148,148,152,152,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,142,143,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,144,143,142,295,296,297,298,152,149,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,124,115,144,44,150,145,146,147,45,43,117,151,148,152,142,143,124,155,147,147,376,377,378,379,117,148,124,142,143,115,144,44,150,145,146,147,45,43,117,151,148,152,142,143,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,45,149,145,0,117,142,143,115,144,44,150,145,146,147,45,43,117,151,148,152,149,142,143,115,43,117,117,149,148,115,380,381,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,144,382,383,384,385,386,387,44,150,145,146,147,43,144,115,380,381,382,383,384,385,386,387,146,147,115,146,295,296,297,298,151,152,142,143,142,295,296,297,298,151,152,142,43,376,377,378,379,148,155,142,143,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,149,115,44,43,115,43,155,115,380,381,384,385,386,387,147,145,150,149,145,146,147,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,295,296,297,298,382,383,44,150,145,146,43,117,151,148,152,146,115,43,117,43,117,142,143,115,144,44,150,145,146,147,155,45,43,117,151,148,152,149,115,44,150,145,146,147,45,43,117,151,148,152,149,149,43,43,43,43,115,0,293,293,293,293,293,0,293,293,293,0,293,0,293,293,293,293,0,293,0,0,0,0,293,0,293,293,0,293,0,293,0,293,0,293,0,293,293,0,293,0,0,0,0,0,0,0,0,0,0,0,0,285,286,287,288,289,290,291,292,121,121,121,121,285,286,287,288,289,290,291,292,121,285,286,287,288,289,290,291,292,121,121,121,121,121,121,285,286,287,288,289,290,291,292,121,121,121,121,121,121,121,121,121,0,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,159,137,159,137,159,137,159,137,159,137,159,159,159,137,159,137,159,137,137,137,159,137,159,137,137,137,137,159,137,159,159,137,159,137,159,137,159,159,137,0,0,0,0,129,0,0,0,15,7,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,129,15,7,7,129,7,0,129,0,0,0,0,0,0,0,0,0,0,0,0,112,0,15,129,15,112,112,33,389,390,30,391,392,7,129,0,0,0,0,0,0,0,0,157,2,157,125,127,2,157,157,2,98,2,98,98,0,0,0,98,125,2,157,127,98,123,130,125,2,157,127,98,123,130,123,127,98,123,0,0,0,0,2,157,125,2,157,127,98,123,130,157,125,2,127,98,123,130,125,2,127,98,123,130,157,98,123,2,98,2,2,157,157,125,2,157,127,157,157,2,157,127,98,123,2,2,2,98,98,98,123,123,123,123,157,157,157,125,2,157,127,98,123,130,157,125,2,2,2,2,157,157,127,127,127,127,98,98,98,98,123,123,123,123,130,2,125,2,157,127,98,123,130,2,2,2,157,157,127,98,123,157,125,2,2,2,157,157,2,157,130,130,130,125,127,98,123,130,125,2,157,127,98,123,130,125,127,98,123,130,127,98,123,2,2,2,157,98,123,130,123,98,123,98,123,157,2,157,98,123,130,157,98,130,2,130,125,157,127,98,123,130,125,157,123,98,125,123,130,98,123,125,98,123,123,98,123,130,98,130,127,2,125,2,127,98,157,157,157,157,130,98,157,157,98,157,125,2,127,98,123,130,2,98,125,2,127,98,123,130,157,123,125,2,157,127,98,123,130,2,157,125,2,157,127,98,123,130,125,2,157,127,98,123,130,2,157,157,123,123,123,123,98,98,98,130,125,2,157,127,98,123,130,157,157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,174,175,177,181,178,179,176,180,182,174,175,177,181,178,179,176,180,174,0,0,0,182,174,175,177,181,178,179,176,180,0,177,177,178,179,176,180,177,178,179,176,180,180,181,180,181,0,0,175,174,175,0,0,177,176,180,180,0,0,176,180,176,176,176,180,180,180,0,175,174,175,0,182,174,175,177,178,179,176,180,176,182,174,175,177,181,178,179,176,180,182,174,175,177,181,178,179,176,180,176,180,0,0,0,182,174,175,177,181,178,179,176,180,182,182,178,0,0,0,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,174,182,0,180,0,180,0,0,0,0,174,179,0,0,180,0,0,0,0,0,178,0,0,0,0,176,0,0,0,0,0,0,174,175,0,0,0,0,0,177,178,179,176,180,0,0,182,174,175,177,181,178,179,176,180,182,174,175,177,181,178,179,176,180,181,0,0,0,182,174,175,177,181,178,179,176,180,0,0,0,0,179,182,174,175,177,181,178,179,176,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,176,0,0,393,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,175,0,174,175,0,0,174,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,181,180,0,0,180,179,0,0,0,0,179,0,0,0,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,42,0,42,0,0,15,15,7,193,0,0,0,0,0,129,0,42,0,42,0,188,42,0,42,0,0,189,42,42,0,0,0,0,0,0,0,42,42,42,0,42,0,42,0,0,0,42,0,42,0,42,0,42,0,42,0,0,0,0,42,0,42,42,0,42,99,0,129,129,99,99,0,42,162,162,188,162,15,15,7,42,99,253,7,129,7,42,0,0,0,0,162,173,173,189,42,129,42,0,0,42,0,0,0,42,0,0,0,0,0,42,0,42,0,42,0,42,0,112,42,0,0,42,0,188,99,253,99,99,99,99,253,99,69,97,86,70,76,89,69,97,86,70,76,89,253,99,69,97,86,70,76,89,131,394,218,99,37,99,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,99,99,99,42,162,188,189,126,62,99,190,191,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,42,162,188,189,126,62,99,190,191,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,42,162,188,189,126,62,99,190,191,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,99,99,99,99,99,99,99,99,42,162,188,189,126,62,99,190,131,42,162,188,189,126,62,99,190,131,42,162,188,189,126,62,99,190,131,253,42,162,188,189,126,62,99,99,190,42,126,62,131,126,126,62,99,191,15,15,62,42,162,188,189,126,62,190,131,126,126,126,126,99,99,99,99,253,99,253,99,62,190,131,173,42,162,188,189,126,62,99,190,131,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,42,42,42,42,162,162,162,188,188,188,189,189,189,126,126,126,62,62,62,99,99,99,190,190,190,131,131,131,191,191,0,131,131,131,191,131,131,62,191,42,42,162,188,189,126,126,62,99,99,190,191,131,131,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,129,31,90,42,162,188,189,126,126,62,62,62,62,62,99,99,99,99,99,190,191,191,191,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,99,42,162,188,189,126,62,99,190,191,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,99,37,99,37,37,62,62,190,99,76,89,99,42,126,131,99,99,37,99,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,15,15,112,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,42,162,188,189,126,62,99,190,131,99,0,131,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,42,162,188,189,126,62,99,190,191,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,62,42,126,131,42,190,253,99,42,253,253,42,253,253,253,99,42,126,42,99,42,42,42,42,42,253,99,190,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,190,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,99,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,112,69,97,86,70,79,87,81,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,126,131,126,131,253,99,253,99,99,99,99,99,253,99,253,99,126,126,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,99,253,99,253,99,126,190,191,131,126,126,126,42,126,126,126,126,131,126,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,76,89,72,84,74,93,42,162,188,189,126,62,99,190,394,218,33,389,390,30,391,392,253,99,253,99,42,131,394,218,191,99,99,99,99,42,162,188,189,126,62,190,131,126,99,99,99,42,126,62,190,99,99,99,99,253,99,253,99,69,97,86,70,76,89,69,97,86,70,76,89,69,97,86,70,76,89,99,170,99,99,99,37,99,99,79,76,89,42,162,188,189,126,62,99,190,131,99,87,81,42,126,131,42,126,99,131,99,37,99,42,42,162,188,189,126,126,62,99,190,191,131,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,42,162,188,189,126,62,99,190,191,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,126,191,131,42,162,188,189,126,62,99,190,191,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,37,99,7,33,30,0,0,129,31,90,0,42,162,188,189,126,62,99,190,191,131,33,30,193,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,191,126,126,131,126,126,99,99,99,99,99,99,99,99,173,91,73,96,94,78,92,77,80,82,95,83,69,97,86,70,76,89,72,84,74,93,79,87,81,75,71,85,88,31,90,0,3,3,3,3,3,3,60,3,3,3,3,3,3,3,60,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,205,0,0,0,205,205,205,206,0,205,205,205,205,205,205,205,205,206,58,205,59,206,58,205,59,58,206,206,58,206,58,205,59,206,58,59,59,58,59,205,206,205,0,206,58,59,58,59,59,205,58,59,58,205,59,205,59,59,206,58,205,205,205,205,59,59,59,206,58,205,59,205,205,205,205,206,58,205,59,0,205,205,205,205,205,206,58,205,59,205,205,58,205,58,205,205,58,58,59,59,59,58,58,59,59,59,58,205,206,58,58,59,58,58,58,58,206,58,59,58,59,205,206,205,205,205,205,0,205,206,58,205,59,59,59,59,59,59,59,59,206,58,205,59,59,206,58,205,59,205,206,58,205,59,59,59,59,0,0,0,0,0,0,0,0,217,217,214,210,212,217,214,210,212,217,214,210,212,210,210,0,210,212,217,214,210,212,217,214,210,212,212,212,0,0,214,210,0,214,210,214,0,214,210,212,0,217,214,210,212,212,212,217,210,212,210,210,0,212,212,214,212,217,214,210,212,217,214,210,212,212,217,214,210,212,217,214,210,212,0,0,0,0,0,0,222,219,219,219,222,219,222,219,222,219,219,222,219,219,222,219,222,222,222,219,219,222,219,221,219,222,219,222,224,219,219,219,0,395,219,219,219,222,219,219,219,222,219,222,219,219,0,219,222,222,0,0,0,0,0,229,108,228,229,108,228,229,108,228,108,108,294,108,108,108,108,228,108,108,228,229,108,108,108,228,229,108,228,108,108,108,229,229,229,108,228,229,229,108,228,229,228,108,229,211,108,108,108,108,228,211,229,108,108,229,108,108,108,229,108,228,108,108,229,108,228,108,108,229,108,228,229,108,228,228,228,108,294,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,230,230,230,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,230,230,0,0,230,230,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,230,230,230,230,230,230,230,230,230,230,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,230,230,230,230,230,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,230,230,230,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,230,230,230,230,230,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,427,427,163,234,233,163,234,233,163,234,163,234,233,163,234,163,163,234,233,233,233,233,163,234,233,163,234,233,163,234,234,233,163,234,163,234,233,163,163,233,233,234,233,163,234,233,233,163,163,163,234,233,233,233,233,233,163,234,233,163,234,233,163,234,233,163,234,0,0,0,169,172,171,169,172,171,169,169,172,171,171,172,171,169,172,169,172,171,169,172,171,169,172,171,169,172,171,169,172,171,172,172,171,172,169,172,171,169,172,171,169,0,169,172,171,169,172,171,169,172,171,169,172,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,240,0,0,242,244,240,241,242,244,240,241,242,244,240,241,240,241,240,241,241,241,241,241,240,241,240,240,240,241,241,241,242,240,241,244,242,242,244,240,241,242,244,240,241,240,241,242,242,244,240,241,0,241,241,244,241,241,241,241,240,241,242,242,244,240,241,242,244,240,241,244,242,242,244,240,241,244,242,244,240,241,241,241,241,241,241,241,241,241,242,0,0,0,0,0,0,0,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,0,0,249,249,249,249,249,249,249,249,249,249,0,0,249,249,249,249,249,249,249,0,0,0,249,249,249,249,249,249],"fc":[309,508,697,916,922,975,976,1276,1577,3083,3115,3331,3413,3450,3489,3495,3527,3642,3679,3781,3874,3886,3888,3952,3955,4002,4003,4004,4005,4006,4007,4008,4009,4010,4011,4012,4013,4014,4015,4016,4017,4018,4019,4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,4081,4082,4083,4086,4087,4099,4103,4128,4177,4821,4823,4824,4872,6217],"p":[[3,"ArrayDataBuilder",21],[3,"Buffer",3342],[4,"ArrowError",5833],[4,"Result",6846],[3,"ArrayData",21],[8,"Any",6847],[8,"ByteArrayType",4184],[3,"GenericByteArray",21],[8,"ArrowDictionaryKeyType",4184],[3,"DictionaryArray",21],[8,"Sync",6848],[3,"TypedDictionaryArray",21],[8,"OffsetSizeTrait",21],[3,"GenericListArray",21],[8,"ArrowPrimitiveType",4184],[3,"PrimitiveArray",21],[8,"RunEndIndexType",4184],[3,"RunArray",21],[3,"TypedRunArray",21],[3,"BooleanArray",21],[3,"FixedSizeBinaryArray",21],[3,"FixedSizeListArray",21],[3,"MapArray",21],[3,"NullArray",21],[3,"StructArray",21],[3,"UnionArray",21],[8,"AnyDictionaryArray",21],[4,"Option",6849],[8,"Array",21],[3,"GenericBinaryType",4184],[3,"Decimal128Type",4184],[15,"i64"],[3,"GenericStringType",4184],[15,"i32"],[8,"Fn",6850],[15,"usize"],[8,"ArrowNativeType",4184],[15,"slice"],[3,"Global",6851],[3,"Vec",6852],[3,"Box",6853],[4,"DataType",4184],[3,"PrimitiveBuilder",2207],[3,"BooleanBuilder",2207],[3,"NullBuilder",2207],[15,"i8"],[3,"Arc",6854],[4,"Capacities",21],[8,"Clone",6855],[3,"Scalar",21],[15,"str"],[4,"Ordering",6856],[8,"From",6857],[15,"bool"],[3,"DataTypeLayout",21],[4,"BufferSpec",21],[6,"ArrayRef",21],[3,"FFI_ArrowArray",5872],[3,"FFI_ArrowSchema",5872],[6,"Result",5833],[3,"MutableArrayData",21],[3,"Fields",4184],[3,"Formatter",6858],[3,"Error",6858],[8,"Debug",6858],[3,"NativeAdapter",21],[3,"String",6859],[15,"u8"],[3,"TimestampSecondType",4184],[3,"TimestampNanosecondType",4184],[3,"DurationMillisecondType",4184],[3,"Time32SecondType",4184],[3,"Int16Type",4184],[3,"Time64MicrosecondType",4184],[3,"DurationSecondType",4184],[3,"Date32Type",4184],[3,"UInt32Type",4184],[3,"UInt8Type",4184],[3,"IntervalYearMonthType",4184],[3,"UInt64Type",4184],[3,"IntervalMonthDayNanoType",4184],[3,"Float16Type",4184],[3,"Float64Type",4184],[3,"Time32MillisecondType",4184],[3,"DurationMicrosecondType",4184],[3,"TimestampMicrosecondType",4184],[3,"IntervalDayTimeType",4184],[3,"DurationNanosecondType",4184],[3,"Date64Type",4184],[3,"Decimal256Type",4184],[3,"Int8Type",4184],[3,"UInt16Type",4184],[3,"Time64NanosecondType",4184],[3,"Int64Type",4184],[3,"Float32Type",4184],[3,"Int32Type",4184],[3,"TimestampMillisecondType",4184],[3,"BooleanBuffer",3342],[3,"i256",4184],[15,"u16"],[15,"i128"],[3,"f16",6860],[15,"f32"],[15,"u32"],[15,"f64"],[15,"u64"],[15,"i16"],[3,"RecordBatch",6168],[8,"ArrayAccessor",21],[8,"FnMut",6850],[8,"IntoIterator",6861],[8,"ArrowTimestampType",4184],[3,"PyAny",6862],[6,"PyResult",6863],[3,"GenericByteBuilder",2207],[8,"Send",6848],[3,"PrimitiveDictionaryBuilder",2207],[3,"Python",6864],[3,"Py",6865],[3,"PyErr",6863],[3,"ArrayIter",3116],[8,"Iterator",6866],[3,"NullBuffer",3342],[8,"ArrayBuilder",2207],[3,"OffsetBuffer",3342],[3,"Field",4184],[3,"ScalarBuffer",3342],[8,"AsRef",6857],[8,"DecimalType",4184],[3,"RunEndBuffer",3342],[3,"Schema",4184],[6,"PyObject",6865],[3,"TypeId",6847],[8,"ArrowTemporalType",4184],[3,"NaiveDate",6867],[3,"NaiveDateTime",6868],[3,"Tz",3230],[3,"DateTime",6869],[3,"Duration",6870],[3,"NaiveTime",6871],[8,"Into",6857],[3,"BooleanBufferBuilder",2207],[3,"BufferBuilder",2207],[3,"StructBuilder",2207],[3,"FixedSizeListBuilder",2207],[3,"GenericListBuilder",2207],[3,"MapBuilder",2207],[3,"GenericByteDictionaryBuilder",2207],[3,"UnionBuilder",2207],[3,"FixedSizeBinaryBuilder",2207],[3,"PrimitiveRunBuilder",2207],[3,"GenericByteRunBuilder",2207],[8,"Extend",6861],[3,"Range",6872],[3,"MapFieldNames",2207],[8,"Default",6873],[3,"MutableBuffer",3342],[3,"RunArrayIter",3177],[3,"TzOffset",3230],[3,"FixedOffset",6874],[4,"LocalResult",6875],[4,"TimeUnit",4184],[3,"BitChunks",6555],[15,"array"],[8,"Sized",6848],[3,"Bytes",6876],[3,"NonNull",6877],[8,"Allocation",19],[3,"BitIterator",6626],[8,"ToByteSlice",4184],[3,"BitIndexIterator",6626],[3,"BitSliceIterator",6626],[8,"ArrowNumericType",4184],[3,"FilterBuilder",3641],[3,"FilterPredicate",3641],[3,"CastOptions",3641],[3,"TakeOptions",3641],[3,"Partitions",3641],[3,"SortColumn",3641],[3,"SortOptions",3641],[3,"LexicographicalComparator",3641],[3,"SlicesIterator",3641],[8,"Hasher",6878],[3,"PyDict",6879],[8,"TimeZone",6875],[8,"Datum",21],[8,"ToPrimitive",6880],[4,"IntervalUnit",4184],[4,"UnionMode",4184],[3,"UnionFields",4184],[3,"SchemaBuilder",4184],[8,"Deserializer",6881],[3,"BooleanType",4184],[3,"Field",6882],[15,"u128"],[3,"RandomState",6883],[3,"HashMap",6883],[8,"Serializer",6884],[15,"isize"],[3,"Error",6885],[8,"Write",6886],[3,"IntoInnerError",6887],[3,"FromUtf8Error",6859],[8,"Error",6888],[3,"Flags",5872],[3,"ArrowArray",5872],[6,"Result",6858],[3,"Iter",6889],[3,"IterNames",6889],[3,"FFI_ArrowArrayStream",6030],[8,"RecordBatchReader",6168],[3,"ArrowArrayStreamReader",6030],[6,"c_char",6890],[3,"ExportedArrayStream",6030],[3,"CString",6891],[6,"c_int",6890],[3,"StreamPrivateData",6030],[6,"SchemaRef",4184],[3,"ArrowException",6112],[3,"PyObject",6892],[8,"FromPyArrow",6112],[3,"PyArrowType",6112],[15,"never"],[8,"IntoPyArrow",6112],[8,"PyErrArguments",6893],[3,"PyDowncastError",6863],[3,"PyTypeObject",6894],[3,"RecordBatchOptions",6168],[3,"RecordBatchIterator",6168],[3,"Tensor",6282],[6,"GenericBinaryArray",21],[6,"GenericStringArray",21],[3,"UnalignedBitChunk",6555],[3,"BitChunkIterator",6555],[3,"IntoIter",6849],[3,"Iter",6895],[3,"Cloned",6896],[3,"Chain",6897],[8,"SampleUniform",6898],[4,"DurationFormat",6698],[3,"FormatOptions",6698],[3,"ValueFormatter",6698],[8,"ToLexical",6899],[3,"ArrayFormatter",6698],[8,"Write",6858],[8,"Display",6858],[3,"StringWriter",6798],[6,"Result",6885],[3,"BadIterator",6816],[3,"PathBuf",6900],[3,"File",6901],[3,"StdRng",6902],[8,"ArrowNativeTypeOp",4184],[6,"Int8BufferBuilder",2207],[6,"Int16BufferBuilder",2207],[6,"Int32BufferBuilder",2207],[6,"Int64BufferBuilder",2207],[6,"UInt8BufferBuilder",2207],[6,"UInt16BufferBuilder",2207],[6,"UInt32BufferBuilder",2207],[6,"UInt64BufferBuilder",2207],[6,"Float16BufferBuilder",2207],[6,"Float32BufferBuilder",2207],[6,"Float64BufferBuilder",2207],[6,"Decimal128BufferBuilder",2207],[6,"Decimal256BufferBuilder",2207],[6,"TimestampSecondBufferBuilder",2207],[6,"TimestampMillisecondBufferBuilder",2207],[6,"TimestampMicrosecondBufferBuilder",2207],[6,"TimestampNanosecondBufferBuilder",2207],[6,"Date32BufferBuilder",2207],[6,"Date64BufferBuilder",2207],[6,"Time32SecondBufferBuilder",2207],[6,"Time32MillisecondBufferBuilder",2207],[6,"Time64MicrosecondBufferBuilder",2207],[6,"Time64NanosecondBufferBuilder",2207],[6,"IntervalYearMonthBufferBuilder",2207],[6,"IntervalDayTimeBufferBuilder",2207],[6,"IntervalMonthDayNanoBufferBuilder",2207],[6,"DurationSecondBufferBuilder",2207],[6,"DurationMillisecondBufferBuilder",2207],[6,"DurationMicrosecondBufferBuilder",2207],[6,"DurationNanosecondBufferBuilder",2207],[6,"ArrayDataRef",21],[6,"PrimitiveIter",3116],[6,"BooleanIter",3116],[6,"GenericStringIter",3116],[6,"GenericBinaryIter",3116],[6,"FixedSizeBinaryIter",3116],[6,"FixedSizeListIter",3116],[6,"GenericListArrayIter",3116],[6,"MapArrayIter",3116],[8,"AsArray",3073],[8,"RecordBatchWriter",6168],[6,"StringRunBuilder",2207],[6,"LargeStringRunBuilder",2207],[6,"BinaryRunBuilder",2207],[6,"LargeBinaryRunBuilder",2207],[6,"BinaryArray",21],[6,"LargeBinaryArray",21],[6,"Int8DictionaryArray",21],[6,"Int16DictionaryArray",21],[6,"Int32DictionaryArray",21],[6,"Int64DictionaryArray",21],[6,"UInt8DictionaryArray",21],[6,"UInt16DictionaryArray",21],[6,"UInt32DictionaryArray",21],[6,"UInt64DictionaryArray",21],[6,"ListArray",21],[6,"LargeListArray",21],[6,"Int8Array",21],[6,"Int16Array",21],[6,"Int32Array",21],[6,"Int64Array",21],[6,"UInt8Array",21],[6,"UInt16Array",21],[6,"UInt32Array",21],[6,"UInt64Array",21],[6,"Float16Array",21],[6,"Float32Array",21],[6,"Float64Array",21],[6,"TimestampSecondArray",21],[6,"TimestampMillisecondArray",21],[6,"TimestampMicrosecondArray",21],[6,"TimestampNanosecondArray",21],[6,"Date32Array",21],[6,"Date64Array",21],[6,"Time32SecondArray",21],[6,"Time32MillisecondArray",21],[6,"Time64MicrosecondArray",21],[6,"Time64NanosecondArray",21],[6,"IntervalYearMonthArray",21],[6,"IntervalDayTimeArray",21],[6,"IntervalMonthDayNanoArray",21],[6,"DurationSecondArray",21],[6,"DurationMillisecondArray",21],[6,"DurationMicrosecondArray",21],[6,"DurationNanosecondArray",21],[6,"Decimal128Array",21],[6,"Decimal256Array",21],[6,"StringArray",21],[6,"LargeStringArray",21],[6,"Int16RunArray",21],[6,"Int32RunArray",21],[6,"Int64RunArray",21],[6,"Int8Builder",2207],[6,"Int16Builder",2207],[6,"Int32Builder",2207],[6,"Int64Builder",2207],[6,"UInt8Builder",2207],[6,"UInt16Builder",2207],[6,"UInt32Builder",2207],[6,"UInt64Builder",2207],[6,"Float16Builder",2207],[6,"Float32Builder",2207],[6,"Float64Builder",2207],[6,"TimestampSecondBuilder",2207],[6,"TimestampMillisecondBuilder",2207],[6,"TimestampMicrosecondBuilder",2207],[6,"TimestampNanosecondBuilder",2207],[6,"Date32Builder",2207],[6,"Date64Builder",2207],[6,"Time32SecondBuilder",2207],[6,"Time32MillisecondBuilder",2207],[6,"Time64MicrosecondBuilder",2207],[6,"Time64NanosecondBuilder",2207],[6,"IntervalYearMonthBuilder",2207],[6,"IntervalDayTimeBuilder",2207],[6,"IntervalMonthDayNanoBuilder",2207],[6,"DurationSecondBuilder",2207],[6,"DurationMillisecondBuilder",2207],[6,"DurationMicrosecondBuilder",2207],[6,"DurationNanosecondBuilder",2207],[6,"Decimal128Builder",2207],[6,"Decimal256Builder",2207],[6,"StringDictionaryBuilder",2207],[6,"LargeStringDictionaryBuilder",2207],[6,"BinaryDictionaryBuilder",2207],[6,"LargeBinaryDictionaryBuilder",2207],[6,"GenericStringBuilder",2207],[6,"GenericBinaryBuilder",2207],[6,"ListBuilder",2207],[6,"LargeListBuilder",2207],[6,"BinaryBuilder",2207],[6,"LargeBinaryBuilder",2207],[6,"StringBuilder",2207],[6,"LargeStringBuilder",2207],[13,"FixedWidth",1889],[6,"Utf8Type",4184],[6,"LargeUtf8Type",4184],[6,"BinaryType",4184],[6,"LargeBinaryType",4184],[8,"Parser",3981],[6,"FieldRef",4184],[8,"ToPyArrow",6112],[6,"BooleanTensor",6282],[6,"Date32Tensor",6282],[6,"Date64Tensor",6282],[6,"Decimal128Tensor",6282],[6,"Decimal256Tensor",6282],[6,"DurationMicrosecondTensor",6282],[6,"DurationMillisecondTensor",6282],[6,"DurationNanosecondTensor",6282],[6,"DurationSecondTensor",6282],[6,"Float16Tensor",6282],[6,"Float32Tensor",6282],[6,"Float64Tensor",6282],[6,"Int8Tensor",6282],[6,"Int16Tensor",6282],[6,"Int32Tensor",6282],[6,"Int64Tensor",6282],[6,"IntervalDayTimeTensor",6282],[6,"IntervalMonthDayNanoTensor",6282],[6,"IntervalYearMonthTensor",6282],[6,"Time32MillisecondTensor",6282],[6,"Time32SecondTensor",6282],[6,"Time64MicrosecondTensor",6282],[6,"Time64NanosecondTensor",6282],[6,"TimestampMicrosecondTensor",6282],[6,"TimestampMillisecondTensor",6282],[6,"TimestampNanosecondTensor",6282],[6,"TimestampSecondTensor",6282],[6,"UInt8Tensor",6282],[6,"UInt16Tensor",6282],[6,"UInt32Tensor",6282],[6,"UInt64Tensor",6282],[6,"UnalignedBitChunkIterator",6555]]},\
"arrow_arith":{"doc":"Arrow arithmetic and aggregation kernels","t":"AAAAAAFOFFFFFFFFFFFFFFFFFAFFFFDDQQIDKLLLKLLLKLLLLLLLLLLLLLLLLLLKLLLKLLLLLLMMMKLLLFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFNNINQINNENNNIFKKKKKFKKFLLLLLLOFFFFFLLLLFFLFFFOFOOOFFKKKKKFKKOFLLLLOOLIFFFFFFFFFFFFFFFFFFFFKFFKFFKKFOFFFFFFFFF","n":["aggregate","arity","bitwise","boolean","numeric","temporal","bit_and","bit_operation","bit_or","bit_xor","bool_and","bool_or","is_nan","max","max_array","max_binary","max_boolean","max_string","min","min_array","min_binary","min_boolean","min_max_array_helper","min_max_helper","min_string","simd","sum","sum_array","sum_array_checked","sum_checked","MaxAggregate","MinAggregate","ScalarAccumulator","SimdAccumulator","SimdAggregate","SumAggregate","accumulate_chunk_non_null","accumulate_chunk_non_null","accumulate_chunk_non_null","accumulate_chunk_non_null","accumulate_chunk_nullable","accumulate_chunk_nullable","accumulate_chunk_nullable","accumulate_chunk_nullable","accumulate_scalar","accumulate_scalar","accumulate_scalar","accumulate_scalar","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","from","from","from","from_cast","from_cast","from_cast","init_accumulator_chunk","init_accumulator_chunk","init_accumulator_chunk","init_accumulator_chunk","init_accumulator_scalar","init_accumulator_scalar","init_accumulator_scalar","init_accumulator_scalar","into","into","into","phantom","phantom","phantom","reduce","reduce","reduce","reduce","simd_aggregation","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","binary","binary_mut","try_binary","try_binary_mut","try_binary_no_nulls","try_binary_no_nulls_mut","try_unary","try_unary_dict","try_unary_dyn","try_unary_mut","unary","unary_dict","unary_dyn","unary_mut","bitwise_and","bitwise_and_scalar","bitwise_not","bitwise_op","bitwise_or","bitwise_or_scalar","bitwise_shift_left","bitwise_shift_left_scalar","bitwise_shift_right","bitwise_shift_right_scalar","bitwise_xor","bitwise_xor_scalar","and","and_kleene","binary_boolean_kernel","is_not_null","is_null","not","or","or_kleene","Add","AddWrapping","DateOp","Div","Duration","IntervalOp","Mul","MulWrapping","Op","Rem","Sub","SubWrapping","TimestampOp","add","add","add_day_time","add_day_time","add_month_day_nano","add_month_day_nano","add_wrapping","add_year_month","add_year_month","arithmetic_op","borrow","borrow_mut","cast","clone","clone_into","commutative","date","date_op","decimal_op","div","duration_op","float_op","fmt","fmt","from","from_cast","integer_op","interval_op","into","mul","mul_wrapping","neg","neg_checked","neg_wrapping","neg_wrapping","op","op_ref","rem","sub","sub","sub_day_time","sub_day_time","sub_month_day_nano","sub_month_day_nano","sub_wrapping","sub_year_month","sub_year_month","timestamp","timestamp_op","to_owned","to_string","try_from","try_into","try_op","try_op_ref","type_id","ChronoDateExt","as_datetime_with_op","as_time_with_op","day","day_dyn","doy","doy_dyn","extract_component_from_datetime_array","hour","hour_dyn","microsecond","microsecond_dyn","millisecond","millisecond_dyn","minute","minute_dyn","month","month_dyn","nanosecond","nanosecond_dyn","num_days_from_monday","num_days_from_monday","num_days_from_monday_dyn","num_days_from_sunday","num_days_from_sunday","num_days_from_sunday_dyn","quarter","quarter","quarter0","quarter_dyn","return_compute_error_with","second","second_dyn","time_fraction_dyn","time_fraction_internal","using_chrono_tz_and_utc_naive_date_time","week","week_dyn","year","year_dyn"],"q":[[0,"arrow_arith"],[6,"arrow_arith::aggregate"],[30,"arrow_arith::aggregate::simd"],[91,"arrow_arith::arity"],[105,"arrow_arith::bitwise"],[117,"arrow_arith::boolean"],[125,"arrow_arith::numeric"],[194,"arrow_arith::temporal"],[234,"arrow_array::numeric"],[235,"arrow_array::array::primitive_array"],[236,"core::option"],[237,"arrow_array::array::boolean_array"],[238,"arrow_buffer::native"],[239,"core::cmp"],[240,"core::marker"],[241,"arrow_array::array"],[242,"arrow_array::array::list_array"],[243,"arrow_array::array::binary_array"],[244,"arrow_array::array::string_array"],[245,"core::ops::function"],[246,"arrow_schema::error"],[247,"core::result"],[248,"core::any"],[249,"arrow_array::types"],[250,"arrow_array::types"],[251,"arrow_array::array"],[252,"arrow_array::timezone::private"],[253,"core::fmt"],[254,"core::fmt"],[255,"arrow_array::iterator"],[256,"arrow_array::types"],[257,"arrow_array::array::primitive_array"],[258,"chrono::offset::fixed"]],"d":["Defines aggregations over Arrow arrays.","Defines kernels suitable to perform operations to …","","Defines boolean kernels on Arrow <code>BooleanArray</code>’s, e.g. <code>AND</code>…","Defines numeric arithmetic kernels on <code>PrimitiveArray</code>, such …","Defines temporal kernels for time and date related …","Returns the bitwise and of all non-null input values.","","Returns the bitwise or of all non-null input values.","Returns the bitwise xor of all non-null input values.","Returns true if all non-null input values are true, …","Returns true if any non-null input value is true, …","Generic test for NaN, the optimizer should be able to …","Returns the maximum value in the array, according to the …","Returns the max of values in the array of <code>ArrowNumericType</code> …","Returns the maximum value in the binary array, according …","Returns the maximum value in the boolean array","Returns the maximum value in the string array, according …","Returns the minimum value in the array, according to the …","Returns the min of values in the array of <code>ArrowNumericType</code> …","Returns the minimum value in the binary array, according …","Returns the minimum value in the boolean array.","","Helper to compute min/max of <code>ArrayAccessor</code>.","Returns the minimum value in the string array, according …","","Returns the sum of values in the primitive array.","Returns the sum of values in the array.","Returns the sum of values in the array.","Returns the sum of values in the primitive array.","","","","","","","Updates the accumulator with the values of one chunk","","","","Updates the accumulator with the values of one chunk …","","","","Updates the accumulator with one value","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the accumulator for aggregating simd chunks of …","","","","Returns the accumulator for aggregating scalar values","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Reduces the vector lanes of the simd accumulator and the …","","","","","","","","","","","","","","Given two arrays of length <code>len</code>, calls <code>op(a[i], b[i])</code> for <code>i</code> …","Given two arrays of length <code>len</code>, calls <code>op(a[i], b[i])</code> for <code>i</code> …","Applies the provided fallible binary operation across <code>a</code> …","Applies the provided fallible binary operation across <code>a</code> …","This intentional inline(never) attribute helps LLVM …","This intentional inline(never) attribute helps LLVM …","See <code>PrimitiveArray::try_unary</code>","A helper function that applies a fallible unary function …","Applies a fallible unary function to an array with …","See <code>PrimitiveArray::try_unary_mut</code>","See <code>PrimitiveArray::unary</code>","A helper function that applies an infallible unary …","Applies an infallible unary function to an array with …","See <code>PrimitiveArray::unary_mut</code>","Perform <code>left &amp; right</code> operation on two arrays. If either …","Perform bitwise <code>and</code> every value in an array with the …","Perform <code>!array</code> operation on array. If array value is null …","The helper function for bitwise operation with two array","Perform <code>left | right</code> operation on two arrays. If either …","Perform bitwise <code>or</code> every value in an array with the …","Perform bitwise <code>left &lt;&lt; right</code> operation on two arrays. If …","Perform bitwise <code>left &lt;&lt; right</code> every value in an array with …","Perform bitwise <code>left &gt;&gt; right</code> operation on two arrays. If …","Perform bitwise <code>left &gt;&gt; right</code> every value in an array with …","Perform <code>left ^ right</code> operation on two arrays. If either …","Perform bitwise <code>xor</code> every value in an array with the …","Performs <code>AND</code> operation on two arrays. If either left or …","Logical ‘and’ boolean values with Kleene logic","Helper function to implement binary kernels","Returns a non-null BooleanArray with whether each value of …","Returns a non-null BooleanArray with whether each value of …","Performs unary <code>NOT</code> operation on an arrays. If value is …","Performs <code>OR</code> operation on two arrays. If either left or …","Logical ‘or’ boolean values with Kleene logic","","","Arithmetic trait for date arrays","","","Arithmetic trait for interval arrays","","","An enumeration of arithmetic operations","","","","Arithmetic trait for timestamp arrays","Perform <code>lhs + rhs</code>, returning an error on overflow","","","","","","Perform <code>lhs + rhs</code>, wrapping on overflow for …","","","Dispatch the given <code>op</code> to the appropriate specialized kernel","","","","","","","","Perform arithmetic operation on a date array","Perform arithmetic operation on decimal arrays","Perform <code>lhs / rhs</code>","","Perform an arithmetic operation on floats","","","Returns the argument unchanged.","","Perform an arithmetic operation on integers","Perform arithmetic operation on an interval array","Calls <code>U::from(self)</code>.","Perform <code>lhs * rhs</code>, returning an error on overflow","Perform <code>lhs * rhs</code>, wrapping on overflow for …","Negates each element of  <code>array</code>, returning an error on …","","Negates each element of  <code>array</code>, wrapping on overflow for …","","Perform an infallible binary operation on potentially …","Same as <code>op</code> but with a type hint for the returned array","Perform <code>lhs % rhs</code>","Perform <code>lhs - rhs</code>, returning an error on overflow","","","","","","Perform <code>lhs - rhs</code>, wrapping on overflow for …","","","","Perform arithmetic operation on a timestamp array","","","","","Perform a fallible binary operation on potentially scalar …","Same as <code>try_op</code> but with a type hint for the returned array","","","This function takes an <code>ArrayIter</code> of input array and an …","This function takes an <code>ArrayIter</code> of input array and an …","Extracts the day of a given temporal primitive array as an …","Extracts the day of a given temporal array as an array of …","Extracts the day of year of a given temporal primitive …","Extracts the day of year of a given temporal array as an …","This function extracts date time component (e.g. hour) …","Extracts the hours of a given temporal primitive array as …","Extracts the hours of a given array as an array of …","Extracts the microseconds of a given temporal primitive …","Extracts the microseconds of a given temporal primitive …","Extracts the milliseconds of a given temporal primitive …","Extracts the milliseconds of a given temporal primitive …","Extracts the minutes of a given temporal primitive array …","Extracts the minutes of a given temporal array as an array …","Extracts the month of a given temporal primitive array as …","Extracts the month of a given temporal array as an array …","Extracts the nanoseconds of a given temporal primitive …","Extracts the nanoseconds of a given temporal primitive …","Extracts the day of week of a given temporal primitive …","Returns the day of week; Monday is encoded as <code>0</code>, Tuesday …","Extracts the day of week of a given temporal array as an …","Extracts the day of week of a given temporal primitive …","Returns the day of week; Sunday is encoded as <code>0</code>, Monday as …","Extracts the day of week of a given temporal array as an …","Extracts the quarter of a given temporal primitive array …","Returns a value in range <code>1..=4</code> indicating the quarter this …","Returns a value in range <code>0..=3</code> indicating the quarter …","Extracts the quarter of a given temporal array as an array …","","Extracts the seconds of a given temporal primitive array …","Extracts the seconds of a given temporal array as an array …","Extracts the time fraction of a given temporal array as an …","Extracts the time fraction of a given temporal array as an …","Parse the given string into a string representing …","Extracts the week of a given temporal primitive array as …","Extracts the week of a given temporal array as an array of …","Extracts the years of a given temporal primitive array as …","Extracts the years of a given temporal array as an array …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,43,0,0,43,44,45,46,43,44,45,46,43,44,45,46,44,45,46,44,45,46,44,45,46,44,45,46,44,45,46,43,44,45,46,43,44,45,46,44,45,46,44,45,46,43,44,45,46,0,44,45,46,44,45,46,44,45,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,31,0,31,47,0,31,31,0,31,31,31,0,0,48,47,49,47,49,0,47,49,0,31,31,31,31,31,31,0,0,0,0,0,0,31,31,31,31,0,0,31,0,0,0,0,0,0,0,0,0,0,48,47,49,47,49,0,47,49,0,0,31,31,31,31,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,50,0,0,50,50,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,[[[2,[1]]],3],0,[[[2,[1]]],3],[[[2,[1]]],3],[4,[[3,[5]]]],[4,[[3,[5]]]],[[[0,[6,7,8]]],5],[[[2,[1]]],3],[9,3],[[[11,[10]]],[[3,[[13,[12]]]]]],[4,[[3,[5]]]],[[[14,[10]]],[[3,[15]]]],[[[2,[1]]],3],[9,3],[[[11,[10]]],[[3,[[13,[12]]]]]],[4,[[3,[5]]]],[[9,16,16],3],[[9,16],3],[[[14,[10]]],[[3,[15]]]],0,[[[2,[1]]],3],[9,3],[9,[[18,[3,17]]]],[[[2,[1]]],[[18,[3,17]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],3],[[],3],[[],3],[[],3],[[[2,[1]]],3],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[[2,[20]],[2,[20]],16],[[18,[[2,[20]],17]]]],[[[2,[20]],[2,[20]],16],[[18,[[18,[[2,[20]],17]],[2,[20]]]]]],[[9,9,16],[[18,[[2,[20]],17]]]],[[[2,[20]],[2,[20]],16],[[18,[[18,[[2,[20]],17]],[2,[20]]]]]],[[21,9,9,16],[[18,[[2,[20]],17]]]],[[21,[2,[20]],[2,[20]],16],[[18,[[18,[[2,[20]],17]],[2,[20]]]]]],[[[2,[20]],16],[[18,[[2,[20]],17]]]],[[[23,[[0,[22,1]]]],16],[[18,[24,17]]]],[[25,16],[[18,[24,17]]]],[[[2,[20]],16],[[18,[[18,[[2,[20]],17]],[2,[20]]]]]],[[[2,[20]],16],[[2,[20]]]],[[[23,[[0,[22,1]]]],16],[[18,[24,17]]]],[[25,16],[[18,[24,17]]]],[[[2,[20]],16],[[18,[[2,[20]],[2,[20]]]]]],[[[2,[1]],[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]],[2,[1]],16],[[18,[[2,[1]],17]]]],[[[2,[1]],[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]],[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]],[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]],[2,[1]]],[[18,[[2,[1]],17]]]],[[[2,[1]]],[[18,[[2,[1]],17]]]],[[4,4],[[18,[4,17]]]],[[4,4],[[18,[4,17]]]],[[4,4,16],[[18,[4,17]]]],[25,[[18,[4,17]]]],[25,[[18,[4,17]]]],[4,[[18,[4,17]]]],[[4,4],[[18,[4,17]]]],[[4,4],[[18,[4,17]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[26,26],[[18,[24,17]]]],[[],[[18,[17]]]],[[27,27,28],[[3,[27]]]],[27],[[27,29,28],[[3,[27]]]],[29],[[26,26],[[18,[24,17]]]],[[27,30,28],[[3,[27]]]],[30],[[31,26,26],[[18,[24,17]]]],[[]],[[]],[[]],[31,31],[[]],[31,5],0,[[31,25,5,25,5],[[18,[24,17]]]],[[31,25,5,25,5],[[18,[24,17]]]],[[26,26],[[18,[24,17]]]],[[31,25,5,25,5],[[18,[24,17]]]],[[31,25,5,25,5],[[18,[24,17]]]],[[31,32],33],[[31,32],33],[[]],[[]],[[31,25,5,25,5],[[18,[24,17]]]],[[31,25,5,25,5],[[18,[24,17]]]],[[]],[[26,26],[[18,[24,17]]]],[[26,26],[[18,[24,17]]]],[25,[[18,[24,17]]]],0,[25,[[18,[24,17]]]],0,0,0,[[26,26],[[18,[24,17]]]],[[26,26],[[18,[24,17]]]],[[],[[18,[17]]]],[[27,27,28],[[3,[27]]]],[27],[[27,29,28],[[3,[27]]]],[29],[[26,26],[[18,[24,17]]]],[[27,30,28],[[3,[27]]]],[30],0,[[31,25,5,25,5],[[18,[24,17]]]],[[]],[[],34],[[],18],[[],18],0,0,[[],19],0,[[[35,[9]],[37,[36]],16],38],[[[35,[9]],[37,[36]],16],38],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[[35,[9]],[37,[36]],15,16],[[18,[38,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[[],30],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[[],30],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[[],40],[[],40],[25,[[18,[24,17]]]],0,[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[25,15,16],[[18,[24,17]]]],[[[2,[[0,[39,1]]]],15,16],[[18,[38,17]]]],[[15,41],[[3,[42]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]],[[[2,[[0,[39,1]]]]],[[18,[38,17]]]],[25,[[18,[24,17]]]]],"c":[99,103,229],"p":[[8,"ArrowNumericType",234],[3,"PrimitiveArray",235],[4,"Option",236],[3,"BooleanArray",237],[15,"bool"],[8,"ArrowNativeType",238],[8,"PartialOrd",239],[8,"Copy",240],[8,"ArrayAccessor",241],[8,"OffsetSizeTrait",242],[6,"GenericBinaryArray",243],[15,"u8"],[15,"slice"],[6,"GenericStringArray",244],[15,"str"],[8,"Fn",245],[4,"ArrowError",246],[4,"Result",247],[3,"TypeId",248],[8,"ArrowPrimitiveType",249],[15,"usize"],[8,"ArrowDictionaryKeyType",249],[3,"DictionaryArray",250],[6,"ArrayRef",241],[8,"Array",241],[8,"Datum",251],[15,"i64"],[3,"Tz",252],[15,"i128"],[15,"i32"],[4,"Op",125],[3,"Formatter",253],[6,"Result",253],[3,"String",254],[3,"ArrayIter",255],[3,"Int32Type",249],[3,"PrimitiveBuilder",256],[6,"Int32Array",235],[8,"ArrowTemporalType",249],[15,"u32"],[3,"NaiveDateTime",257],[3,"FixedOffset",258],[8,"SimdAggregate",30],[3,"SumAggregate",30],[3,"MinAggregate",30],[3,"MaxAggregate",30],[8,"TimestampOp",125],[8,"IntervalOp",125],[8,"DateOp",125],[8,"ChronoDateExt",194]]},\
"arrow_array":{"doc":"The central type in Apache Arrow are arrays, which are a …","t":"IIISDDDIIDQQSKKAAKAAKMKAKKOOOOOOOOKKKKKMMKKAKKKKKKKKKKKMKKKKKKKAKKAMMAAKMKKAAAAKKKISSKKKKKKLLLLLLLLLLKKKKKOOKKKKKKIIIGCGDGGGGDGGGGDDGGGGDDGSGGGGGGGGGGGGGGQGGGGDDDISDDGDGGGGGGGGDDGGGGGGGGDMKLLLLLLLLLLLLLLLLLLLLLAAAKLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMAMLLMMAALLKLKLFKLKLLLLLMMMMMMMMMLLKMMMMMMMMMKLMMMMALLFAMFFKALLKLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKLMMAFMAMMMMMKLAAKLMAKMMMMMMMMMMMMMMMMMMMMMKKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMKGGGMMMLLLLLLLLLMMMLLMMMMMMDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMSDLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLMLLLIDGGGGDGGGGLLLLLLLLLLLLLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLKLLLMMMMMMMMMLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLMMMMMMMMMMKLLDLLLLLLLMLLLLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLLLLLMLMLLLLDLLLLLLLMLLLLLLLLLLLLLLLMLLLMLLLLLLLLLLLLLMLLLLLLMSDSGGISLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLMMMLLLLMMMDLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLDLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLCGGGGGGGGGGGGGGGGGGDDGGGGGGGGGGGGLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLGGGDDLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMLLLLLLLLLLLLLLLLLLMMMMMGGGMMMLLLLLLLLMMMLLLLMMMMMMDLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLDLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLIGGGDDDGGGGGGGGGGGGGGGGDDGGGGGGGDDDDGGGGGGGGGGGGGGGGGGGGGGGDDDDDDGGGDGGGGGGGGGGGGGGGGGGGGGGGGDMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLKKLLLLLALLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMALLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMLMMMMKLLLKLAALLLLLLLLAAAALMMMMMMLLKLLLMMMMMMMMKLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFMALLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMAMMMMMMMMMMMMMMMMMAAALLLMMMMMMLMMMMMALLLLLLLLMAMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLDGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDLLLLLLLLLLLLLLLLLLMLLLMMLDLLLLLLLLLLLLLLLLMLMLLLLLMLGDGGGLLLLLLLLLLMMMMMMMMMMLLLLLLLLLMMMMMLLLLMMMMMLMMMMMLLLMMMMMLGDGLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLMMMLLLGDGGGLLLLLLLLLMMMMMLLLLLLLLLFLLMMMMMLLLMMMMMLLLMMMMMLDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLMLLDDLLLLLLLLLLLLMMLLLLLLLLLLLLLLMMLLLMMLLLLLLLMMLLDLLLLLLLLLLLLLLLLLLLLLMLLLLLGGGGGGGGGGGGGGGGGGDGGGGGGGGGGGGLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLMLLLDLLLLLLLLLLMMLLLLLLLLLLLLLMLMLLLMLDLLLLLLLLMMLLLLLLLLLLLFLMLLLLLDIDLKLLLLKLLLLLLLMMKLLLLLLMLLMLLLMMLLLLLLMMMMLLIOLKLLLFKLKFLFKLKLFKFFFFLFKLFKFLFKFLFLLFKFFAIFFFFFDGGGGGGGGMMMMMMMMMLLLMMMMMMMMMMMMMMMMMMLLLLLLMMMMMMMMMLLLLLLLIQQKKKKKKKKKOKKKKKKKKKKDDDIILLLLLLLLLLLKLLLMLLLLLLLLLLLLLLMMLLLLMLLLLLLLLLMMKLLMLLLLLLLLLLLLLLLLLLLLKDMLLLMMMMLLLLLLLLLLLLIDLLLLLLLLKLLLLLLLRRRRRRRRFFFFFFFFFFFFFFFFFFFFFFFFDDMFAMNNDEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMOFIIIISGDISSSSDDDDIDDDDDDDDDDDDDDDDGGSSQQQSSISDDDDDDDDDDDDSGFLLLLLLFLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMAFLLLLLLFLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKII","n":["ArrowNativeTypeOp","ArrowNumericType","Datum","ONE","RecordBatch","RecordBatchIterator","RecordBatchOptions","RecordBatchReader","RecordBatchWriter","Scalar","Simd","SimdMask","ZERO","add_checked","add_wrapping","arithmetic","array","bin_op","builder","cast","close","columns","compare","delta","div_checked","div_wrapping","downcast_dictionary_array","downcast_integer","downcast_primitive","downcast_primitive_array","downcast_run_array","downcast_run_end_index","downcast_temporal","downcast_temporal_array","eq","ge","get","gt","init","inner","inner_schema","is_eq","is_zero","iterator","lanes","le","load","lt","mask_any","mask_from_u64","mask_get","mask_init","mask_select","mask_set","mask_to_u64","match_field_names","mod_checked","mod_wrapping","mul_checked","mul_wrapping","ne","neg_checked","neg_wrapping","numeric","pow_checked","pow_wrapping","record_batch","row_count","row_count","run_iterator","scalar","schema","schema","sub_checked","sub_wrapping","temporal_conversions","timezone","trusted_len","types","unary_op","write","write","ArrowNativeTypeOp","ONE","ZERO","add_checked","add_wrapping","compare","div_checked","div_wrapping","is_eq","is_ge","is_ge","is_gt","is_gt","is_le","is_le","is_lt","is_lt","is_ne","is_ne","is_zero","mod_checked","mod_wrapping","mul_checked","mul_wrapping","native_type_float_op","native_type_op","neg_checked","neg_wrapping","pow_checked","pow_wrapping","sub_checked","sub_wrapping","AnyDictionaryArray","Array","ArrayAccessor","ArrayRef","ArrowPrimitiveType","BinaryArray","BooleanArray","Date32Array","Date64Array","Decimal128Array","Decimal256Array","DictionaryArray","DurationMicrosecondArray","DurationMillisecondArray","DurationNanosecondArray","DurationSecondArray","FixedSizeBinaryArray","FixedSizeListArray","Float16Array","Float32Array","Float64Array","GenericBinaryArray","GenericByteArray","GenericListArray","GenericStringArray","IS_LARGE","Int16Array","Int16DictionaryArray","Int16RunArray","Int32Array","Int32DictionaryArray","Int32RunArray","Int64Array","Int64DictionaryArray","Int64RunArray","Int8Array","Int8DictionaryArray","IntervalDayTimeArray","IntervalMonthDayNanoArray","IntervalYearMonthArray","Item","LargeBinaryArray","LargeListArray","LargeStringArray","ListArray","MapArray","NativeAdapter","NullArray","OffsetSizeTrait","PREFIX","PrimitiveArray","RunArray","StringArray","StructArray","Time32MillisecondArray","Time32SecondArray","Time64MicrosecondArray","Time64NanosecondArray","TimestampMicrosecondArray","TimestampMillisecondArray","TimestampNanosecondArray","TimestampSecondArray","TypedDictionaryArray","TypedRunArray","UInt16Array","UInt16DictionaryArray","UInt32Array","UInt32DictionaryArray","UInt64Array","UInt64DictionaryArray","UInt8Array","UInt8DictionaryArray","UnionArray","alloc","as_any","as_any","as_any_dictionary_opt","as_any_dictionary_opt","as_boolean_opt","as_boolean_opt","as_bytes_opt","as_bytes_opt","as_dictionary_opt","as_dictionary_opt","as_fixed_size_binary_opt","as_fixed_size_binary_opt","as_fixed_size_list_opt","as_fixed_size_list_opt","as_list_opt","as_list_opt","as_map_opt","as_map_opt","as_primitive_opt","as_primitive_opt","as_struct_opt","as_struct_opt","binary_array","boolean_array","byte_array","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","dictionary","dictionary_array","entries","eq","eq","fields","fields","fixed_size_binary_array","fixed_size_list_array","get","get","get_array_memory_size","get_array_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_offsets","into_data","into_data","is_empty","is_empty","is_null","is_null","is_nullable","is_nullable","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_valid","is_valid","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","len","len","len","len","len","len","list_array","logical_nulls","logical_nulls","make_array","map_array","native","new_empty_array","new_null_array","normalized_keys","null_array","null_count","null_count","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","offset","offset","offsets","phantom","primitive_array","print_long_array","ptr","run_array","run_array","run_ends","run_ends","run_ends","run_ends","slice","slice","string_array","struct_array","to_data","to_data","type_ids","union_array","value","value_data","value_data","value_data","value_data","value_data","value_data","value_data","value_data","value_length","value_length","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_offsets","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","with_values","BinaryArray","GenericBinaryArray","LargeBinaryArray","data_type","data_type","data_type","eq","from","from","from","from","from_list","from_opt_vec","from_vec","get_data_type","nulls","nulls","nulls","take_iter","take_iter_unchecked","value_data","value_data","value_data","value_offsets","value_offsets","value_offsets","BooleanArray","as_any","borrow","borrow_mut","builder","cast","clone","clone_into","data_type","eq","false_count","fmt","from","from","from","from","from","from_binary","from_cast","from_iter","from_unary","get","get_array_memory_size","get_buffer_memory_size","into","into_data","into_iter","is_empty","is_empty","iter","len","len","new","new_null","new_scalar","nulls","nulls","offset","slice","slice","take_iter","take_iter_unchecked","to_data","to_owned","true_count","try_from","try_into","type_id","value","value","value_unchecked","value_unchecked","values","values","DATA_TYPE","GenericByteArray","as_any","borrow","borrow_mut","cast","clone","clone_into","data_type","data_type","fmt","from","from","from_cast","from_iter","from_iter","from_iter_values","from_list","from_opt_vec","from_vec","get","get_array_memory_size","get_buffer_memory_size","get_data_type","get_data_type","into","into_builder","into_data","into_iter","into_parts","is_ascii","is_empty","iter","len","new","new_null","new_scalar","new_unchecked","nulls","nulls","num_chars","offset","offsets","slice","slice","take_iter","take_iter","take_iter_unchecked","take_iter_unchecked","to_data","to_owned","try_from","try_from_binary","try_into","try_new","type_id","value","value","value_data","value_data","value_length","value_offsets","value_offsets","value_unchecked","value_unchecked","values","AnyDictionaryArray","DictionaryArray","Int16DictionaryArray","Int32DictionaryArray","Int64DictionaryArray","Int8DictionaryArray","TypedDictionaryArray","UInt16DictionaryArray","UInt32DictionaryArray","UInt64DictionaryArray","UInt8DictionaryArray","as_any","as_any","borrow","borrow","borrow_mut","borrow_mut","cast","cast","clone","clone","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","dictionary","downcast_dict","eq","fmt","fmt","from","from","from","from_cast","from_cast","from_iter","from_iter","get","get","get_array_memory_size","get_array_memory_size","get_buffer_memory_size","get_buffer_memory_size","into","into","into_data","into_data","into_iter","into_parts","into_primitive_dict_builder","is_empty","is_empty","is_empty","is_nullable","is_nullable","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","is_ordered","key","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys","keys_iter","len","len","len","logical_nulls","logical_nulls","lookup_key","new","new_unchecked","normalized_keys","normalized_keys","nulls","nulls","occupancy","offset","offset","slice","slice","slice","to_data","to_data","to_owned","to_owned","try_from","try_from","try_into","try_into","try_new","type_id","type_id","unary_mut","value","value_type","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","with_values","with_values","with_values","FixedSizeBinaryArray","as_any","borrow","borrow_mut","cast","clone","clone_into","data_type","data_type","eq","fmt","from","from","from","from","from","from_cast","get","get_array_memory_size","get_buffer_memory_size","into","into_data","into_iter","into_parts","is_empty","iter","len","len","new","new_null","nulls","nulls","offset","slice","slice","to_data","to_owned","try_from","try_from_iter","try_from_sparse_iter","try_from_sparse_iter_with_size","try_into","try_new","type_id","value","value","value_data","value_data","value_length","value_length","value_offset","value_offset_at","value_unchecked","value_unchecked","FixedSizeListArray","as_any","borrow","borrow_mut","cast","clone","clone_into","data_type","data_type","eq","fmt","from","from","from_cast","from_iter_primitive","get","get_array_memory_size","get_buffer_memory_size","into","into_data","into_parts","is_empty","iter","len","len","new","new_null","nulls","nulls","offset","slice","slice","to_data","to_owned","try_from","try_into","try_new","type_id","value","value","value","value_length","value_length","value_offset","value_offset_at","value_type","value_unchecked","value_unchecked","values","values","DATA_TYPE_CONSTRUCTOR","GenericListArray","IS_LARGE","LargeListArray","ListArray","OffsetSizeTrait","PREFIX","as_any","borrow","borrow_mut","cast","clone","clone_into","data_type","data_type","data_type","data_type","eq","fmt","from","from","from","from","from_cast","from_iter_primitive","get","get_array_memory_size","get_buffer_memory_size","get_type","into","into_data","into_parts","is_empty","iter","len","new","new_null","nulls","nulls","nulls","nulls","offset","offsets","slice","slice","to_data","to_owned","try_from","try_into","try_new","try_new_from_array_data","type_id","value","value","value_length","value_offsets","value_offsets","value_offsets","value_offsets","value_type","value_unchecked","value_unchecked","values","values","values","values","MapArray","as_any","borrow","borrow_mut","cast","clone","clone_into","data_type","data_type","entries","entries","eq","fmt","from","from","from_cast","get","get_array_memory_size","get_buffer_memory_size","into","into_data","into_parts","is_empty","iter","key_type","keys","len","new","new_from_strings","nulls","nulls","offset","offsets","slice","slice","to_data","to_owned","try_from","try_into","try_new","try_new_from_array_data","type_id","value","value","value_length","value_offsets","value_offsets","value_type","value_unchecked","value_unchecked","values","NullArray","as_any","borrow","borrow_mut","builder","cast","clone","clone_into","data_type","eq","fmt","from","from","from_cast","get","get_array_memory_size","get_buffer_memory_size","into","into_data","is_empty","is_nullable","len","len","logical_nulls","new","nulls","offset","slice","slice","to_data","to_owned","try_from","try_into","type_id","ArrowPrimitiveType","Date32Array","Date64Array","Decimal128Array","Decimal256Array","DurationMicrosecondArray","DurationMillisecondArray","DurationNanosecondArray","DurationSecondArray","Float16Array","Float32Array","Float64Array","Int16Array","Int32Array","Int64Array","Int8Array","IntervalDayTimeArray","IntervalMonthDayNanoArray","IntervalYearMonthArray","NativeAdapter","PrimitiveArray","Time32MillisecondArray","Time32SecondArray","Time64MicrosecondArray","Time64NanosecondArray","TimestampMicrosecondArray","TimestampMillisecondArray","TimestampNanosecondArray","TimestampSecondArray","UInt16Array","UInt32Array","UInt64Array","UInt8Array","as_any","assert_compatible","borrow","borrow","borrow_mut","borrow_mut","builder","cast","cast","clone","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","def_from_for_primitive","def_numeric_from_vec","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_iter","from_iter_values","from_opt_vec","from_trusted_len_iter","from_value","from_vec","get","get_array_memory_size","get_buffer_memory_size","into","into","into_builder","into_data","into_iter","into_parts","is_compatible","is_empty","is_empty","iter","len","len","native","new","new_null","new_scalar","null_if_overflow_precision","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","nulls","offset","precision","reinterpret_cast","scale","slice","slice","take_iter","take_iter_unchecked","timezone","to_data","to_owned","try_from","try_from","try_into","try_into","try_new","try_unary","try_unary_mut","type_id","type_id","unary","unary_mut","unary_opt","validate_decimal_precision","value","value","value_as_date","value_as_datetime","value_as_datetime_with_tz","value_as_duration","value_as_string","value_as_time","value_unchecked","value_unchecked","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","values","with_data_type","with_precision_and_scale","with_timezone","with_timezone_opt","with_timezone_utc","Int16RunArray","Int32RunArray","Int64RunArray","RunArray","TypedRunArray","as_any","as_any","borrow","borrow","borrow_mut","borrow_mut","cast","cast","clone","clone","clone_into","clone_into","data_type","data_type","data_type","data_type","data_type","data_type","downcast","fmt","fmt","from","from","from","from_cast","from_cast","from_iter","from_iter","get","get","get_array_memory_size","get_array_memory_size","get_buffer_memory_size","get_buffer_memory_size","get_end_physical_index","get_physical_index","get_physical_indices","get_start_physical_index","into","into","into_data","into_data","into_iter","is_empty","is_empty","is_nullable","is_nullable","len","len","logical_len","logical_nulls","logical_nulls","nulls","nulls","offset","offset","run_array","run_array","run_ends","run_ends","run_ends","run_ends","run_ends","run_ends","slice","slice","slice","to_data","to_data","to_owned","to_owned","try_from","try_from","try_into","try_into","try_new","type_id","type_id","value","value_unchecked","values","values","values","values","values","values","values","GenericStringArray","LargeStringArray","StringArray","data_type","data_type","data_type","eq","from","from","from","from","from","from","get_data_type","nulls","nulls","nulls","num_chars","take_iter","take_iter_unchecked","try_from_binary","value_data","value_data","value_data","value_offsets","value_offsets","value_offsets","StructArray","as_any","borrow","borrow_mut","cast","clone","clone_into","column","column_by_name","column_names","columns","columns_ref","data_type","data_type","eq","fields","fields","fmt","from","from","from","from","from","from_cast","get","get_array_memory_size","get_buffer_memory_size","index","into","into_data","into_parts","is_empty","len","len","new","new_null","new_unchecked","nulls","nulls","num_columns","offset","slice","slice","to_data","to_owned","try_from","try_from","try_into","try_new","type_id","UnionArray","as_any","borrow","borrow_mut","cast","child","clone","clone_into","data_type","data_type","fields","fmt","from","from","from_cast","get","get_array_memory_size","get_buffer_memory_size","into","into_data","is_dense","is_empty","is_null","is_valid","len","new_unchecked","null_count","nulls","offset","offsets","offsets","slice","slice","to_data","to_owned","try_from","try_into","try_new","type_id","type_id","type_ids","type_ids","type_names","value","value_offset","ArrayBuilder","BinaryBuilder","BinaryDictionaryBuilder","BinaryRunBuilder","BooleanBufferBuilder","BooleanBuilder","BufferBuilder","Date32BufferBuilder","Date32Builder","Date64BufferBuilder","Date64Builder","Decimal128BufferBuilder","Decimal128Builder","Decimal256BufferBuilder","Decimal256Builder","DurationMicrosecondBufferBuilder","DurationMicrosecondBuilder","DurationMillisecondBufferBuilder","DurationMillisecondBuilder","DurationNanosecondBufferBuilder","DurationNanosecondBuilder","DurationSecondBufferBuilder","DurationSecondBuilder","FixedSizeBinaryBuilder","FixedSizeListBuilder","Float16BufferBuilder","Float16Builder","Float32BufferBuilder","Float32Builder","Float64BufferBuilder","Float64Builder","GenericBinaryBuilder","GenericByteBuilder","GenericByteDictionaryBuilder","GenericByteRunBuilder","GenericListBuilder","GenericStringBuilder","Int16BufferBuilder","Int16Builder","Int32BufferBuilder","Int32Builder","Int64BufferBuilder","Int64Builder","Int8BufferBuilder","Int8Builder","IntervalDayTimeBufferBuilder","IntervalDayTimeBuilder","IntervalMonthDayNanoBufferBuilder","IntervalMonthDayNanoBuilder","IntervalYearMonthBufferBuilder","IntervalYearMonthBuilder","LargeBinaryBuilder","LargeBinaryDictionaryBuilder","LargeBinaryRunBuilder","LargeListBuilder","LargeStringBuilder","LargeStringDictionaryBuilder","LargeStringRunBuilder","ListBuilder","MapBuilder","MapFieldNames","NullBuilder","PrimitiveBuilder","PrimitiveDictionaryBuilder","PrimitiveRunBuilder","StringBuilder","StringDictionaryBuilder","StringRunBuilder","StructBuilder","Time32MillisecondBufferBuilder","Time32MillisecondBuilder","Time32SecondBufferBuilder","Time32SecondBuilder","Time64MicrosecondBufferBuilder","Time64MicrosecondBuilder","Time64NanosecondBufferBuilder","Time64NanosecondBuilder","TimestampMicrosecondBufferBuilder","TimestampMicrosecondBuilder","TimestampMillisecondBufferBuilder","TimestampMillisecondBuilder","TimestampNanosecondBufferBuilder","TimestampNanosecondBuilder","TimestampSecondBufferBuilder","TimestampSecondBuilder","UInt16BufferBuilder","UInt16Builder","UInt32BufferBuilder","UInt32Builder","UInt64BufferBuilder","UInt64Builder","UInt8BufferBuilder","UInt8Builder","UnionBuilder","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","advance","advance","append","append","append_buffer","append_n","append_n","append_n_zeroed","append_null","append_packed_range","append_slice","append_slice","append_trusted_len_iter","as_any","as_any_mut","as_mut_any","as_slice","as_slice","as_slice_mut","as_slice_mut","boolean_builder","borrow","borrow","borrow_mut","borrow_mut","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer_builder","capacity","capacity","cast","cast","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_value","current_value","current_value","current_value","current_value","current_value","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","dedup","dedup","dedup","dedup","dedup","default","entry","extend","field_builders","field_names","fields","fields","finish","finish","finish","finish","finish_cloned","finish_cloned","fixed_size_binary_builder","fixed_size_list_builder","fmt","fmt","from","from","from","from_cast","from_cast","from_iter","generic_byte_run_builder","generic_bytes_builder","generic_bytes_dictionary_builder","generic_list_builder","get_bit","has_current_value","has_current_value","has_current_value","has_current_value","has_current_value","initial_capacity","into","into","into_box_any","is_empty","is_empty","is_empty","key","key_builder","keys_builder","keys_builder","keys_builder","keys_builder","keys_builder","keys_builder","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","list_len","make_builder","map","map_builder","new","new","new_from_buffer","new_from_buffer","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","offsets_builder","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","primitive_builder","primitive_dictionary_builder","primitive_run_builder","reserve","reserve","resize","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","set_bit","state","state","state","state","state","struct_builder","truncate","truncate","try_from","try_from","try_into","try_into","type_id","type_id","type_id_builder","union_builder","value","value_builder","value_builder","value_builder","value_builder","value_builder","value_builder","value_builder","value_builder","value_length","value_offset_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","BooleanBuilder","append_null","append_nulls","append_option","append_slice","append_value","append_values","as_any","as_any_mut","borrow","borrow_mut","capacity","cast","default","extend","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","into","into_box_any","len","new","null_buffer_builder","try_from","try_into","type_id","validity_slice","values_builder","with_capacity","BufferBuilder","Date32BufferBuilder","Date64BufferBuilder","Decimal128BufferBuilder","Decimal256BufferBuilder","DurationMicrosecondBufferBuilder","DurationMillisecondBufferBuilder","DurationNanosecondBufferBuilder","DurationSecondBufferBuilder","Float16BufferBuilder","Float32BufferBuilder","Float64BufferBuilder","Int16BufferBuilder","Int32BufferBuilder","Int64BufferBuilder","Int8BufferBuilder","IntervalDayTimeBufferBuilder","IntervalMonthDayNanoBufferBuilder","IntervalYearMonthBufferBuilder","Time32MillisecondBufferBuilder","Time32SecondBufferBuilder","Time64MicrosecondBufferBuilder","Time64NanosecondBufferBuilder","TimestampMicrosecondBufferBuilder","TimestampMillisecondBufferBuilder","TimestampNanosecondBufferBuilder","TimestampSecondBufferBuilder","UInt16BufferBuilder","UInt32BufferBuilder","UInt64BufferBuilder","UInt8BufferBuilder","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","buffer","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","FixedSizeBinaryBuilder","append_null","append_value","as_any","as_any_mut","borrow","borrow_mut","cast","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","into","into_box_any","len","new","null_buffer_builder","try_from","try_into","type_id","value_length","values_builder","with_capacity","FixedSizeListBuilder","append","as_any","as_any_mut","borrow","borrow_mut","cast","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","into","into_box_any","len","list_len","new","null_buffer_builder","try_from","try_into","type_id","value_length","values","values_builder","with_capacity","BinaryRunBuilder","GenericByteRunBuilder","LargeBinaryRunBuilder","LargeStringRunBuilder","StringRunBuilder","append_null","append_option","append_run_end","append_run_end_with_builders","append_value","as_any","as_any_mut","borrow","borrow_mut","cast","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_run_end_index","current_value","current_value","current_value","current_value","current_value","default","extend","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","has_current_value","has_current_value","has_current_value","has_current_value","has_current_value","into","into_box_any","len","new","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","prev_run_end_index","run_end_index_as_native","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","run_ends_builder","try_from","try_into","type_id","values_builder","values_builder","values_builder","values_builder","values_builder","with_capacity","GenericBinaryBuilder","GenericByteBuilder","GenericStringBuilder","append_null","append_option","append_value","as_any","as_any_mut","borrow","borrow_mut","cast","default","extend","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","into","into_box_any","len","new","new_from_buffer","next_offset","null_buffer_builder","null_buffer_builder","null_buffer_builder","offsets_builder","offsets_builder","offsets_builder","offsets_slice","try_from","try_into","type_id","validity_slice","validity_slice_mut","value_builder","value_builder","value_builder","values_slice","with_capacity","write_str","BinaryDictionaryBuilder","GenericByteDictionaryBuilder","LargeBinaryDictionaryBuilder","LargeStringDictionaryBuilder","StringDictionaryBuilder","append","append_null","append_option","append_value","as_any","as_any_mut","borrow","borrow_mut","cast","dedup","dedup","dedup","dedup","dedup","default","extend","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","get_bytes","into","into_box_any","keys_builder","keys_builder","keys_builder","keys_builder","keys_builder","len","new","new_with_dictionary","state","state","state","state","state","try_from","try_into","type_id","values_builder","values_builder","values_builder","values_builder","values_builder","with_capacity","GenericListBuilder","append","append_null","append_option","append_value","as_any","as_any_mut","borrow","borrow_mut","cast","default","extend","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","into","into_box_any","len","new","next_offset","null_buffer_builder","offsets_builder","offsets_slice","try_from","try_into","type_id","values","values_builder","values_ref","with_capacity","MapBuilder","MapFieldNames","append","as_any","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","cast","cast","clone","clone_into","default","entry","field_names","finish","finish","finish_cloned","finish_cloned","finish_helper","fmt","fmt","from","from","from_cast","from_cast","into","into","into_box_any","key","key_builder","keys","len","new","null_buffer_builder","offsets_builder","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","value_builder","values","with_capacity","NullBuilder","append_empty_value","append_empty_values","append_null","append_nulls","as_any","as_any_mut","borrow","borrow_mut","capacity","cast","default","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","into","into_box_any","len","len","new","try_from","try_into","type_id","with_capacity","Date32Builder","Date64Builder","Decimal128Builder","Decimal256Builder","DurationMicrosecondBuilder","DurationMillisecondBuilder","DurationNanosecondBuilder","DurationSecondBuilder","Float16Builder","Float32Builder","Float64Builder","Int16Builder","Int32Builder","Int64Builder","Int8Builder","IntervalDayTimeBuilder","IntervalMonthDayNanoBuilder","IntervalYearMonthBuilder","PrimitiveBuilder","Time32MillisecondBuilder","Time32SecondBuilder","Time64MicrosecondBuilder","Time64NanosecondBuilder","TimestampMicrosecondBuilder","TimestampMillisecondBuilder","TimestampNanosecondBuilder","TimestampSecondBuilder","UInt16Builder","UInt32Builder","UInt64Builder","UInt8Builder","append_null","append_nulls","append_option","append_slice","append_trusted_len_iter","append_value","append_values","as_any","as_any_mut","borrow","borrow_mut","capacity","cast","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","data_type","default","extend","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","into","into_box_any","len","new","new_from_buffer","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","null_buffer_builder","slices_mut","try_from","try_into","type_id","validity_slice","validity_slice_mut","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_builder","values_slice","values_slice_mut","with_capacity","with_data_type","with_precision_and_scale","with_timezone","with_timezone_opt","PrimitiveDictionaryBuilder","Value","append","append_null","append_option","append_value","as_any","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","cast","cast","default","eq","equivalent","equivalent","extend","finish","finish","finish_cloned","finish_cloned","fmt","fmt","from","from","from_cast","from_cast","hash","into","into","into_box_any","keys_builder","len","map","new","new_from_builders","new_from_empty_builders","try_from","try_from","try_into","try_into","type_id","type_id","values_builder","values_slice","values_slice_mut","with_capacity","PrimitiveRunBuilder","append_null","append_option","append_run_end","append_run_end_with_builders","append_value","as_any","as_any_mut","borrow","borrow_mut","cast","current_run_end_index","current_value","default","extend","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","into","into_box_any","len","new","prev_run_end_index","run_end_index_as_native","run_ends_builder","try_from","try_into","type_id","values_builder","with_capacity","StructBuilder","append","append_null","as_any","as_any_mut","borrow","borrow_mut","cast","field_builder","field_builders","fields","finish","finish","finish_cloned","finish_cloned","fmt","from","from_cast","from_fields","into","into_box_any","len","make_builder","new","null_buffer_builder","num_fields","try_from","try_into","type_id","validate_content","FieldData","FieldDataValues","UnionBuilder","append","append_null","append_null","append_null","append_option","append_value","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","build","cast","cast","data_type","fields","finish","fmt","fmt","from","from","from_cast","from_cast","initial_capacity","into","into","len","new","new_dense","new_sparse","null_buffer_builder","slots","try_from","try_from","try_into","try_into","type_id","type_id","type_id","type_id_builder","value_offset_builder","values_buffer","with_capacity_dense","with_capacity_sparse","AsArray","array_downcast_fn","as_any_dictionary","as_any_dictionary_opt","as_binary","as_binary_opt","as_boolean","as_boolean_array","as_boolean_opt","as_bytes","as_bytes_opt","as_decimal_array","as_dictionary","as_dictionary_array","as_dictionary_opt","as_fixed_size_binary","as_fixed_size_binary_opt","as_fixed_size_list","as_fixed_size_list_array","as_fixed_size_list_opt","as_generic_binary_array","as_generic_list_array","as_large_list_array","as_largestring_array","as_list","as_list_array","as_list_opt","as_map","as_map_array","as_map_opt","as_null_array","as_primitive","as_primitive_array","as_primitive_opt","as_run_array","as_string","as_string_array","as_string_opt","as_struct","as_struct_array","as_struct_opt","as_union_array","downcast_array","private","Sealed","add_days_datetime","add_months_datetime","shift_months","sub_days_datetime","sub_months_datetime","ArrayIter","BooleanIter","FixedSizeBinaryIter","FixedSizeListIter","GenericBinaryIter","GenericListArrayIter","GenericStringIter","MapArrayIter","PrimitiveIter","array","array","array","array","array","array","array","array","array","borrow","borrow_mut","cast","current","current","current","current","current","current","current","current","current","current_end","current_end","current_end","current_end","current_end","current_end","current_end","current_end","current_end","fmt","from","from_cast","into","into_iter","is_null","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","logical_nulls","new","next","next_back","size_hint","try_from","try_into","type_id","ArrowNumericType","Simd","SimdMask","bin_op","eq","ge","gt","init","lanes","le","load","lt","make_numeric_type","mask_any","mask_from_u64","mask_get","mask_init","mask_select","mask_set","mask_to_u64","ne","unary_op","write","RecordBatch","RecordBatchIterator","RecordBatchOptions","RecordBatchReader","RecordBatchWriter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","clone","clone_into","close","column","column_by_name","columns","columns","default","eq","fmt","fmt","from","from","from","from","from","from_cast","from_cast","from_cast","get_array_memory_size","index","inner","inner_schema","into","into","into","into_iter","match_field_names","new","new","new_empty","next","next_batch","next_batch","num_columns","num_rows","project","row_count","row_count","schema","schema","schema","schema","size_hint","slice","to_owned","try_from","try_from","try_from","try_from_iter","try_from_iter_with_nullable","try_into","try_into","try_into","try_new","try_new_impl","try_new_with_options","type_id","type_id","type_id","with_match_field_names","with_row_count","with_schema","write","RunArrayIter","array","borrow","borrow_mut","cast","current_back_logical","current_back_physical","current_front_logical","current_front_physical","fmt","from","from_cast","into","into_iter","new","next","next_back","size_hint","try_from","try_into","type_id","Datum","Scalar","borrow","borrow_mut","cast","clone","clone_into","fmt","from","from_cast","get","get","into","new","to_owned","try_from","try_into","type_id","EPOCH_DAYS_FROM_CE","MICROSECONDS","MICROSECONDS_IN_DAY","MILLISECONDS","MILLISECONDS_IN_DAY","NANOSECONDS","NANOSECONDS_IN_DAY","SECONDS_IN_DAY","as_date","as_datetime","as_datetime_with_timezone","as_duration","as_time","date32_to_datetime","date64_to_datetime","duration_ms_to_duration","duration_ns_to_duration","duration_s_to_duration","duration_us_to_duration","split_second","time32ms_to_time","time32s_to_time","time64ns_to_time","time64us_to_time","time_to_time32ms","time_to_time32s","time_to_time64ns","time_to_time64us","timestamp_ms_to_datetime","timestamp_ns_to_datetime","timestamp_s_to_datetime","timestamp_us_to_datetime","Tz","TzOffset","offset","parse_fixed_offset","private","tz","Offset","Timezone","Tz","TzInner","TzOffset","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","clone","clone","clone","clone_into","clone_into","clone_into","fix","fmt","fmt","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","from_offset","from_str","into","into","into","offset","offset_from_local_date","offset_from_local_datetime","offset_from_utc_date","offset_from_utc_datetime","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","tz","tz","trusted_len_unzip","ArrowDictionaryKeyType","ArrowPrimitiveType","ArrowTemporalType","ArrowTimestampType","BYTE_LENGTH","BinaryType","BooleanType","ByteArrayType","DATA_TYPE","DATA_TYPE","DATA_TYPE","DEFAULT_TYPE","Date32Type","Date64Type","Decimal128Type","Decimal256Type","DecimalType","DurationMicrosecondType","DurationMillisecondType","DurationNanosecondType","DurationSecondType","Float16Type","Float32Type","Float64Type","GenericBinaryType","GenericStringType","Int16Type","Int32Type","Int64Type","Int8Type","IntervalDayTimeType","IntervalMonthDayNanoType","IntervalYearMonthType","LargeBinaryType","LargeUtf8Type","MAX_PRECISION","MAX_SCALE","Native","Native","Offset","PREFIX","PREFIX","RunEndIndexType","TYPE_CONSTRUCTOR","Time32MillisecondType","Time32SecondType","Time64MicrosecondType","Time64NanosecondType","TimestampMicrosecondType","TimestampMillisecondType","TimestampNanosecondType","TimestampSecondType","UInt16Type","UInt32Type","UInt64Type","UInt8Type","UNIT","Utf8Type","add_day_time","add_day_time","add_day_time","add_day_time","add_day_time","add_day_time","add_day_time","add_month_day_nano","add_month_day_nano","add_month_day_nano","add_month_day_nano","add_month_day_nano","add_month_day_nano","add_month_day_nano","add_year_months","add_year_months","add_year_months","add_year_months","add_year_months","add_year_months","add_year_months","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","bin_op","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","decimal","default_value","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_decimal","format_decimal","format_decimal","format_decimal_str","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_naive_date","from_naive_date","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","ge","get_byte_width","get_time_unit","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","gt","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","le","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","load","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","lt","make_type","make_value","make_value","make_value","make_value","make_value","make_value","make_value","make_value","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_any","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_from_u64","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_get","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_init","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_select","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_set","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","mask_to_u64","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","phantom","phantom","phantom","phantom","phantom","phantom","primitive","subtract_day_time","subtract_day_time","subtract_day_time","subtract_day_time","subtract_day_time","subtract_day_time","subtract_day_time","subtract_month_day_nano","subtract_month_day_nano","subtract_month_day_nano","subtract_month_day_nano","subtract_month_day_nano","subtract_month_day_nano","subtract_month_day_nano","subtract_year_months","subtract_year_months","subtract_year_months","subtract_year_months","subtract_year_months","subtract_year_months","subtract_year_months","to_months","to_naive_date","to_naive_date","to_parts","to_parts","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","unary_op","validate","validate","validate","validate_decimal_precision","validate_decimal_precision","validate_decimal_precision","validate_decimal_precision_and_scale","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","ByteArrayNativeType","ByteArrayTypeSealed","from_bytes_unchecked","DecimalTypeSealed","PrimitiveTypeSealed"],"q":[[0,"arrow_array"],[82,"arrow_array::arithmetic"],[114,"arrow_array::array"],[482,"arrow_array::array::binary_array"],[508,"arrow_array::array::boolean_array"],[562,"arrow_array::array::byte_array"],[628,"arrow_array::array::dictionary_array"],[767,"arrow_array::array::fixed_size_binary_array"],[821,"arrow_array::array::fixed_size_list_array"],[871,"arrow_array::array::list_array"],[937,"arrow_array::array::map_array"],[988,"arrow_array::array::null_array"],[1022,"arrow_array::array::primitive_array"],[1312,"arrow_array::array::run_array"],[1404,"arrow_array::array::string_array"],[1431,"arrow_array::array::struct_array"],[1481,"arrow_array::array::union_array"],[1526,"arrow_array::builder"],[2007,"arrow_array::builder::boolean_builder"],[2040,"arrow_array::builder::buffer_builder"],[2164,"arrow_array::builder::fixed_size_binary_builder"],[2190,"arrow_array::builder::fixed_size_list_builder"],[2217,"arrow_array::builder::generic_byte_run_builder"],[2280,"arrow_array::builder::generic_bytes_builder"],[2324,"arrow_array::builder::generic_bytes_dictionary_builder"],[2377,"arrow_array::builder::generic_list_builder"],[2411,"arrow_array::builder::map_builder"],[2459,"arrow_array::builder::null_builder"],[2487,"arrow_array::builder::primitive_builder"],[2651,"arrow_array::builder::primitive_dictionary_builder"],[2700,"arrow_array::builder::primitive_run_builder"],[2734,"arrow_array::builder::struct_builder"],[2764,"arrow_array::builder::union_builder"],[2811,"arrow_array::cast"],[2855,"arrow_array::cast::private"],[2856,"arrow_array::delta"],[2861,"arrow_array::iterator"],[2922,"arrow_array::numeric"],[2945,"arrow_array::record_batch"],[3023,"arrow_array::run_iterator"],[3044,"arrow_array::scalar"],[3062,"arrow_array::temporal_conversions"],[3094,"arrow_array::timezone"],[3100,"arrow_array::timezone::private"],[3156,"arrow_array::trusted_len"],[3157,"arrow_array::types"],[4194,"arrow_array::types::bytes"],[4197,"arrow_array::types::decimal"],[4198,"arrow_array::types::primitive"],[4199,"arrow_schema::error"],[4200,"core::result"],[4201,"core::ops::function"],[4202,"core::cmp"],[4203,"arrow_schema::schema"],[4204,"core::any"],[4205,"core::option"],[4206,"arrow_schema::datatype"],[4207,"arrow_data::data"],[4208,"arrow_buffer::native"],[4209,"arrow_buffer::buffer::offset"],[4210,"arrow_buffer::buffer::null"],[4211,"alloc::vec"],[4212,"core::fmt"],[4213,"core::fmt"],[4214,"arrow_buffer::buffer::boolean"],[4215,"core::ops::function"],[4216,"core::any"],[4217,"core::convert"],[4218,"core::marker"],[4219,"core::marker"],[4220,"core::fmt"],[4221,"arrow_buffer::bigint"],[4222,"alloc::string"],[4223,"arrow_buffer::buffer::scalar"],[4224,"chrono::naive::date"],[4225,"chrono::naive::datetime"],[4226,"chrono::datetime"],[4227,"chrono::duration"],[4228,"chrono::naive::time"],[4229,"alloc::sync"],[4230,"core::convert"],[4231,"arrow_schema::fields"],[4232,"core::ops::range"],[4233,"core::fmt"],[4234,"alloc::boxed"],[4235,"arrow_buffer::buffer::mutable"],[4236,"core::iter::traits::collect"],[4237,"arrow_buffer::native"],[4238,"core::convert"],[4239,"chrono::traits"],[4240,"chrono::month"],[4241,"core::ops::arith"],[4242,"core::ops::arith"],[4243,"chrono::offset::fixed"],[4244,"chrono::offset"]],"d":["Trait for <code>ArrowNativeType</code> that adds checked and unchecked …","A subtype of primitive type that represents numeric values.","A possibly <code>Scalar</code> <code>Array</code>","The multiplicative identity","A two-dimensional batch of column-oriented data with a …","Generic implementation of RecordBatchReader that wraps an …","Options that control the behaviour used when creating a …","Trait for types that can read <code>RecordBatch</code>’s.","Trait for types that can write <code>RecordBatch</code>’s.","A wrapper around a single value <code>Array</code> that implements <code>Datum</code>…","Defines the SIMD type that should be used for this numeric …","Defines the SIMD Mask type that should be used for this …","The additive identity","Checked addition operation","Wrapping addition operation","","The concrete array definitions","Performs a SIMD binary operation","Defines push-based APIs for constructing arrays","Defines helper functions for downcasting <code>dyn Array</code> to …","Write footer or termination data, then mark the writer as …","","Compare operation","Contains utility functions for shifting Date objects.","Checked division operation","Wrapping division operation","Downcast an <code>Array</code> to a <code>DictionaryArray</code> based on its …","Given one or more expressions evaluating to an integer …","Given one or more expressions evaluating to primitive …","Downcast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>","Downcast an <code>Array</code> to a <code>RunArray</code> based on its <code>DataType</code>, …","Given one or more expressions evaluating to an integer …","Given one or more expressions evaluating to primitive …","Downcast an <code>Array</code> to a temporal <code>PrimitiveArray</code> based on …","SIMD version of equal","SIMD version of greater than or equal to","Returns the value for this <code>Datum</code> and a boolean indicating …","SIMD version of greater than","Initializes a SIMD register to a constant value","","","Equality operation","Returns true if zero else false","Idiomatic iterators for <code>Array</code>","The number of SIMD lanes available","SIMD version of less than or equal to","Loads a slice into a SIMD register","SIMD version of less than","Returns <code>true</code> if any of the lanes in the mask are <code>true</code>","Creates a new SIMD mask for this SIMD type from the …","Gets the value of a single lane in a SIMD mask","Creates a new SIMD mask for this SIMD type filling it with …","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Sets the value of a single lane of a SIMD mask","Creates a bitmask from the given SIMD mask. Each bit …","Match field names of structs and lists. If set to <code>true</code>, …","Checked remainder operation","Wrapping remainder operation","Checked multiplication operation","Wrapping multiplication operation","SIMD version of not equal","Checked negation operation","Wrapping negation operation","","Checked exponentiation operation","Wrapping exponentiation operation","A two-dimensional batch of column-oriented data with a …","The number of rows in this RecordBatch","Optional row count, useful for specifying a row count for …","Idiomatic iterator for <code>RunArray</code>","","Returns the schema of this <code>RecordBatchReader</code>.","","Checked subtraction operation","Wrapping subtraction operation","Conversion methods for dates and times.","Timezone for timestamp arrays","","Zero-sized types used to parameterize generic array …","Performs a SIMD unary operation","Write a single batch to the writer.","Writes a SIMD result back to a slice","Trait for <code>ArrowNativeType</code> that adds checked and unchecked …","The multiplicative identity","The additive identity","Checked addition operation","Wrapping addition operation","Compare operation","Checked division operation","Wrapping division operation","Equality operation","Greater than equals operation","Greater than equals operation","Greater than operation","Greater than operation","Less than equals operation","Less than equals operation","Less than operation","Less than operation","Not equal operation","Not equal operation","Returns true if zero else false","Checked remainder operation","Wrapping remainder operation","Checked multiplication operation","Wrapping multiplication operation","","","Checked negation operation","Wrapping negation operation","Checked exponentiation operation","Wrapping exponentiation operation","Checked subtraction operation","Wrapping subtraction operation","A <code>DictionaryArray</code> with the key type erased","An array in the arrow columnar format","A generic trait for accessing the values of an <code>Array</code>","A reference-counted reference to a generic <code>Array</code>","","A <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets","An array of boolean values","A <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>","A <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …","A <code>PrimitiveArray</code> of 128-bit fixed point decimals","A <code>PrimitiveArray</code> of 256-bit fixed point decimals","An array of dictionary encoded values","A <code>PrimitiveArray</code> of elapsed durations in microseconds","A <code>PrimitiveArray</code> of elapsed durations in milliseconds","A <code>PrimitiveArray</code> of elapsed durations in nanoseconds","A <code>PrimitiveArray</code> of elapsed durations in seconds","An array of fixed size binary arrays","An array of [fixed length lists], similar to JSON arrays …","A <code>PrimitiveArray</code> of <code>f16</code>","A <code>PrimitiveArray</code> of <code>f32</code>","A <code>PrimitiveArray</code> of <code>f64</code>","A <code>GenericBinaryArray</code> for storing <code>[u8]</code>","An array of variable length byte arrays","An array of variable length lists, similar to JSON arrays …","A <code>GenericByteArray</code> for storing <code>str</code>","True for 64 bit offset size and false for 32 bit offset …","A <code>PrimitiveArray</code> of <code>i16</code>","A <code>DictionaryArray</code> indexed by <code>i16</code>","A <code>RunArray</code> with <code>i16</code> run ends","A <code>PrimitiveArray</code> of <code>i32</code>","A <code>DictionaryArray</code> indexed by <code>i32</code>","A <code>RunArray</code> with <code>i32</code> run ends","A <code>PrimitiveArray</code> of <code>i64</code>","A <code>DictionaryArray</code> indexed by <code>i64</code>","A <code>RunArray</code> with <code>i64</code> run ends","A <code>PrimitiveArray</code> of <code>i8</code>","A <code>DictionaryArray</code> indexed by <code>i8</code>","A <code>PrimitiveArray</code> of “calendar” intervals in days and …","A <code>PrimitiveArray</code> of “calendar” intervals in  months, …","A <code>PrimitiveArray</code> of “calendar” intervals in months","The Arrow type of the element being accessed.","A <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets","A <code>GenericListArray</code> of variable size lists, storing offsets …","A <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets","A <code>GenericListArray</code> of variable size lists, storing offsets …","An array of key-value maps","An optional primitive value","An array of null values","A type that can be used within a variable-size array to …","Prefix for the offset size","An array of primitive values","An array of run-end encoded values","A <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets","An array of structs","A <code>PrimitiveArray</code> of milliseconds since midnight stored as …","A <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>","A <code>PrimitiveArray</code> of microseconds since midnight stored as …","A <code>PrimitiveArray</code> of nanoseconds since midnight stored as …","A <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …","A <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …","A <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …","A <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>","A <code>DictionaryArray</code> typed on its child values array","A <code>RunArray</code> typed typed on its child values array","A <code>PrimitiveArray</code> of <code>u16</code>","A <code>DictionaryArray</code> indexed by <code>u16</code>","A <code>PrimitiveArray</code> of <code>u32</code>","A <code>DictionaryArray</code> indexed by <code>u32</code>","A <code>PrimitiveArray</code> of <code>u64</code>","A <code>DictionaryArray</code> indexed by <code>u64</code>","A <code>PrimitiveArray</code> of <code>u8</code>","A <code>DictionaryArray</code> indexed by <code>u8</code>","An array of values of varying types","","Returns the array as <code>Any</code> so that it can be downcasted to a …","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the <code>DataType</code> of this array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The dictionary array","","The <code>StructArray</code> that is the direct child of this array","","","","","","","","","Returns the total number of bytes of memory occupied …","","Returns the total number of bytes of memory pointed to by …","","Helper function that gets offset from an <code>ArrayData</code>","Returns the underlying data of this array","","Returns whether this array is empty.","","Returns whether the element at <code>index</code> is null. When using …","","Returns <code>false</code> if the array is guaranteed to not contain …","","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Returns whether the element at <code>index</code> is not null. When …","","Returns the primitive keys of this dictionary as an <code>Array</code>","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","Returns the length (i.e., number of elements) of this …","","","","","","","Returns the logical null buffer of this array if any","","Constructs an array using the input <code>data</code>. Returns a …","","Corresponding Rust native type if available","Creates a new empty array","Creates a new array of <code>data_type</code> of length <code>length</code> filled …","Returns the keys of this dictionary as usize","Contains the <code>NullArray</code> type.","Returns the total number of physical null values in this …","","Returns the null buffer of this array if any","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the offset into the underlying data used by this …","","","","","Helper function for printing potentially long arrays.","","","The run array","","","","","Returns a zero-copy slice of this array with the indicated …","","","","Returns the underlying data of this array","","","","Returns the element at index <code>i</code>","","","","","","","","","","","","","","","","","","","","","The start and end offsets of each entry","Returns the element at index <code>i</code>","Returns the values of this dictionary","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","The values of the dictionary","","","","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","","","","","The values of the run_array","","","Create a new <code>DictionaryArray</code> replacing <code>values</code> with the new …","A <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i32</code> offsets","A <code>GenericBinaryArray</code> for storing <code>[u8]</code>","A <code>GenericBinaryArray</code> of <code>[u8]</code> using <code>i64</code> offsets","","","","","","","","","","Creates a GenericBinaryArray from a vector of Optional …","Creates a GenericBinaryArray from a vector of byte slices","Get the data type of the array.","","","","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","","","","","","","An array of boolean values","","","","Returns a new boolean array builder","","","","","","Returns the number of non null, false values within this …","","","","Returns the argument unchanged.","","","Create a <code>BooleanArray</code> by evaluating the binary operation …","","","Create a <code>BooleanArray</code> by evaluating the operation for each …","","","","Calls <code>U::from(self)</code>.","","","","Returns whether this array is empty.","constructs a new iterator","Returns the length of this array.","","Create a new <code>BooleanArray</code> from the provided values and …","Create a new <code>BooleanArray</code> with length <code>len</code> consisting only …","Create a new <code>Scalar</code> from <code>value</code>","","","","","Returns a zero-copy slice of this array with the indicated …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","","","Returns the number of non null, true values within this …","","","","Returns the boolean value at index <code>i</code>.","","Returns the boolean value at index <code>i</code>.","","Returns the underlying <code>BooleanBuffer</code> holding all the …","","Data type of the array.","An array of variable length byte arrays","","","","","","","","","","","Returns the argument unchanged.","","","","Creates a <code>GenericByteArray</code> based on an iterator of values …","","Creates a GenericBinaryArray from a vector of Optional …","Creates a GenericBinaryArray from a vector of byte slices","","","","Get the data type of the array.","Get the data type of the array.","Calls <code>U::from(self)</code>.","Returns <code>GenericByteBuilder</code> of this byte array for mutating …","","","Deconstruct this array into its constituent parts","Returns true if all data within this array is ASCII","","constructs a new iterator","","Create a new <code>GenericByteArray</code> from the provided parts, …","Create a new <code>GenericByteArray</code> of length <code>len</code> where all …","Create a new <code>Scalar</code> from <code>v</code>","Create a new <code>GenericByteArray</code> from the provided parts, …","","","Returns the number of <code>Unicode Scalar Value</code> in the string …","","Returns a reference to the offsets of this array","","Returns a zero-copy slice of this array with the indicated …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","","","","Fallibly creates a <code>GenericStringArray</code> from a …","","Create a new <code>GenericByteArray</code> from the provided parts, …","","","Returns the element at index <code>i</code>","Returns the raw value data","","Returns the length for value at index <code>i</code>.","Returns the offset values in the offsets buffer","","","Returns the element at index <code>i</code>","Returns the values of this array","A <code>DictionaryArray</code> with the key type erased","An array of dictionary encoded values","A <code>DictionaryArray</code> indexed by <code>i16</code>","A <code>DictionaryArray</code> indexed by <code>i32</code>","A <code>DictionaryArray</code> indexed by <code>i64</code>","A <code>DictionaryArray</code> indexed by <code>i8</code>","A <code>DictionaryArray</code> typed on its child values array","A <code>DictionaryArray</code> indexed by <code>u16</code>","A <code>DictionaryArray</code> indexed by <code>u32</code>","A <code>DictionaryArray</code> indexed by <code>u64</code>","A <code>DictionaryArray</code> indexed by <code>u8</code>","","","","","","","","","","","","","","","","","","","","","","","","The dictionary array","Downcast this dictionary to a <code>TypedDictionaryArray</code>","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Deconstruct this array into its constituent parts","Returns <code>PrimitiveDictionaryBuilder</code> of this dictionary …","","Whether this dictionary is empty","","","","Currently exists for compatibility purposes with Arrow IPC.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Values are ordered.","Return the value of <code>keys</code> (the dictionary key) at index <code>i</code>, …","Returns the primitive keys of this dictionary as an <code>Array</code>","Return an array view of the keys of this dictionary as a …","","Returns the keys of this <code>TypedDictionaryArray</code>","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","The keys of this dictionary. These are constructed from the","Return an iterator over the keys (indexes into the …","The length of the dictionary is the length of the keys …","","","","","If <code>value</code> is present in <code>values</code> (aka the dictionary), …","Attempt to create a new DictionaryArray with a specified …","Create a new <code>DictionaryArray</code> without performing validation","Returns the keys of this dictionary as usize","","","","Computes an occupancy mask for this dictionary’s values","","","Returns a zero-copy slice of this array with the indicated …","","","","","","","","","","","Attempt to create a new DictionaryArray with a specified …","","","Applies an unary and infallible function to a mutable …","","Returns a clone of the value type of this list.","","Returns the values of this dictionary","","Returns a reference to the dictionary values array","Returns the values of this <code>TypedDictionaryArray</code>","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","Array of dictionary values (can by any DataType).","The values of the dictionary","Create a new <code>DictionaryArray</code> replacing <code>values</code> with the new …","Returns a new dictionary with the same keys as the current …","","An array of fixed size binary arrays","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","Deconstruct this array into its constituent parts","","constructs a new iterator","","","Create a new <code>FixedSizeBinaryArray</code> with <code>size</code> element size, …","Create a new <code>FixedSizeBinaryArray</code> of length <code>len</code> where all …","","","","Returns a zero-copy slice of this array with the indicated …","","","","","Create an array from an iterable argument of byte slices.","Create an array from an iterable argument of sparse byte …","Create an array from an iterable argument of sparse byte …","","Create a new <code>FixedSizeBinaryArray</code> from the provided parts, …","","Returns the element at index <code>i</code> as a byte slice.","","Returns a clone of the value data buffer","","Returns the length for an element.","","Returns the offset for the element at index <code>i</code>.","","Returns the element at index <code>i</code> as a byte slice.","","An array of [fixed length lists], similar to JSON arrays …","","","","","","","","","","","Returns the argument unchanged.","","","Creates a <code>FixedSizeListArray</code> from an iterator of primitive …","","","","Calls <code>U::from(self)</code>.","","Deconstruct this array into its constituent parts","","constructs a new iterator","","","Create a new <code>FixedSizeListArray</code> with <code>size</code> element size, …","Create a new <code>FixedSizeListArray</code> of length <code>len</code> where all …","","","","","Returns a zero-copy slice of this array with the indicated …","","","","","Create a new <code>FixedSizeListArray</code> from the provided parts, …","","","","Returns ith value of this list array.","Returns the length for an element.","","Returns the offset for value at index <code>i</code>.","","Returns a clone of the value type of this list.","","","Returns a reference to the values of this list.","","The data type constructor of list array. The input is the …","An array of variable length lists, similar to JSON arrays …","True for 64 bit offset size and false for 32 bit offset …","A <code>GenericListArray</code> of variable size lists, storing offsets …","A <code>GenericListArray</code> of variable size lists, storing offsets …","A type that can be used within a variable-size array to …","Prefix for the offset size","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Creates a <code>GenericListArray</code> from an iterator of primitive …","","","","","Calls <code>U::from(self)</code>.","","Deconstruct this array into its constituent parts","","constructs a new iterator","","Create a new <code>GenericListArray</code> from the provided parts","Create a new <code>GenericListArray</code> of length <code>len</code> where all …","","","","","","Returns a reference to the offsets of this list","Returns a zero-copy slice of this array with the indicated …","","","","","","Create a new <code>GenericListArray</code> from the provided parts","","","Returns ith value of this list array.","","Returns the length for value at index <code>i</code>.","Returns the offset values in the offsets buffer","","","","Returns a clone of the value type of this list.","","Returns ith value of this list array.","Returns a reference to the values of this list","","","","An array of key-value maps","","","","","","","","","Returns a reference to the <code>StructArray</code> entries of this map","The <code>StructArray</code> that is the direct child of this array","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Deconstruct this array into its constituent parts","","constructs a new iterator","Returns the data type of the map’s keys.","Returns a reference to the keys of this map","","Create a new <code>MapArray</code> from the provided parts","Creates map array from provided keys, values and …","","","","Returns a reference to the offsets of this map","","Returns a zero-copy slice of this array with the indicated …","","","","","Create a new <code>MapArray</code> from the provided parts","","","Returns ith value of this map array.","","Returns the length for value at index <code>i</code>.","Returns the offset values in the offsets buffer","The start and end offsets of each entry","Returns the data type of the map’s values.","","Returns ith value of this map array.","Returns a reference to the values of this map","An array of null values","","","","Returns a new null array builder","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","Create a new <code>NullArray</code> of the specified length","","","","Returns a zero-copy slice of this array with the indicated …","","","","","","","A <code>PrimitiveArray</code> of days since UNIX epoch stored as <code>i32</code>","A <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …","A <code>PrimitiveArray</code> of 128-bit fixed point decimals","A <code>PrimitiveArray</code> of 256-bit fixed point decimals","A <code>PrimitiveArray</code> of elapsed durations in microseconds","A <code>PrimitiveArray</code> of elapsed durations in milliseconds","A <code>PrimitiveArray</code> of elapsed durations in nanoseconds","A <code>PrimitiveArray</code> of elapsed durations in seconds","A <code>PrimitiveArray</code> of <code>f16</code>","A <code>PrimitiveArray</code> of <code>f32</code>","A <code>PrimitiveArray</code> of <code>f64</code>","A <code>PrimitiveArray</code> of <code>i16</code>","A <code>PrimitiveArray</code> of <code>i32</code>","A <code>PrimitiveArray</code> of <code>i64</code>","A <code>PrimitiveArray</code> of <code>i8</code>","A <code>PrimitiveArray</code> of “calendar” intervals in days and …","A <code>PrimitiveArray</code> of “calendar” intervals in  months, …","A <code>PrimitiveArray</code> of “calendar” intervals in months","An optional primitive value","An array of primitive values","A <code>PrimitiveArray</code> of milliseconds since midnight stored as …","A <code>PrimitiveArray</code> of seconds since midnight stored as <code>i32</code>","A <code>PrimitiveArray</code> of microseconds since midnight stored as …","A <code>PrimitiveArray</code> of nanoseconds since midnight stored as …","A <code>PrimitiveArray</code> of microseconds since UNIX epoch stored …","A <code>PrimitiveArray</code> of milliseconds since UNIX epoch stored …","A <code>PrimitiveArray</code> of nanoseconds since UNIX epoch stored as …","A <code>PrimitiveArray</code> of seconds since UNIX epoch stored as <code>i64</code>","A <code>PrimitiveArray</code> of <code>u16</code>","A <code>PrimitiveArray</code> of <code>u32</code>","A <code>PrimitiveArray</code> of <code>u64</code>","A <code>PrimitiveArray</code> of <code>u8</code>","","Asserts that <code>data_type</code> is compatible with <code>Self</code>","","","","","Returns a new primitive array builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Creates a PrimitiveArray based on an iterator of values …","Construct a timestamp array from a vec of <code>Option&lt;i64&gt;</code> …","Creates a <code>PrimitiveArray</code> from an iterator of trusted …","Creates a PrimitiveArray based on a constant value with …","Construct a timestamp array from a vec of i64 values and …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>PrimitiveBuilder</code> of this primitive array for …","","","Deconstruct this array into its constituent parts","Returns if this <code>PrimitiveArray</code> is compatible with the …","Returns whether this array is empty.","","constructs a new iterator","Returns the length of this array.","","Corresponding Rust native type if available","Create a new <code>PrimitiveArray</code> from the provided values and …","Create a new <code>PrimitiveArray</code> of the given length where all …","Create a new <code>Scalar</code> from <code>value</code>","Validates the Decimal Array, if the value of slot is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the decimal precision of this array","Reinterprets this array’s contents as a different data …","Returns the decimal scale of this array","","Returns a zero-copy slice of this array with the indicated …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Returns the timezone of this array if any","","","","","","","Create a new <code>PrimitiveArray</code> from the provided values and …","Applies a unary and fallible function to all valid values …","Applies an unary and fallible function to all valid values …","","","Applies an unary and infallible function to a primitive …","Applies an unary and infallible function to a mutable …","Applies a unary and nullable function to all valid values …","Validates values in this array can be properly interpreted …","Returns the primitive value at index <code>i</code>.","","Returns value as a chrono <code>NaiveDate</code> by using …","Returns value as a chrono <code>NaiveDateTime</code>, handling time …","Returns value as a chrono <code>NaiveDateTime</code>, handling time …","Returns a value as a chrono <code>Duration</code>","Returns <code>Self::value</code> formatted as a string","Returns a value as a chrono <code>NaiveTime</code>","Returns the primitive value at index <code>i</code>.","","Returns the values of this array","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Values data","Overrides the <code>DataType</code> of this <code>PrimitiveArray</code>","Returns a Decimal array with the same data as self, with …","Construct a timestamp array with new timezone","Construct a timestamp array with an optional timezone","Construct a timestamp array with UTC","A <code>RunArray</code> with <code>i16</code> run ends","A <code>RunArray</code> with <code>i32</code> run ends","A <code>RunArray</code> with <code>i64</code> run ends","An array of run-end encoded values","A <code>RunArray</code> typed typed on its child values array","","","","","","","","","","","","","","","","","","","Downcast this <code>RunArray</code> to a <code>TypedRunArray</code>","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the physical index at which the array slice ends.","Returns index to the physical array for the given index to …","Returns the physical indices of the input logical indices. …","Returns the physical index at which the array slice starts.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Calculates the logical length of the array encoded by the …","","","","","","","Returns the run array of this <code>TypedRunArray</code>","The run array","Returns a reference to <code>RunEndBuffer</code>","Returns the run_ends of this <code>TypedRunArray</code>","","","","","Returns a zero-copy slice of this array with the indicated …","","","","","","","","","","","Attempts to create RunArray using given run_ends (index …","","","","","Returns a reference to values array","Returns the values of this <code>TypedRunArray</code>","","","","","The values of the run_array","A <code>GenericByteArray</code> for storing <code>str</code>","A <code>GenericStringArray</code> of <code>str</code> using <code>i64</code> offsets","A <code>GenericStringArray</code> of <code>str</code> using <code>i32</code> offsets","","","","","","","","","","","Get the data type of the array.","","","","Returns the number of <code>Unicode Scalar Value</code> in the string …","Returns an iterator that returns the values of …","Returns an iterator that returns the values of …","Fallibly creates a <code>GenericStringArray</code> from a …","","","","","","","An array of structs","","","","","","","Returns the field at <code>pos</code>.","Return child array whose field name equals to column_name","Return field names in this struct array","Returns the fields of the struct array","Returns child array refs of the struct array","","","","Returns the <code>Fields</code> of this <code>StructArray</code>","","","","Returns the argument unchanged.","","","","","","","","Get a reference to a column’s array by name.","Calls <code>U::from(self)</code>.","","Deconstruct this array into its constituent parts","","","","Create a new <code>StructArray</code> from the provided parts, …","Create a new <code>StructArray</code> of length <code>len</code> where all values …","Create a new <code>StructArray</code> from the provided parts without …","","","Return the number of fields in this struct array","","","Returns a zero-copy slice of this array with the indicated …","","","builds a StructArray from a vector of names and arrays.","","","Create a new <code>StructArray</code> from the provided parts, …","","An array of values of varying types","","","","","Accesses the child array for <code>type_id</code>.","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","Returns whether the <code>UnionArray</code> is dense (or sparse if <code>false</code>…","","Union types always return non null as there is no validity …","Union types always return non null as there is no validity …","","Creates a new <code>UnionArray</code>.","Union types always return 0 null count as there is no …","","","Returns the <code>offsets</code> buffer if this is a dense array","","","Returns a zero-copy slice of this array with the indicated …","","","","","Attempts to create a new <code>UnionArray</code>, validating the inputs …","Returns the <code>type_id</code> for the array slot at <code>index</code>.","","Returns the <code>type_ids</code> buffer for this array","","Returns the names of the types in the union.","Returns the array’s value at index <code>i</code>.","Returns the offset into the underlying values array for …","Trait for dealing with different array builders at runtime","Builder for <code>BinaryArray</code>","Builder for <code>DictionaryArray</code> of <code>BinaryArray</code>","Builder for <code>RunArray</code> of <code>BinaryArray</code>","Builder for <code>BooleanBuffer</code>","Builder for <code>BooleanArray</code>","Builder for creating a Buffer object.","Buffer builder for 32-bit date type.","A 32-bit date array builder.","Buffer builder for 64-bit date type.","A 64-bit date array builder.","Buffer builder for 128-bit decimal type.","A decimal 128 array builder","Buffer builder for 256-bit decimal type.","A decimal 256 array builder","Buffer builder for elaspsed time of microseconds unit.","An elapsed time in microseconds array builder.","Buffer builder for elaspsed time of milliseconds unit.","An elapsed time in milliseconds array builder.","Buffer builder for elaspsed time of nanoseconds unit.","An elapsed time in nanoseconds array builder.","Buffer builder for elaspsed time of second unit.","An elapsed time in seconds array builder.","Builder for <code>FixedSizeBinaryArray</code>","Builder for <code>FixedSizeListArray</code>","Buffer builder for 16-bit floating point type.","A 16-bit floating point array builder.","Buffer builder for 32-bit floating point type.","A 32-bit floating point array builder.","Buffer builder for 64-bit floating point type.","A 64-bit floating point array builder.","Array builder for <code>GenericBinaryArray</code>","Builder for <code>GenericByteArray</code>","Builder for <code>DictionaryArray</code> of <code>GenericByteArray</code>","Builder for <code>RunArray</code> of <code>GenericByteArray</code>","Builder for <code>GenericListArray</code>","Array builder for <code>GenericStringArray</code>","Buffer builder for signed 16-bit integer type.","A signed 16-bit integer array builder.","Buffer builder for signed 32-bit integer type.","A signed 32-bit integer array builder.","Buffer builder for signed 64-bit integer type.","A signed 64-bit integer array builder.","Buffer builder for signed 8-bit integer type.","A signed 8-bit integer array builder.","Buffer builder for “calendar” interval in days and …","A “calendar” interval in days and milliseconds array …","Buffer builder “calendar” interval in months, days, …","A “calendar” interval in months, days, and nanoseconds …","Buffer builder for “calendar” interval in months.","A “calendar” interval in months array builder.","Builder for <code>LargeBinaryArray</code>","Builder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>","Builder for <code>RunArray</code> of <code>LargeBinaryArray</code>","Builder for <code>LargeListArray</code>","Builder for <code>LargeStringArray</code>","Builder for <code>DictionaryArray</code> of <code>LargeStringArray</code>","Builder for <code>RunArray</code> of <code>LargeStringArray</code>","Builder for <code>ListArray</code>","Builder for <code>MapArray</code>","The <code>Field</code> names for a <code>MapArray</code>","Builder for <code>NullArray</code>","Builder for <code>PrimitiveArray</code>","Builder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>","Builder for <code>RunArray</code> of <code>PrimitiveArray</code>","Builder for <code>StringArray</code>","Builder for <code>DictionaryArray</code> of <code>StringArray</code>","Builder for <code>RunArray</code> of <code>StringArray</code>","Builder for <code>StructArray</code>","Buffer builder for 32-bit elaspsed time since midnight of …","A 32-bit elaspsed time in milliseconds array builder.","Buffer builder for 32-bit elaspsed time since midnight of …","A 32-bit elaspsed time in seconds array builder.","Buffer builder for 64-bit elaspsed time since midnight of …","A 64-bit elaspsed time in microseconds array builder.","Buffer builder for 64-bit elaspsed time since midnight of …","A 64-bit elaspsed time in nanoseconds array builder.","Buffer builder for timestamp type of microsecond unit.","A timestamp microsecond array builder.","Buffer builder for timestamp type of millisecond unit.","A timestamp millisecond array builder.","Buffer builder for timestamp type of nanosecond unit.","A timestamp nanosecond array builder.","Buffer builder for timestamp type of second unit.","A timestamp second array builder.","Buffer builder for usigned 16-bit integer type.","An usigned 16-bit integer array builder.","Buffer builder for usigned 32-bit integer type.","An usigned 32-bit integer array builder.","Buffer builder for usigned 64-bit integer type.","An usigned 64-bit integer array builder.","Buffer builder for usigned 8-bit integer type.","An usigned 8-bit integer array builder.","Builder for <code>UnionArray</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Advances the buffer by <code>additional</code> bits","Increases the number of elements in the internal buffer by …","Appends a boolean <code>v</code> into the buffer","Appends a value of type <code>T</code> into the builder, growing the …","Append <code>BooleanBuffer</code> to this <code>BooleanBufferBuilder</code>","Appends n <code>additional</code> bits of value <code>v</code> into the buffer","Appends a value of type <code>T</code> into the builder N times, …","Appends <code>n</code>, zero-initialized values","","Append <code>range</code> bits from <code>to_set</code>","Appends a slice of booleans into the buffer","Appends a slice of type <code>T</code>, growing the internal buffer as …","Safety","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","Returns the packed bits","View the contents of this buffer as a slice","Returns the packed bits","View the contents of this buffer as a mutable slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the capacity of the buffer","Returns the actual capacity (number of elements) of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used to provide a lookup from string value to key type","Used to provide a lookup from string value to key type","Used to provide a lookup from string value to key type","Used to provide a lookup from string value to key type","Used to provide a lookup from string value to key type","","<code>Field</code> name for map entries","","","","","Maps field names to <code>FieldData</code> instances which track the …","Builds the array","Creates a <code>BooleanBuffer</code>","","Resets this builder and returns an immutable Buffer.","Builds the array without resetting the underlying builder.","Builds the BooleanBuffer without resetting the builder.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Gets a bit in the buffer at <code>index</code>","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns true if empty","Returns whether the internal buffer is empty.","Returns whether number of array slots is zero","<code>Field</code> name for map key","","","","","","","","Returns the number of array slots in the builder","Returns the length of the buffer","Returns the current number of array elements in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current number of slots in the array","","Returns a builder with capacity <code>capacity</code> that corresponds …","","","Creates a new <code>BooleanBufferBuilder</code>","Creates a new builder with initial capacity for <em>at least</em> …","Creates a new <code>BooleanBufferBuilder</code> from <code>MutableBuffer</code> of …","Creates a new builder from a <code>MutableBuffer</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reserve space to at least <code>additional</code> new bits. Capacity …","Reserves memory for <em>at least</em> <code>n</code> more elements of type <code>T</code>.","Resizes the buffer, either truncating its contents (with …","","","","","","","Sets a bit in the buffer at <code>index</code>","","","","","","","Truncates the builder to the given length","Shorten this BufferBuilder to <code>len</code> items","","","","","","","Builder to keep track of type ids","","<code>Field</code> name for map value","","","","","","","","","","Builder to keep track of offsets (<code>None</code> for sparse unions)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builder for <code>BooleanArray</code>","Appends a null slot into the builder","Appends <code>n</code> <code>null</code>s into the builder.","Appends an <code>Option&lt;T&gt;</code> into the builder","Appends a slice of type <code>T</code> into the builder","Appends a value of type <code>T</code> into the builder","Appends values from a slice of type <code>T</code> and a validity …","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","Returns the capacity of this builder measured in slots of …","","","","Builds the array and reset this builder.","Builds the BooleanArray and reset this builder.","Builds the BooleanArray without resetting the builder.","Builds the array without resetting the builder.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the number of array slots in the builder","Creates a new boolean builder","","","","","Returns the current null buffer as a slice","","Creates a new boolean builder with space for <code>capacity</code> …","Builder for creating a Buffer object.","Buffer builder for 32-bit date type.","Buffer builder for 64-bit date type.","Buffer builder for 128-bit decimal type.","Buffer builder for 256-bit decimal type.","Buffer builder for elaspsed time of microseconds unit.","Buffer builder for elaspsed time of milliseconds unit.","Buffer builder for elaspsed time of nanoseconds unit.","Buffer builder for elaspsed time of second unit.","Buffer builder for 16-bit floating point type.","Buffer builder for 32-bit floating point type.","Buffer builder for 64-bit floating point type.","Buffer builder for signed 16-bit integer type.","Buffer builder for signed 32-bit integer type.","Buffer builder for signed 64-bit integer type.","Buffer builder for signed 8-bit integer type.","Buffer builder for “calendar” interval in days and …","Buffer builder “calendar” interval in months, days, …","Buffer builder for “calendar” interval in months.","Buffer builder for 32-bit elaspsed time since midnight of …","Buffer builder for 32-bit elaspsed time since midnight of …","Buffer builder for 64-bit elaspsed time since midnight of …","Buffer builder for 64-bit elaspsed time since midnight of …","Buffer builder for timestamp type of microsecond unit.","Buffer builder for timestamp type of millisecond unit.","Buffer builder for timestamp type of nanosecond unit.","Buffer builder for timestamp type of second unit.","Buffer builder for usigned 16-bit integer type.","Buffer builder for usigned 32-bit integer type.","Buffer builder for usigned 64-bit integer type.","Buffer builder for usigned 8-bit integer type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builder for <code>FixedSizeBinaryArray</code>","Append a null value to the array.","Appends a byte slice into the builder.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","","Builds the array and reset this builder.","Builds the <code>FixedSizeBinaryArray</code> and reset this builder.","Builds the <code>FixedSizeBinaryArray</code> without resetting the …","Builds the array without resetting the builder.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the number of array slots in the builder","Creates a new <code>FixedSizeBinaryBuilder</code>","","","","","","","Creates a new <code>FixedSizeBinaryBuilder</code>, <code>capacity</code> is the …","Builder for <code>FixedSizeListArray</code>","Finish the current fixed-length list array slot","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","","Builds the <code>FixedSizeListBuilder</code> and reset this builder.","Builds the array and reset this builder.","Builds the array without resetting the builder.","Builds the <code>FixedSizeListBuilder</code> without resetting the …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the number of array slots in the builder","","Creates a new <code>FixedSizeListBuilder</code> from a given values …","","","","","Returns the length of the list","Returns the child array builder as a mutable reference.","","Creates a new <code>FixedSizeListBuilder</code> from a given values …","Builder for <code>RunArray</code> of <code>BinaryArray</code>","Builder for <code>RunArray</code> of <code>GenericByteArray</code>","Builder for <code>RunArray</code> of <code>LargeBinaryArray</code>","Builder for <code>RunArray</code> of <code>LargeStringArray</code>","Builder for <code>RunArray</code> of <code>StringArray</code>","Appends null to the logical array encoded by the RunArray.","Appends optional value to the logical array encoded by the …","","","Appends value to the logical array encoded by the RunArray.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","","","","","","","","","","","","","","Creates the RunArray and resets the builder. Panics if …","Builds the array and reset this builder.","Creates the RunArray and without resetting the builder. …","Builds the array without resetting the builder.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the length of logical array encoded by the …","Creates a new <code>GenericByteRunBuilder</code>","","","","","","","","","","","","","","","","","","","","Creates a new <code>GenericByteRunBuilder</code> with the provided …","Array builder for <code>GenericBinaryArray</code>","Builder for <code>GenericByteArray</code>","Array builder for <code>GenericStringArray</code>","Append a null value into the builder.","Append an <code>Option</code> value into the builder.","Appends a value into the builder.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","","","","Builds the array and reset this builder.","Builds the <code>GenericByteArray</code> and reset this builder.","Builds the <code>GenericByteArray</code> without resetting the builder.","Builds the array without resetting the builder.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the number of binary slots in the builder","Creates a new <code>GenericByteBuilder</code>.","Creates a new  <code>GenericByteBuilder</code> from buffers.","","","","","","","","Returns the current offsets buffer as a slice","","","","Returns the current null buffer as a slice","Returns the current null buffer as a mutable slice","","","","Returns the current values buffer as a slice","Creates a new <code>GenericByteBuilder</code>.","","Builder for <code>DictionaryArray</code> of <code>BinaryArray</code>","Builder for <code>DictionaryArray</code> of <code>GenericByteArray</code>","Builder for <code>DictionaryArray</code> of <code>LargeBinaryArray</code>","Builder for <code>DictionaryArray</code> of <code>LargeStringArray</code>","Builder for <code>DictionaryArray</code> of <code>StringArray</code>","Append a value to the array. Return an existing index if …","Appends a null slot into the builder","Append an <code>Option</code> value into the builder","Infallibly append a value to this builder","Returns the builder as an non-mutable <code>Any</code> reference.","Returns the builder as an mutable <code>Any</code> reference.","","","","Used to provide a lookup from string value to key type","Used to provide a lookup from string value to key type","Used to provide a lookup from string value to key type","Used to provide a lookup from string value to key type","Used to provide a lookup from string value to key type","","","Builds the array and reset this builder.","Builds the <code>DictionaryArray</code> and reset this builder.","Builds the array without resetting the builder.","Builds the <code>DictionaryArray</code> without resetting the builder.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","","","","","","Returns the number of array slots in the builder","Creates a new <code>GenericByteDictionaryBuilder</code>","Creates a new <code>GenericByteDictionaryBuilder</code> from a keys …","","","","","","","","","","","","","","Creates a new <code>GenericByteDictionaryBuilder</code> with the …","Builder for <code>GenericListArray</code>","Finish the current variable-length list array slot","Append a null to this <code>GenericListBuilder</code>","Appends an optional value into this <code>GenericListBuilder</code>","Append a value to this <code>GenericListBuilder</code>","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","","","","Builds the <code>GenericListArray</code> and reset this builder.","Builds the array and reset this builder.","Builds the array without resetting the builder.","Builds the <code>GenericListArray</code> without resetting the builder.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the number of array slots in the builder","Creates a new <code>GenericListBuilder</code> from a given values array …","Returns the next offset","","","Returns the current offsets buffer as a slice","","","","Returns the child array builder as a mutable reference.","","Returns the child array builder as an immutable reference","Creates a new <code>GenericListBuilder</code> from a given values array …","Builder for <code>MapArray</code>","The <code>Field</code> names for a <code>MapArray</code>","Finish the current map array slot","","","","","","","","","","","","<code>Field</code> name for map entries","","","Builds the <code>MapArray</code>","Builds the array without resetting the builder.","Builds the <code>MapArray</code> without resetting the builder.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","<code>Field</code> name for map key","","Returns the key array builder of the map","","Creates a new <code>MapBuilder</code>","","","","","","","","","","<code>Field</code> name for map value","","Returns the value array builder of the map","Creates a new <code>MapBuilder</code> with capacity","Builder for <code>NullArray</code>","Appends a null slot into the builder","Appends <code>n</code> <code>null</code>s into the builder.","Appends a null slot into the builder","Appends <code>n</code> <code>null</code>s into the builder.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","Returns the capacity of this builder measured in slots of …","","","Builds the array and reset this builder.","Builds the NullArray and reset this builder.","Builds the NullArray without resetting the builder.","Builds the array without resetting the builder.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the number of array slots in the builder","","Creates a new null builder","","","","Creates a new null builder with space for <code>capacity</code> …","A 32-bit date array builder.","A 64-bit date array builder.","A decimal 128 array builder","A decimal 256 array builder","An elapsed time in microseconds array builder.","An elapsed time in milliseconds array builder.","An elapsed time in nanoseconds array builder.","An elapsed time in seconds array builder.","A 16-bit floating point array builder.","A 32-bit floating point array builder.","A 64-bit floating point array builder.","A signed 16-bit integer array builder.","A signed 32-bit integer array builder.","A signed 64-bit integer array builder.","A signed 8-bit integer array builder.","A “calendar” interval in days and milliseconds array …","A “calendar” interval in months, days, and nanoseconds …","A “calendar” interval in months array builder.","Builder for <code>PrimitiveArray</code>","A 32-bit elaspsed time in milliseconds array builder.","A 32-bit elaspsed time in seconds array builder.","A 64-bit elaspsed time in microseconds array builder.","A 64-bit elaspsed time in nanoseconds array builder.","A timestamp microsecond array builder.","A timestamp millisecond array builder.","A timestamp nanosecond array builder.","A timestamp second array builder.","An usigned 16-bit integer array builder.","An usigned 32-bit integer array builder.","An usigned 64-bit integer array builder.","An usigned 8-bit integer array builder.","Appends a null slot into the builder","Appends <code>n</code> no. of null’s into the builder","Appends an <code>Option&lt;T&gt;</code> into the builder","Appends a slice of type <code>T</code> into the builder","Appends values from a trusted length iterator.","Appends a value of type <code>T</code> into the builder","Appends values from a slice of type <code>T</code> and a validity …","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","Returns the capacity of this builder measured in slots of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds the <code>PrimitiveArray</code> and reset this builder.","Builds the array and reset this builder.","Builds the <code>PrimitiveArray</code> without resetting the builder.","Builds the array without resetting the builder.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the number of array slots in the builder","Creates a new primitive array builder","Creates a new primitive array builder from buffers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the current values buffer and null buffer as a …","","","","Returns the current null buffer as a slice","Returns the current null buffer as a mutable slice","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the current values buffer as a slice","Returns the current values buffer as a mutable slice","Creates a new primitive array builder with capacity no of …","By default <code>PrimitiveBuilder</code> uses …","Sets the precision and scale","Sets the timezone","Sets an optional timezone","Builder for <code>DictionaryArray</code> of <code>PrimitiveArray</code>","Wraps a type implementing <code>ToByteSlice</code> implementing <code>Hash</code> …","Append a primitive value to the array. Return an existing …","Appends a null slot into the builder","Append an <code>Option</code> value into the builder","Infallibly append a value to this builder","Returns the builder as an non-mutable <code>Any</code> reference.","Returns the builder as an mutable <code>Any</code> reference.","","","","","","","","","","","","Builds the array and reset this builder.","Builds the <code>DictionaryArray</code> and reset this builder.","Builds the <code>DictionaryArray</code> without resetting the builder.","Builds the array without resetting the builder.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","","Returns the number of array slots in the builder","","Creates a new <code>PrimitiveDictionaryBuilder</code>.","Creates a new <code>PrimitiveDictionaryBuilder</code> from existing …","Creates a new <code>PrimitiveDictionaryBuilder</code> from the provided …","","","","","","","","Returns the current dictionary values buffer as a slice","Returns the current dictionary values buffer as a mutable …","Creates a new <code>PrimitiveDictionaryBuilder</code> with the provided …","Builder for <code>RunArray</code> of <code>PrimitiveArray</code>","Appends null to the logical array encoded by the run-ends …","Appends optional value to the logical array encoded by the …","","","Appends value to the logical array encoded by the run-ends …","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","","","","","","Creates the RunArray and resets the builder. Panics if …","Builds the array and reset this builder.","Builds the array without resetting the builder.","Creates the RunArray and without resetting the builder. …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the length of logical array encoded by the …","Creates a new <code>PrimitiveRunBuilder</code>","","","","","","","","Creates a new <code>PrimitiveRunBuilder</code> with the provided …","Builder for <code>StructArray</code>","Appends an element (either null or non-null) to the …","Appends a null element to the struct.","Returns the builder as a non-mutable <code>Any</code> reference.","Returns the builder as a mutable <code>Any</code> reference.","","","","Returns a mutable reference to the child field builder at …","","","Builds the array.","Builds the <code>StructArray</code> and reset this builder.","Builds the array without resetting the builder.","Builds the <code>StructArray</code> without resetting the builder.","","Returns the argument unchanged.","","Creates a new <code>StructBuilder</code> from <code>Fields</code> and <code>capacity</code>","Calls <code>U::from(self)</code>.","Returns the boxed builder as a box of <code>Any</code>.","Returns the number of array slots in the builder.","Returns a builder with capacity <code>capacity</code> that corresponds …","Creates a new <code>StructBuilder</code>","","Returns the number of fields for the struct this builder …","","","","Constructs and validates contents in the builder to ensure …","<code>FieldData</code> is a helper struct to track the state of the …","A type-erased <code>BufferBuilder</code> used by <code>FieldData</code>","Builder for <code>UnionArray</code>","Appends a value to this builder.","","Appends a null to this <code>FieldData</code>.","Appends a null to this builder, encoding the null in the …","","Appends a single value to this <code>FieldData</code>’s <code>values_buffer</code>.","","","","","","Builds this builder creating a new <code>UnionArray</code>.","","","The Arrow data type represented in the <code>values_buffer</code>, …","Maps field names to <code>FieldData</code> instances which track the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The current number of slots in the array","Creates a new <code>FieldData</code>.","Creates a new dense array builder.","Creates a new sparse array builder.","A builder for the null bitmap","The number of array slots represented by the buffer","","","","","","","The type id for this field","Builder to keep track of type ids","Builder to keep track of offsets (<code>None</code> for sparse unions)","A buffer containing the values for this field in raw bytes","Creates a new dense array builder with capacity.","Creates a new sparse array builder  with capacity.","An extension trait for <code>dyn Array</code> that provides ergonomic …","","Downcasts this to a <code>AnyDictionaryArray</code> panicking if not …","Downcasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …","Downcast this to a <code>GenericBinaryArray</code> panicking if not …","Downcast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …","Downcast this to a <code>BooleanArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>BooleanArray</code> returning <code>None</code> if not …","Downcast this to a <code>GenericByteArray</code> panicking if not …","Downcast this to a <code>GenericByteArray</code> returning <code>None</code> if not …","Force downcast of an Array, such as an ArrayRef to …","Downcast this to a <code>DictionaryArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>DictionaryArray</code> returning <code>None</code> if not …","Downcast this to a <code>FixedSizeBinaryArray</code> panicking if not …","Downcast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …","Downcast this to a <code>FixedSizeListArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>GenericListArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>GenericListArray</code> returning <code>None</code> if not …","Downcast this to a <code>MapArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>MapArray</code> returning <code>None</code> if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>PrimitiveArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …","Downcast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>GenericStringArray</code> panicking if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …","Downcast this to a <code>GenericStringArray</code> returning <code>None</code> if …","Downcast this to a <code>StructArray</code> panicking if not possible","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcast this to a <code>StructArray</code> returning <code>None</code> if not …","Force downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …","Downcasts a <code>dyn Array</code> to a concrete type","","","Add the given number of days to the given datetime.","Add the given number of months to the given datetime.","Shift a date by the given number of months.","Substract the given number of days to the given datetime.","Substract the given number of months to the given datetime.","An iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","an iterator that returns Some(T) or None, that can be used …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","create a new iterator","","","","","","","A subtype of primitive type that represents numeric values.","Defines the SIMD type that should be used for this numeric …","Defines the SIMD Mask type that should be used for this …","Performs a SIMD binary operation","SIMD version of equal","SIMD version of greater than or equal to","SIMD version of greater than","Initializes a SIMD register to a constant value","The number of SIMD lanes available","SIMD version of less than or equal to","Loads a slice into a SIMD register","SIMD version of less than","","Returns <code>true</code> if any of the lanes in the mask are <code>true</code>","Creates a new SIMD mask for this SIMD type from the …","Gets the value of a single lane in a SIMD mask","Creates a new SIMD mask for this SIMD type filling it with …","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Sets the value of a single lane of a SIMD mask","Creates a bitmask from the given SIMD mask. Each bit …","SIMD version of not equal","Performs a SIMD unary operation","Writes a SIMD result back to a slice","A two-dimensional batch of column-oriented data with a …","Generic implementation of RecordBatchReader that wraps an …","Options that control the behaviour used when creating a …","Trait for types that can read <code>RecordBatch</code>’s.","Trait for types that can write <code>RecordBatch</code>’s.","","","","","","","","","","","","Write footer or termination data, then mark the writer as …","Get a reference to a column’s array by index.","Get a reference to a column’s array by name.","Get a reference to all columns in the record batch.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the total number of bytes of memory occupied …","Get a reference to a column’s array by name.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Match field names of structs and lists. If set to <code>true</code>, …","Create a new RecordBatchIterator.","Creates a new <code>RecordBatchOptions</code>","Creates a new empty <code>RecordBatch</code>.","","Reads the next <code>RecordBatch</code>.","Reads the next <code>RecordBatch</code>.","Returns the number of columns in the record batch.","Returns the number of rows in each column.","Projects the schema onto the specified columns","The number of rows in this RecordBatch","Optional row count, useful for specifying a row count for …","Returns the schema of this <code>RecordBatchReader</code>.","","Returns the <code>Schema</code> of the record batch.","","","Return a new RecordBatch where each column is sliced …","","","","","Create a <code>RecordBatch</code> from an iterable list of pairs of the …","Create a <code>RecordBatch</code> from an iterable list of tuples of the","","","","Creates a <code>RecordBatch</code> from a schema and columns.","Validate the schema and columns using <code>RecordBatchOptions</code>. …","Creates a <code>RecordBatch</code> from a schema and columns, with …","","","","Sets the match_field_names of RecordBatchOptions and …","Sets the row_count of RecordBatchOptions and returns self","Override the schema of this <code>RecordBatch</code>","Write a single batch to the writer.","The <code>RunArrayIter</code> provides an idiomatic way to iterate over …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","create a new iterator","","","","","","","A possibly <code>Scalar</code> <code>Array</code>","A wrapper around a single value <code>Array</code> that implements <code>Datum</code>…","","","","","","","Returns the argument unchanged.","","Returns the value for this <code>Datum</code> and a boolean indicating …","","Calls <code>U::from(self)</code>.","Create a new <code>Scalar</code> from an <code>Array</code>","","","","","Number of days between 0001-01-01 and 1970-01-01","Number of microseconds in a second","Number of microseconds in a day","Number of milliseconds in a second","Number of milliseconds in a day","Number of nanoseconds in a second","Number of nanoseconds in a day","Number of seconds in a day","Converts an <code>ArrowPrimitiveType</code> to <code>NaiveDate</code>","Converts an <code>ArrowPrimitiveType</code> to <code>NaiveDateTime</code>","Converts an <code>ArrowPrimitiveType</code> to <code>DateTime&lt;Tz&gt;</code>","Converts an <code>ArrowPrimitiveType</code> to <code>Duration</code>","Converts an <code>ArrowPrimitiveType</code> to <code>NaiveTime</code>","converts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>","converts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>","converts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>","converts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>","","converts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>","converts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>","converts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>","converts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>","converts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>","converts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>","converts a <code>i64</code> representing a <code>timestamp(ms)</code> to …","converts a <code>i64</code> representing a <code>timestamp(ns)</code> to …","converts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>","converts a <code>i64</code> representing a <code>timestamp(us)</code> to …","An Arrow <code>TimeZone</code>","An <code>Offset</code> for <code>Tz</code>","","Parses a fixed offset of the form “+09:00”, “-09” …","","","","","An Arrow <code>TimeZone</code>","","An <code>Offset</code> for <code>Tz</code>","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Creates two <code>Buffer</code>s from an iterator of <code>Option</code>. The first …","A subtype of primitive type that represents legal …","Trait bridging the dynamic-typed nature of Arrow (via …","A subtype of primitive type that represents temporal …","A timestamp type allows us to create array builders that …","Width of the type","An arrow binary array with i32 offsets","A boolean datatype","A trait over the variable-size byte array types","the corresponding Arrow data type of this primitive type.","Datatype of array elements","The corresponding Arrow data type","Default values for <code>DataType</code>","A 32-bit date type representing the elapsed time since …","A 64-bit date type representing the elapsed time since …","The decimal type for a Decimal128Array","The decimal type for a Decimal256Array","A trait over the decimal types, used by <code>PrimitiveArray</code> to …","An elapsed time type in microseconds.","An elapsed time type in milliseconds.","An elapsed time type in nanoseconds.","An elapsed time type in seconds.","A 16-bit floating point number type.","A 32-bit floating point number type.","A 64-bit floating point number type.","<code>ByteArrayType</code> for binary arrays","<code>ByteArrayType</code> for string arrays","A signed 16-bit integer type.","A signed 32-bit integer type.","A signed 64-bit integer type.","A signed 8-bit integer type.","A “calendar” interval type in days and milliseconds.","A “calendar” interval type in months, days, and …","A “calendar” interval type in months.","An arrow binary array with i64 offsets","An arrow utf8 array with i64 offsets","Maximum number of significant digits","Maximum no of digits after the decimal point (note the …","Corresponding Rust native type for the primitive type.","Type for representing its equivalent rust type i.e …","Type of offset i.e i32/i64","“Decimal128” or “Decimal256”, for use in error …","“Binary” or “String”, for use in error messages","A subtype of primitive type that is used as run-ends index …","fn to create its <code>DataType</code>","A 32-bit time type representing the elapsed time since …","A 32-bit time type representing the elapsed time since …","A 64-bit time type representing the elapsed time since …","A 64-bit time type representing the elapsed time since …","A timestamp microsecond type with an optional timezone.","A timestamp millisecond type with an optional timezone.","A timestamp nanosecond type with an optional timezone.","A timestamp second type with an optional timezone.","An unsigned 16-bit integer type.","An unsigned 32-bit integer type.","An unsigned 64-bit integer type.","An unsigned 8-bit integer type.","The <code>TimeUnit</code> of this timestamp.","An arrow utf8 array with i32 offsets","","Adds the given IntervalDayTimeType to an arrow …","Adds the given IntervalDayTimeType to an arrow …","Adds the given IntervalDayTimeType to an arrow …","Adds the given IntervalDayTimeType to an arrow …","Adds the given IntervalDayTimeType to an arrow Date32Type","Adds the given IntervalDayTimeType to an arrow Date64Type","","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","Adds the given IntervalMonthDayNanoType to an arrow …","","Adds the given IntervalYearMonthType to an arrow …","Adds the given IntervalYearMonthType to an arrow …","Adds the given IntervalYearMonthType to an arrow …","Adds the given IntervalYearMonthType to an arrow …","Adds the given IntervalYearMonthType to an arrow Date32Type","Adds the given IntervalYearMonthType to an arrow Date64Type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Crate private types for Byte Arrays","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Crate private types for Decimal Arrays","Returns a default value of this primitive type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Formats the decimal value with the provided precision and …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a chrono::NaiveDate into an arrow Date32Type","Converts a chrono::NaiveDate into an arrow Date64Type","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the byte width of this primitive type.","Returns the <code>TimeUnit</code> of this timestamp.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a ArrowTimestampType::Native from the provided …","","","","","Creates a IntervalYearMonthType::Native","Creates a IntervalDayTimeType::Native","Creates a IntervalMonthDayNanoType::Native","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","Selects elements of <code>a</code> and <code>b</code> using <code>mask</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Subtracts the given IntervalDayTimeType to an arrow …","Subtracts the given IntervalDayTimeType to an arrow …","Subtracts the given IntervalDayTimeType to an arrow …","Subtracts the given IntervalDayTimeType to an arrow …","Subtract the given IntervalDayTimeType to an arrow …","Subtract the given IntervalDayTimeType to an arrow …","","Subtracts the given IntervalMonthDayNanoType to an arrow …","Subtracts the given IntervalMonthDayNanoType to an arrow …","Subtracts the given IntervalMonthDayNanoType to an arrow …","Subtracts the given IntervalMonthDayNanoType to an arrow …","Subtract the given IntervalMonthDayNanoType to an arrow …","Subtract the given IntervalMonthDayNanoType to an arrow …","","Subtracts the given IntervalYearMonthType to an arrow …","Subtracts the given IntervalYearMonthType to an arrow …","Subtracts the given IntervalYearMonthType to an arrow …","Subtracts the given IntervalYearMonthType to an arrow …","Subtract the given IntervalYearMonthType to an arrow …","Subtract the given IntervalYearMonthType to an arrow …","Turns a IntervalYearMonthType type into an i32 of months.","Converts an arrow Date32Type into a chrono::NaiveDate","Converts an arrow Date64Type into a chrono::NaiveDate","Turns a IntervalDayTimeType into a tuple of (days, …","Turns a IntervalMonthDayNanoType into a tuple of (months, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies that every consecutive pair of <code>offsets</code> denotes a …","","","Validates that <code>value</code> contains no more than <code>precision</code> …","","","Validate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","",""],"i":[0,0,0,176,0,0,0,0,0,0,177,177,176,176,176,0,0,177,0,0,178,11,176,0,176,176,0,0,0,0,0,0,0,0,177,177,179,177,177,167,167,176,176,0,177,177,177,177,177,177,177,177,177,177,177,166,176,176,176,176,177,176,176,0,176,176,0,11,166,0,0,180,11,176,176,0,0,0,0,177,178,177,0,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,0,0,176,176,176,176,176,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,0,0,0,14,13,38,181,182,19,183,184,185,186,187,188,189,190,21,25,65,157,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,28,40,159,158,127,221,222,223,22,23,26,29,131,57,0,26,14,14,29,131,0,0,14,14,14,13,14,13,0,14,13,14,13,14,13,14,13,183,184,185,186,187,188,189,190,21,14,13,15,183,184,185,186,187,188,189,190,21,14,13,22,23,68,29,0,14,13,0,0,72,0,0,15,0,14,13,14,13,38,181,182,19,25,65,157,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,28,40,159,158,17,22,23,26,29,14,13,131,13,0,0,13,0,128,127,221,222,223,14,13,0,0,14,13,131,0,44,38,181,182,19,40,159,158,22,22,23,38,181,182,19,25,65,157,40,159,158,26,44,15,183,184,185,186,187,188,189,190,21,57,25,65,157,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,28,127,221,222,223,128,17,23,15,0,0,0,38,181,182,38,38,38,38,38,38,38,38,38,38,181,182,38,38,38,181,182,38,181,182,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,0,0,0,0,0,0,0,0,21,57,21,57,21,57,21,57,21,57,21,57,21,57,183,184,185,186,187,188,189,190,21,57,21,21,21,57,21,21,57,21,57,21,21,21,57,21,57,21,57,21,57,21,57,57,21,21,21,21,57,21,57,21,183,184,185,186,187,188,189,190,21,21,15,21,21,57,183,184,185,186,187,188,189,190,21,21,21,21,57,21,57,21,21,21,15,21,21,57,21,21,57,21,21,57,21,57,21,57,21,57,21,57,21,21,57,21,57,21,57,15,21,21,57,183,184,185,186,187,188,189,190,21,57,15,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,25,0,24,0,0,0,24,25,25,25,25,25,25,25,25,65,157,25,25,25,25,25,65,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,65,157,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,65,157,25,25,25,25,25,65,157,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,28,28,72,28,72,28,28,72,28,28,28,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,28,0,0,28,28,72,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,28,72,28,28,28,28,28,28,28,28,28,28,72,28,28,28,28,28,28,28,28,28,28,72,28,28,28,28,28,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,28,28,28,28,28,28,28,28,28,28,28,28,28,72,28,72,28,28,28,28,72,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,28,28,28,28,28,28,0,0,0,0,0,127,128,127,128,127,128,127,128,127,128,127,128,127,128,127,221,222,223,127,127,128,127,127,128,127,128,127,127,127,128,127,128,127,128,127,127,127,127,127,128,127,128,128,127,128,127,128,127,128,127,127,128,127,128,127,128,128,128,127,128,127,221,222,223,127,127,128,127,128,127,128,127,128,127,128,127,127,128,128,128,127,128,127,221,222,223,128,0,0,0,40,159,158,40,40,40,40,40,40,40,40,40,159,158,40,40,40,40,40,159,158,40,159,158,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,132,133,132,133,132,132,133,133,133,132,132,133,133,138,138,133,132,133,132,133,0,132,133,132,133,132,133,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,0,132,133,132,133,254,255,256,257,153,142,254,255,256,257,153,142,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,70,288,289,290,291,144,133,149,133,154,148,154,155,138,132,133,133,138,132,0,0,132,133,132,133,133,132,133,133,0,0,0,0,132,254,255,256,257,142,155,132,133,138,132,133,138,149,148,288,289,290,291,58,144,138,132,133,132,133,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,69,155,141,0,58,0,132,133,132,133,51,143,292,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,154,293,294,295,296,297,298,42,140,141,145,148,70,0,51,143,292,293,294,295,296,297,298,145,148,254,255,256,257,153,142,0,0,0,132,133,132,254,255,256,257,153,142,132,288,289,290,291,144,0,132,133,132,133,132,133,132,133,155,0,149,51,143,292,295,296,297,298,148,140,155,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,254,255,256,257,293,294,42,140,141,145,70,58,153,144,142,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,133,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,133,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,133,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,0,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,0,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,0,0,0,0,0,142,142,142,142,142,142,142,142,142,142,254,255,256,257,142,254,255,256,257,142,142,142,142,142,142,142,142,142,142,254,255,256,257,142,142,142,142,142,254,255,256,257,142,142,254,255,256,257,142,142,142,142,254,255,256,257,142,142,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,143,292,51,143,292,51,51,51,51,51,51,51,143,292,51,51,143,0,0,0,0,0,144,144,144,144,144,144,144,144,144,288,289,290,291,144,144,144,144,144,144,144,144,144,144,0,144,144,288,289,290,291,144,144,144,144,288,289,290,291,144,144,144,144,288,289,290,291,144,144,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,0,148,148,148,148,149,148,149,148,149,149,149,149,149,148,148,148,148,148,148,148,149,148,149,148,149,148,149,148,149,148,148,148,148,148,148,149,148,149,148,149,148,149,149,148,148,148,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,70,70,70,70,70,70,70,70,70,70,70,70,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,70,70,70,70,70,70,70,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,70,70,70,70,70,70,70,70,0,0,58,58,58,58,58,58,151,58,151,58,151,58,58,151,151,151,58,58,58,58,58,151,58,151,58,151,58,151,151,58,58,58,58,58,58,58,58,151,58,151,58,151,58,58,58,58,58,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,0,154,154,154,154,154,154,154,0,0,0,155,299,156,155,155,156,299,156,155,156,155,155,156,155,156,155,299,156,155,156,155,156,155,155,156,155,155,156,155,155,156,156,156,155,156,155,156,155,156,155,155,156,155,155,0,0,300,300,300,300,300,0,300,300,300,0,300,0,300,300,300,300,0,300,0,0,0,0,300,0,300,300,0,300,0,300,0,300,0,300,0,300,300,0,300,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,47,301,302,61,63,66,67,52,52,52,52,114,47,301,302,61,63,66,67,52,114,47,301,302,61,63,66,67,52,52,52,52,52,52,52,114,47,301,302,61,63,66,67,52,52,52,52,52,52,52,52,0,177,177,177,177,177,177,177,177,177,177,177,0,177,177,177,177,177,177,177,177,177,177,0,0,0,0,0,167,11,166,167,11,166,167,11,166,11,11,178,11,11,11,11,166,11,11,166,167,11,11,11,166,167,11,166,11,11,167,167,167,11,166,167,166,167,166,11,167,180,180,11,11,11,11,166,180,167,11,11,167,11,11,167,11,166,11,11,167,11,166,11,11,11,167,11,166,166,166,11,178,0,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,0,0,48,48,48,48,48,48,48,48,179,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,171,0,0,171,172,172,0,0,0,171,120,172,171,120,172,171,120,172,171,120,172,171,120,172,171,171,171,120,172,171,120,172,171,120,172,120,120,171,120,172,171,120,120,120,120,171,120,172,171,171,120,172,171,120,172,171,120,172,171,0,0,0,0,0,0,116,0,0,0,27,18,174,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,116,27,18,18,116,18,0,116,0,0,0,0,0,0,0,0,0,0,0,0,113,0,0,94,100,81,102,78,74,0,94,100,81,102,78,74,0,94,100,81,102,78,74,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,55,50,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,55,50,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,0,55,50,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,0,27,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,116,95,90,0,55,50,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,55,50,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,78,74,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,27,113,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,55,50,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,0,113,94,100,81,102,84,87,89,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,55,303,304,50,305,306,0,0,94,100,81,102,78,74,0,94,100,81,102,78,74,0,94,100,81,102,78,74,84,78,74,87,89,55,50,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,55,50,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,55,50,174,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,18,55,50,116,95,90,0,91,80,79,101,76,96,75,92,85,93,82,94,100,81,102,78,74,86,98,97,73,84,87,89,99,77,83,88,95,90,0,0,307,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[[]],0,0,[3],0,0,[[],[[2,[1]]]],0,[[],4],0,[[],[[2,[1]]]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[],5],[[],5],0,[[],6],[[]],[7],[[]],[[],5],[8],[6,5],[5],[[]],[[6,5]],[[],8],0,[[],[[2,[1]]]],[[]],[[],[[2,[1]]]],[[]],[[]],[[],[[2,[1]]]],[[]],0,[9,[[2,[1]]]],[9],0,0,0,0,0,[[],10],0,[[],[[2,[1]]]],[[]],0,0,0,0,[3],[11,[[2,[1]]]],[7],0,0,0,[[],[[2,[1]]]],[[]],[[],4],[[],[[2,[1]]]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],[[2,[1]]]],[[]],[[],[[2,[1]]]],[[]],0,0,[[],[[2,[1]]]],[[]],[9,[[2,[1]]]],[9],[[],[[2,[1]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],12],[13,12],[14,[[16,[15]]]],[13,[[16,[15]]]],[14,[[16,[17]]]],[13,[[16,[17]]]],[14,[[16,[[19,[18]]]]]],[13,[[16,[[19,[18]]]]]],[14,[[16,[[21,[20]]]]]],[13,[[16,[[21,[20]]]]]],[14,[[16,[22]]]],[13,[[16,[22]]]],[14,[[16,[23]]]],[13,[[16,[23]]]],[14,[[16,[[25,[24]]]]]],[13,[[16,[[25,[24]]]]]],[14,[[16,[26]]]],[13,[[16,[26]]]],[14,[[16,[[28,[27]]]]]],[13,[[16,[[28,[27]]]]]],[14,[[16,[29]]]],[13,[[16,[29]]]],0,0,0,[[],30],[13,30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,14],5],[[14,14],5],0,0,0,0,[14],[14],[[],6],[13,6],[[],6],[13,6],[31,[[33,[32]]]],[[],31],[13,31],[[],5],[13,5],[6,5],[[13,6],5],[[],5],[13,5],0,0,0,0,0,0,0,0,0,[6,5],[[13,6],5],[[],14],0,0,0,0,0,0,0,0,0,[[],6],[13,6],0,0,0,0,0,[[],[[16,[34]]]],[13,[[16,[34]]]],[31,13],0,0,[30,13],[[30,6],13],[[],[[35,[6]]]],0,[[],6],[13,6],[[],[[16,[34]]]],[13,[[16,[34]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],6],[13,6],0,0,0,[[14,36,3],37],0,0,0,0,0,0,0,[[6,6],13],[[13,6,6],13],0,0,[[],31],[13,31],0,0,[6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[6],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[13,13],0,0,0,0,0,0,[[[38,[24]],[38,[24]]],5],[[[35,[[7,[39]]]]],[[38,[24]]]],[[[40,[24]]],[[38,[24]]]],[[[25,[24]]],[[38,[24]]]],[[[35,[[16,[[7,[39]]]]]]],[[38,[24]]]],[[[25,[24]]],[[38,[24]]]],[[[35,[[16,[[7,[39]]]]]]],[[38,[24]]]],[[[35,[[7,[39]]]]],[[38,[24]]]],[[],30],0,0,0,[[[38,[24]],41],41],[[[38,[24]],41],41],0,0,0,0,0,0,0,[17,12],[[]],[[]],[6,42],[[]],[17,17],[[]],[17,30],[[17,17],5],[17,6],[[17,36],37],[43,17],[31,17],[[]],[[[35,[5]]],17],[[[35,[[16,[5]]]]],17],[[44,44,45],17],[[]],[46,17],[[44,45],17],[[]],[17,6],[17,6],[[]],[17,31],[17],[17,5],[17,5],[17,47],[17,6],[17,6],[[43,[16,[34]]],17],[6,17],[5,[[48,[17]]]],[17,[[16,[34]]]],0,[17,6],[[17,6,6],13],[[17,6,6],17],[[17,41],41],[[17,41],41],[17,31],[[]],[17,6],[[],2],[[],2],[[],49],[[17,6],5],[[17,6]],[[17,6],5],[[17,6]],[17,43],0,0,0,[[[19,[18]]],12],[[]],[[]],[[]],[[[19,[18]]],[[19,[18]]]],[[]],[[[19,[18]]],30],0,[[[19,[18]],36],37],[31,[[19,[18]]]],[[]],[[]],[46,[[19,[18]]]],[46,[[19,[18]]]],[46,[[19,[18]]]],[[[25,[24]]],[[19,[[50,[24]]]]]],[[[35,[[16,[[7,[39]]]]]]],[[19,[[50,[24]]]]]],[[[35,[[7,[39]]]]],[[19,[[50,[24]]]]]],[[]],[[[19,[18]]],6],[[[19,[18]]],6],[[],30],[[],30],[[]],[[[19,[18]]],[[2,[[51,[18]],[19,[18]]]]]],[[[19,[18]]],31],[[[19,[18]]]],[[[19,[18]]]],[[[19,[18]]],5],[[[19,[18]]],5],[[[19,[18]]],[[52,[[19,[18]]]]]],[[[19,[18]]],6],[[33,53,[16,[34]]],[[19,[18]]]],[6,[[19,[18]]]],[54,[[48,[[19,[18]]]]]],[[33,53,[16,[34]]],[[19,[18]]]],[[[19,[18]]],[[16,[34]]]],0,[[[19,[[55,[24]]]],6],6],[[[19,[18]]],6],[[[19,[18]]],33],[[[19,[18]],6,6],13],[[[19,[18]],6,6],[[19,[18]]]],[[[19,[[55,[24]]]],41],41],[[[19,[[50,[24]]]],41],41],[[[19,[[55,[24]]]],41],41],[[[19,[[50,[24]]]],41],41],[[[19,[18]]],31],[[]],[[],2],[[[38,[24]]],[[2,[[19,[[55,[24]]]],1]]]],[[],2],[[33,53,[16,[34]]],[[2,[[19,[18]],1]]]],[[],49],[[[19,[18]],6]],[[[19,[18]],6]],[[[19,[18]]],[[7,[39]]]],0,[[[19,[18]],6]],[[[19,[18]]],7],0,[[[19,[18]],6]],[[[19,[18]],6]],[[[19,[18]]],53],0,0,0,0,0,0,0,0,0,0,0,[[[21,[20]]],12],[[[57,[20,56]]],12],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]],[[21,[20]]]],[[[57,[20]]],[[57,[20]]]],[[]],[[]],[[[21,[20]]],30],[[[57,[20,56]]],30],0,0,0,0,0,0,0,0,0,0,[[[21,[20]]],[[16,[[57,[20]]]]]],[[[21,[20]],[21,[20]]],5],[[[21,[20]],36],37],[[[57,[20]],36],37],[31,[[21,[20]]]],[[]],[[]],[[]],[[]],[46,[[21,[20]]]],[46,[[21,[20]]]],[[]],[[]],[[[21,[20]]],6],[[[57,[20,56]]],6],[[[21,[20]]],6],[[[57,[20,56]]],6],[[]],[[]],[[[21,[20]]],31],[[[57,[20,56]]],31],[[[57,[20]]]],[[[21,[20]]]],[[[21,[20]]],[[2,[[58,[20,27]],[21,[20]]]]]],[[[21,[20]]],5],[[[21,[20]]],5],[[[57,[20,56]]],5],[[[21,[20]]],5],[[[57,[20,56]]],5],[[[21,[20]]],5],0,0,0,0,0,0,0,0,0,[[[21,[20]],6],[[16,[6]]]],[[],14],[[[21,[20]]],[[28,[20]]]],[[[21,[20]]],14],[[[57,[20]]],[[28,[20]]]],0,0,0,0,0,0,0,0,0,[[[21,[20]]],41],[[[21,[20]]],6],[[[21,[20]]],6],[[[57,[20,56]]],6],[[[21,[20]]],[[16,[34]]]],[[[57,[20,56]]],[[16,[34]]]],[[[21,[20]],59],16],[[[28,[20]],13],[[21,[20]]]],[[[28,[20]],13],[[21,[20]]]],[[],[[35,[6]]]],[[[21,[20]]],[[35,[6]]]],[[[21,[20]]],[[16,[34]]]],[[[57,[20,56]]],[[16,[34]]]],[[[21,[20]]],43],[[[21,[20]]],6],[[[57,[20,56]]],6],[[[21,[20]],6,6],[[21,[20]]]],[[[21,[20]],6,6],13],[[[57,[20,56]],6,6],13],[[[21,[20]]],31],[[[57,[20,56]]],31],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[[28,[20]],13],[[2,[[21,[20]],1]]]],[[],49],[[],49],[[[21,[20]],3],[[2,[[21,[20]],[21,[20]]]]]],[[[57,[20,[0,[56,60]]]],6]],[[[21,[20]]],30],[[[57,[20,[0,[56,60]]]],6]],[[],13],[[[21,[20]]],13],[[[21,[20]]],13],[[[57,[20]]]],0,0,0,0,0,0,0,0,0,0,[13,13],[[[21,[20]],13],[[21,[20]]]],[[[21,[20]],13],13],0,[22,12],[[]],[[]],[[]],[22,22],[[]],[22,30],0,[[22,22],5],[[22,36],37],[31,22],[23,22],[[[35,[[16,[[7,[39]]]]]]],22],[[]],[[[35,[[7,[39]]]]],22],[[]],[[]],[22,6],[22,6],[[]],[22,31],[22],[22],[22,5],[22,61],[22,6],0,[[62,53,[16,[34]]],22],[[62,6],22],[22,[[16,[34]]]],0,[22,6],[[22,6,6],22],[[22,6,6],13],[22,31],[[]],[[],2],[41,[[2,[22,1]]]],[41,[[2,[22,1]]]],[[41,62],[[2,[22,1]]]],[[],2],[[62,53,[16,[34]]],[[2,[22,1]]]],[[],49],[[22,6],[[7,[39]]]],[[22,6]],[22,53],0,[22,62],0,[[22,6],62],[[22,6],62],[[22,6],[[7,[39]]]],[[22,6]],0,[23,12],[[]],[[]],[[]],[23,23],[[]],[23,30],0,[[23,23],5],[[23,36],37],[[]],[31,23],[[]],[[46,62],23],[[]],[23,6],[23,6],[[]],[23,31],[23],[23,5],[23,63],[23,6],0,[[64,62,13,[16,[34]]],23],[[64,62,6],23],[23,[[16,[34]]]],0,[23,6],[[23,6,6],13],[[23,6,6],23],[23,31],[[]],[[],2],[[],2],[[64,62,13,[16,[34]]],[[2,[23,1]]]],[[],49],[[23,6]],[[23,6]],[[23,6],13],[23,62],0,[[23,6],62],[[23,6],62],[23,30],[[23,6]],[[23,6]],[23,13],0,0,0,0,0,0,0,0,[[[25,[24]]],12],[[]],[[]],[[]],[[[25,[24]]],[[25,[24]]]],[[]],[[[25,[24]]],30],0,0,0,[[[25,[24]],[25,[24]]],5],[[[25,[24]],36],37],[[]],[23,[[25,[24]]]],[31,[[25,[24]]]],[26,65],[[]],[46,[[25,[24]]]],[[]],[[[25,[24]]],6],[[[25,[24]]],6],[30,[[16,[30]]]],[[]],[[[25,[24]]],31],[[[25,[24]]]],[[[25,[24]]],5],[[[25,[24]]],[[66,[24]]]],[[[25,[24]]],6],[[64,[33,[24]],13,[16,[34]]],[[25,[24]]]],[[64,6],[[25,[24]]]],[[[25,[24]]],[[16,[34]]]],0,0,0,[[[25,[24]]],6],[[[25,[24]]],[[33,[24]]]],[[[25,[24]],6,6],[[25,[24]]]],[[[25,[24]],6,6],13],[[[25,[24]]],31],[[]],[[],2],[[],2],[[64,[33,[24]],13,[16,[34]]],[[2,[[25,[24]],1]]]],[31,[[2,[[25,[24]],1]]]],[[],49],[[[25,[24]],6],13],[[[25,[24]],6]],[[[25,[24]],6],24],[[[25,[24]]],[[7,[24]]]],0,0,0,[[[25,[24]]],30],[[[25,[24]],6]],[[[25,[24]],6],13],[[[25,[24]]],13],0,0,0,0,[26,12],[[]],[[]],[[]],[26,26],[[]],[26,30],0,[26,29],0,[[26,26],5],[[26,36],37],[31,26],[[]],[[]],[[]],[26,6],[26,6],[[]],[26,31],[26],[26,5],[26,67],[26,30],[26,13],[26,6],[[64,[33,[62]],29,[16,[34]],5],26],[[41,14,[7,[9]]],[[2,[26,1]]]],[26,[[16,[34]]]],0,[26,6],[26,[[33,[62]]]],[[26,6,6],13],[[26,6,6],26],[26,31],[[]],[[],2],[[],2],[[64,[33,[62]],29,[16,[34]],5],[[2,[26,1]]]],[31,[[2,[26,1]]]],[[],49],[[26,6],29],[[26,6]],[[26,6],62],[26,[[7,[62]]]],0,[26,30],[[26,6]],[[26,6],29],[26,13],0,[68,12],[[]],[[]],[6,69],[[]],[68,68],[[]],[68,30],[[68,68],5],[[68,36],37],[31,68],[[]],[[]],[[]],[68,6],[68,6],[[]],[68,31],[68,5],[68,5],[68,6],0,[68,[[16,[34]]]],[6,68],[68,[[16,[34]]]],[68,6],[[68,6,6],13],[[68,6,6],68],[68,31],[[]],[[],2],[[],2],[[],49],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[28,[27]]],12],[30],[[]],[[]],[[]],[[]],[6,[[70,[27]]]],[[]],[[]],[[[28,[27]]],[[28,[27]]]],[[]],[[[28,[27]]],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[28,[27]],[28,[27]]],5],[[[28,[27]],36],37],[[[72,[[0,[71,27]]]],36],37],[[[35,[16]]],[[28,[73]]]],[[[35,[16]]],[[28,[74]]]],[35,[[28,[75]]]],[[[35,[16]]],[[28,[76]]]],[35,[[28,[77]]]],[[[35,[16]]],[[28,[78]]]],[[[35,[16]]],[[28,[77]]]],[[]],[35,[[28,[74]]]],[35,[[28,[79]]]],[[[35,[16]]],[[28,[80]]]],[[[35,[16]]],[[28,[81]]]],[35,[[28,[82]]]],[35,[[28,[83]]]],[35,[[28,[84]]]],[[[35,[16]]],[[28,[85]]]],[35,[[28,[86]]]],[35,[[28,[87]]]],[[[35,[16]]],[[28,[88]]]],[[[35,[16]]],[[28,[82]]]],[[[35,[16]]],[[28,[89]]]],[[[35,[16]]],[[28,[90]]]],[35,[[28,[91]]]],[[[35,[16]]],[[28,[92]]]],[31,[[28,[27]]]],[[[35,[16]]],[[28,[91]]]],[35,[[28,[90]]]],[[[35,[16]]],[[28,[93]]]],[35,[[28,[80]]]],[35,[[28,[94]]]],[35,[[28,[73]]]],[35,[[28,[85]]]],[35,[[28,[92]]]],[[[35,[16]]],[[28,[84]]]],[[[35,[16]]],[[28,[95]]]],[[[35,[16]]],[[28,[96]]]],[35,[[28,[76]]]],[35,[[28,[97]]]],[[[35,[16]]],[[28,[94]]]],[[[35,[16]]],[[28,[98]]]],[35,[[28,[81]]]],[[[35,[16]]],[[28,[99]]]],[[[35,[16]]],[[28,[83]]]],[[[35,[16]]],[[28,[86]]]],[35,[[28,[96]]]],[35,[[28,[89]]]],[[[35,[16]]],[[28,[100]]]],[[[35,[16]]],[[28,[87]]]],[35,[[28,[101]]]],[35,[[28,[100]]]],[35,[[28,[99]]]],[[[35,[16]]],[[28,[101]]]],[35,[[28,[88]]]],[35,[[28,[102]]]],[35,[[28,[93]]]],[35,[[28,[95]]]],[35,[[28,[98]]]],[35,[[28,[78]]]],[[[35,[16]]],[[28,[102]]]],[[[35,[16]]],[[28,[75]]]],[[[35,[16]]],[[28,[79]]]],[[[35,[16]]],[[28,[97]]]],[103,[[72,[82]]]],[104,[[72,[93]]]],[105,[[72,[91]]]],[39,[[72,[76]]]],[[]],[106,[[72,[85]]]],[107,[[72,[101]]]],[9,[[72,[75]]]],[16,[[72,[27]]]],[108,[[72,[95]]]],[109,[[72,[80]]]],[110,[[72,[90]]]],[62,[[72,[79]]]],[8,[[72,[92]]]],[111,[[72,[96]]]],[16,[[72,[27]]]],[[]],[[]],[46,[[28,[27]]]],[46,[[28,[27]]]],[[[35,[[16,[107]]]],[16,[112]]],[[28,[113]]]],[46,[[28,[27]]]],[6,[[28,[27]]]],[[[35,[107]],[16,[112]]],[[28,[113]]]],[[]],[[[28,[27]]],6],[[[28,[27]]],6],[[]],[[]],[[[28,[27]]],[[2,[[70,[27]],[28,[27]]]]]],[[[28,[27]]],31],[[[28,[27]]]],[[[28,[27]]]],[30,5],[[[28,[27]]],5],[[[28,[27]]],5],[[[28,[27]]],[[114,[27]]]],[[[28,[27]]],6],[[[28,[27]]],6],0,[[115,[16,[34]]],[[28,[27]]]],[6,[[28,[27]]]],[[],[[48,[[28,[27]]]]]],[[[28,[[0,[116,27]]]],39],[[28,[[0,[116,27]]]]]],[[[28,[27]]],[[16,[34]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[28,[27]]],6],[[[28,[[0,[116,27]]]]],39],[[[28,[27]]],[[28,[27]]]],[[[28,[[0,[116,27]]]]],105],[[[28,[27]],6,6],13],[[[28,[27]],6,6],[[28,[27]]]],[[[28,[27]],41],41],[[[28,[27]],41],41],[[[28,[113]]],[[16,[59]]]],[[[28,[27]]],31],[[]],[[],2],[[],2],[[],2],[[],2],[[115,[16,[34]]],[[2,[[28,[27]],1]]]],[[[28,[27]],3],[[2,[[28,[27]]]]]],[[[28,[27]],3],[[2,[[2,[[28,[27]]]],[28,[27]]]]]],[[],49],[[],49],[[[28,[27]],3],[[28,[27]]]],[[[28,[27]],3],[[2,[[28,[27]],[28,[27]]]]]],[[[28,[27]],3],[[28,[27]]]],[[[28,[[0,[116,27]]]],39],[[2,[1]]]],[[[28,[27]],6]],[[[28,[27]],6]],[[[28,[117]],6],[[16,[118]]]],[[[28,[117]],6],[[16,[119]]]],[[[28,[117]],6,120],[[16,[[121,[120]]]]]],[[[28,[117]],6],[[16,[122]]]],[[[28,[[0,[116,27]]]],6],112],[[[28,[117]],6],[[16,[123]]]],[[[28,[27]],6]],[[[28,[27]],6]],[[[28,[27]]],115],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[28,[27]],30],[[28,[27]]]],[[[28,[[0,[116,27]]]],39,105],[[2,[[28,[[0,[116,27]]]],1]]]],[[[28,[113]],[125,[[124,[59]]]]],[[28,[113]]]],[[[28,[113]],[16,[[125,[[124,[59]]]]]]],[[28,[113]]]],[[[28,[113]]],[[28,[113]]]],0,0,0,0,0,[[[127,[126]]],12],[[[128,[126,56]]],12],[[]],[[]],[[]],[[]],[[]],[[]],[[[127,[126]]],[[127,[126]]]],[[[128,[126]]],[[128,[126]]]],[[]],[[]],[[[127,[126]]],30],[[[128,[126,56]]],30],0,0,0,0,[[[127,[126]]],[[16,[[128,[126]]]]]],[[[127,[126]],36],37],[[[128,[126]],36],37],[31,[[127,[126]]]],[[]],[[]],[[]],[[]],[46,[[127,[126]]]],[46,[[127,[126]]]],[[]],[[]],[[[127,[126]]],6],[[[128,[126,56]]],6],[[[127,[126]]],6],[[[128,[126,56]]],6],[[[127,[126]]],6],[[[127,[126]],6],6],[[[127,[126]],[7,[32]]],[[2,[[35,[6]],1]]]],[[[127,[126]]],6],[[]],[[]],[[[127,[126]]],31],[[[128,[126,56]]],31],[[[128,[126,[0,[56,60]]]]]],[[[127,[126]]],5],[[[128,[126,56]]],5],[[[127,[126]]],5],[[[128,[126,56]]],5],[[[127,[126]]],6],[[[128,[126,56]]],6],[[[28,[126]]],6],[[[127,[126]]],[[16,[34]]]],[[[128,[126,56]]],[[16,[34]]]],[[[127,[126]]],[[16,[34]]]],[[[128,[126,56]]],[[16,[34]]]],[[[127,[126]]],6],[[[128,[126,56]]],6],[[[128,[126]]],[[127,[126]]]],0,[[[127,[126]]],129],[[[128,[126]]],129],0,0,0,0,[[[127,[126]],6,6],[[127,[126]]]],[[[127,[126]],6,6],13],[[[128,[126,56]],6,6],13],[[[127,[126]]],31],[[[128,[126,56]]],31],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[[28,[126]],14],[[2,[[127,[126]],1]]]],[[],49],[[],49],[[[128,[126,[0,[56,60]]]],6]],[[[128,[126,[0,[56,60]]]],6]],[[[127,[126]]],13],[[[128,[126]]]],0,0,0,0,0,0,0,0,0,0,0,[[[40,[24]],[40,[24]]],5],[[[35,[59]]],[[40,[24]]]],[[[25,[24]]],[[40,[24]]]],[[[35,[[16,[59]]]]],[[40,[24]]]],[[[35,[112]]],[[40,[24]]]],[[[35,[[16,[112]]]]],[[40,[24]]]],[[[38,[24]]],[[40,[24]]]],[[],30],0,0,0,[[[40,[24]],6],6],[[[40,[24]],41],41],[[[40,[24]],41],41],[[[38,[24]]],[[2,[[40,[24]],1]]]],0,0,0,0,0,0,0,[29,12],[[]],[[]],[[]],[29,29],[[]],[[29,6],13],[[29,59],[[16,[13]]]],[29,[[35,[59]]]],[29,[[7,[13]]]],[29,[[35,[13]]]],[29,30],0,[[29,29],5],[29,130],0,[[29,36],37],[35,29],[[]],[11,29],[[],29],[31,29],[[]],[[]],[29,6],[29,6],[[29,59]],[[]],[29,31],[29],[29,5],[29,6],0,[[130,[35,[13]],[16,[34]]],29],[[130,6],29],[[130,[35,[13]],[16,[34]]],29],[29,[[16,[34]]]],0,[29,6],[29,6],[[29,6,6],13],[[29,6,6],29],[29,31],[[]],[35,[[2,[29,1]]]],[[],2],[[],2],[[130,[35,[13]],[16,[34]]],[[2,[29,1]]]],[[],49],0,[131,12],[[]],[[]],[[]],[[131,105],13],[131,131],[[]],[131,30],0,0,[[131,36],37],[[]],[31,131],[[]],[[]],[131,6],[131,6],[[]],[131,31],[131,5],[131,5],[[131,6],5],[[131,6],5],[131,6],[[[7,[105]],53,[16,[53]],35],131],[131,6],[131,[[16,[34]]]],[131,6],[131,[[16,[[115,[62]]]]]],0,[[131,6,6],13],[[131,6,6],131],[131,31],[[]],[[],2],[[],2],[[[7,[105]],53,[16,[53]],35],[[2,[131,1]]]],[[131,6],105],[[],49],[131,[[115,[105]]]],0,[131,[[35,[59]]]],[[131,6],13],[[131,6],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[132,6]],[[[133,[32]],6]],[[132,5]],[[[133,[32]],32]],[[132,43]],[[132,6,5]],[[[133,[32]],6,32]],[[[133,[32]],6]],[[[133,[32]]]],[[132,[134,[6]],[7,[39]]]],[[132,[7,[5]]]],[[[133,[32]],[7,[32]]]],[[[133,[32]],46]],[[],12],[[],12],[[[133,[32]]],12],[132,[[7,[39]]]],[[[133,[32]]],[[7,[32]]]],[132,[[7,[39]]]],[[[133,[32]]],[[7,[32]]]],0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[132,6],[[[133,[32]]],6],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[133,[32]]]],0,[[[133,[32]],46]],0,0,0,0,[[],13],[132,43],[[[133,[32]]],53],[[[133,[32]]],53],[[],13],[132,43],0,0,[[132,36],[[2,[135]]]],[[[133,[[0,[71,32]]]],36],[[2,[135]]]],[[]],[[[35,[32,136]]],[[133,[32]]]],[[]],[[]],[[]],[46,[[133,[32]]]],0,0,0,0,[[132,6],5],0,0,0,0,0,0,[[]],[[]],[137,[[137,[12]]]],[132,5],[[[133,[32]]],5],[[],5],0,0,0,0,0,0,0,0,[[],6],[132,6],[[[133,[32]]],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[30,6],[[137,[138]]]],0,0,[6,132],[6,[[133,[32]]]],[[139,6],132],[139,[[133,[32]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[132,6]],[[[133,[32]],6]],[[132,6]],0,0,0,0,0,0,[[132,6,5]],0,0,0,0,0,0,[[132,6]],[[[133,[32]],6]],[[],2],[[],2],[[],2],[[],2],[[],49],[[],49],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[42],[[42,6]],[[42,[16,[5]]]],[[42,[7,[5]]]],[[42,5]],[[42,[7,[5]],[7,[5]]],[[2,[1]]]],[42,12],[42,12],[[]],[[]],[42,6],[[]],[[],42],[[42,46]],[42,13],[42,17],[42,17],[42,13],[[42,36],37],[[]],[[]],[[]],[[[137,[42]]],[[137,[12]]]],[42,6],[[],42],0,[[],2],[[],2],[[],49],[42,[[16,[[7,[39]]]]]],0,[6,42],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[140],[[140,[54,[[7,[39]]]]],[[2,[1]]]],[140,12],[140,12],[[]],[[]],[[]],[140,13],[140,22],[140,22],[140,13],[[140,36],37],[[]],[[]],[[]],[[[137,[140]]],[[137,[12]]]],[140,6],[62,140],0,[[],2],[[],2],[[],49],0,0,[[6,62],140],0,[[[141,[138]],5]],[[[141,[138]]],12],[[[141,[138]]],12],[[]],[[]],[[]],[[[141,[138]]],23],[[[141,[138]]],13],[[[141,[138]]],13],[[[141,[138]]],23],[[[141,[[0,[71,138]]]],36],37],[[]],[[]],[[]],[[[137,[[141,[138]]]]],[[137,[12]]]],[[[141,[138]]],6],0,[[138,62],[[141,[138]]]],0,[[],2],[[],2],[[],49],[[[141,[138]]],62],[[[141,[138]]],138],0,[[138,62,6],[[141,[138]]]],0,0,0,0,0,[[[142,[126,18]]]],[[[142,[126,18]],[16,[54]]]],[[[142,[126,18]]]],[[[142,[126,18]],[70,[126]],[51,[18]]]],[[[142,[126,18]],54]],[[[142,[126,18]]],12],[[[142,[126,18]]],12],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[],[[142,[27,18]]]],[[[142,[126,18]],46]],[[[142,[126,18]]],[[127,[126]]]],[[[142,[126,18]]],13],[[[142,[126,18]]],[[127,[126]]]],[[[142,[126,18]]],13],[[[142,[[0,[27,71]],[0,[18,71]]]],36],37],[[]],[[]],0,0,0,0,0,[[]],[[[137,[[142,[126,18]]]]],[[137,[12]]]],[[[142,[126,18]]],6],[[],[[142,[27,18]]]],0,0,0,0,0,[[[142,[126,18]]]],0,0,0,0,0,[[],2],[[],2],[[],49],0,0,0,0,0,[[6,6],[[142,[27,18]]]],0,0,0,[[[51,[18]]]],[[[51,[18]],[16,[54]]]],[[[51,[18]],54]],[[[51,[18]]],12],[[[51,[18]]],12],[[]],[[]],[[]],[[],[[51,[18]]]],[[[51,[18]],46]],[[[51,[18]]],13],[[[51,[18]]],[[19,[18]]]],[[[51,[18]]],[[19,[18]]]],[[[51,[18]]],13],[[[51,[18]],36],37],[[]],[[]],[[]],[[[137,[[51,[18]]]]],[[137,[12]]]],[[[51,[18]]],6],[[],[[51,[18]]]],[[139,139,[16,[139]]],[[51,[18]]]],[[[51,[18]]]],0,0,0,0,0,0,[[[51,[18]]],7],[[],2],[[],2],[[],49],[[[51,[18]]],[[16,[[7,[39]]]]]],[[[51,[18]]],[[16,[[7,[39]]]]]],0,0,0,[[[51,[18]]],[[7,[39]]]],[[6,6],[[51,[18]]]],[[[143,[24]],59],37],0,0,0,0,0,[[[144,[20,18]],54],[[2,[1]]]],[[[144,[20,18]]]],[[[144,[20,18]],[16,[54]]]],[[[144,[20,18]],54]],[[[144,[20,18]]],12],[[[144,[20,18]]],12],[[]],[[]],[[]],0,0,0,0,0,[[],[[144,[20,18]]]],[[[144,[20,18]],46]],[[[144,[20,18]]],13],[[[144,[20,18]]],[[21,[20]]]],[[[144,[20,18]]],13],[[[144,[20,18]]],[[21,[20]]]],[[[144,[[0,[20,71]],[0,[18,71]]]],36],37],[[]],[[]],[[[51,[18]],6],[[7,[39]]]],[[]],[[[137,[[144,[20,18]]]]],[[137,[12]]]],0,0,0,0,0,[[[144,[20,18]]],6],[[],[[144,[20,18]]]],[[6,[19,[18]]],[[2,[[144,[20,18]],1]]]],0,0,0,0,0,[[],2],[[],2],[[],49],0,0,0,0,0,[[6,6,6],[[144,[20,18]]]],0,[[[145,[24,138]],5]],[[[145,[24,138]]]],[[[145,[24,[146,[16]],138]],[16,[46]]]],[[[145,[24,[146,[16]],138]],46]],[[[145,[24,138]]],12],[[[145,[24,138]]],12],[[]],[[]],[[]],[[],[[145,[24,[0,[138,147]]]]]],[[[145,[24,[0,[138,146]]]],46]],[[[145,[24,138]]],[[25,[24]]]],[[[145,[24,138]]],13],[[[145,[24,138]]],13],[[[145,[24,138]]],[[25,[24]]]],[[[145,[[0,[71,24]],[0,[71,138]]]],36],37],[[]],[[]],[[]],[[[137,[[145,[24,138]]]]],[[137,[12]]]],[[[145,[24,138]]],6],[138,[[145,[24,138]]]],[[[145,[24,138]]],24],0,0,[[[145,[24,138]]],[[7,[24]]]],[[],2],[[],2],[[],49],[[[145,[24,138]]],138],0,[[[145,[24,138]]],138],[[138,6],[[145,[24,138]]]],0,0,[[[148,[138,138]],5],[[2,[1]]]],[[[148,[138,138]]],12],[[[148,[138,138]]],12],[[]],[[]],[[]],[[]],[[]],[[]],[149,149],[[]],[[],149],0,0,[[[148,[138,138]]],13],[[[148,[138,138]]],26],[[[148,[138,138]]],13],[[[148,[138,138]]],26],[[[148,[138,138]],[124,[14]],[124,[14]],53,[16,[34]],6],26],[[[148,[[0,[71,138]],[0,[71,138]]]],36],37],[[149,36],37],[[]],[[]],[[]],[[]],[[]],[[]],[[[137,[[148,[138,138]]]]],[[137,[12]]]],0,0,[[[148,[138,138]]],138],[[[148,[138,138]]],6],[[[16,[149]],138,138],[[148,[138,138]]]],0,0,[[]],[[],2],[[],2],[[],2],[[],2],[[],49],[[],49],0,0,[[[148,[138,138]]],138],[[[16,[149]],138,138,6],[[148,[138,138]]]],0,[69],[[69,6]],[69],[[69,6]],[69,12],[69,12],[[]],[[]],[69,6],[[]],[[],69],[69,13],[69,68],[69,68],[69,13],[[69,36],37],[[]],[[]],[[]],[[[137,[69]]],[[137,[12]]]],[69,6],0,[[],69],[[],2],[[],2],[[],49],[6,69],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[70,[27]]]],[[[70,[27]],6]],[[[70,[27]],16]],[[[70,[27]],7]],[[[70,[27]],46]],[[[70,[27]]]],[[[70,[27]],7,[7,[5]]]],[[[70,[27]]],12],[[[70,[27]]],12],[[]],[[]],[[[70,[27]]],6],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[70,[27]]]],[[[70,[27]],46]],[[[70,[27]]],[[28,[27]]]],[[[70,[27]]],13],[[[70,[27]]],[[28,[27]]]],[[[70,[27]]],13],[[[70,[[0,[71,27]]]],36],37],[[]],[[]],[[]],[[[137,[[70,[27]]]]],[[137,[12]]]],[[[70,[27]]],6],[[],[[70,[27]]]],[[139,[16,[139]]],[[70,[27]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[70,[27]]]],[[],2],[[],2],[[],49],[[[70,[27]]],[[16,[[7,[39]]]]]],[[[70,[27]]],[[16,[[7,[39]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[70,[27]]],7],[[[70,[27]]],7],[6,[[70,[27]]]],[[[70,[27]],30],[[70,[27]]]],[[[70,[116]],39,105],[[2,[[70,[116]],1]]]],[[[70,[113]],[125,[[124,[59]]]]],[[70,[113]]]],[[[70,[113]],[16,[[125,[[124,[59]]]]]]],[[70,[113]]]],0,0,[[[58,[20,27]]],[[2,[1]]]],[[[58,[20,27]]]],[[[58,[20,27]],16]],[[[58,[20,27]]]],[[[58,[20,27]]],12],[[[58,[20,27]]],12],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[58,[27,27]]]],[[[151,[150]],[151,[150]]],5],[[],5],[[],5],[[[58,[20,27]],46]],[[[58,[20,27]]],13],[[[58,[20,27]]],[[21,[20]]]],[[[58,[20,27]]],[[21,[20]]]],[[[58,[20,27]]],13],[[[151,[71]],36],37],[[[58,[[0,[27,71]],[0,[27,71]]]],36],37],[[]],[[]],[[]],[[]],[[[151,[150]],152]],[[]],[[]],[[[137,[[58,[20,27]]]]],[[137,[12]]]],0,[[[58,[20,27]]],6],0,[[],[[58,[27,27]]]],[[[70,[27]],[70,[27]]],[[58,[27,27]]]],[[[70,[27]],[70,[27]]],[[58,[27,27]]]],[[],2],[[],2],[[],2],[[],2],[[],49],[[],49],0,[[[58,[20,27]]],7],[[[58,[20,27]]],7],[[6,6],[[58,[27,27]]]],0,[[[153,[126,27]]]],[[[153,[126,27]],16]],[[[153,[126,27]]]],[[[153,[126,27]],[70,[126]],[70,[27]]]],[[[153,[126,27]]]],[[[153,[126,27]]],12],[[[153,[126,27]]],12],[[]],[[]],[[]],0,0,[[],[[153,[126,27]]]],[[[153,[126,27]],46]],[[[153,[126,27]]],[[127,[126]]]],[[[153,[126,27]]],13],[[[153,[126,27]]],13],[[[153,[126,27]]],[[127,[126]]]],[[[153,[[0,[126,71]],[0,[27,71]]]],36],37],[[]],[[]],[[]],[[[137,[[153,[126,27]]]]],[[137,[12]]]],[[[153,[126,27]]],6],[[],[[153,[126,27]]]],0,[[[153,[126,27]]]],0,[[],2],[[],2],[[],49],0,[6,[[153,[126,27]]]],0,[[154,5]],[154],[154,12],[154,12],[[]],[[]],[[]],[[154,6],[[16,[138]]]],0,0,[154,13],[154,29],[154,13],[154,29],[[154,36],37],[[]],[[]],[[[125,[130]],6],154],[[]],[[[137,[154]]],[[137,[12]]]],[154,6],[[30,6],[[137,[138]]]],[[[125,[130]],[35,[[137,[138]]]]],154],0,[154,6],[[],2],[[],2],[[],49],[154],0,0,0,[[155,59],[[2,[1]]]],[[]],[156],[[155,59],[[2,[1]]]],[[155,59,16],[[2,[1]]]],[156],[[],12],[[]],[[]],[[]],[[]],[155,[[2,[131,1]]]],[[]],[[]],0,0,[[],53],[[156,36],37],[[155,36],37],[[]],[[]],[[]],[[]],0,[[]],[[]],0,[[105,30,6],156],[[],155],[[],155],0,0,[[],2],[[],2],[[],2],[[],2],[[],49],[[],49],0,0,0,0,[6,155],[6,155],0,0,[[],15],[[],[[16,[15]]]],[[],[[38,[24]]]],[[],[[16,[[38,[24]]]]]],[[],17],[14,17],[[],[[16,[17]]]],[[],[[19,[18]]]],[[],[[16,[[19,[18]]]]]],[14,[[28,[95]]]],[[],[[21,[20]]]],[14,[[21,[20]]]],[[],[[16,[[21,[20]]]]]],[[],22],[[],[[16,[22]]]],[[],23],[14,23],[[],[[16,[23]]]],[14,[[38,[24]]]],[14,[[25,[24]]]],[14,157],[14,158],[[],[[25,[24]]]],[14,65],[[],[[16,[[25,[24]]]]]],[[],26],[14,26],[[],[[16,[26]]]],[14,68],[[],[[28,[27]]]],[14,[[28,[27]]]],[[],[[16,[[28,[27]]]]]],[14,[[127,[126]]]],[[],[[40,[24]]]],[14,159],[[],[[16,[[40,[24]]]]]],[[],29],[14,29],[[],[[16,[29]]]],[14,131],[14,[[160,[31]]]],0,0,[[[121,[161]],62],[[16,[[121,[161]]]]]],[[[121,[161]],62],[[16,[[121,[161]]]]]],[[[0,[162,[164,[163]],[165,[163]]]],62],[[0,[162,[164,[163]],[165,[163]]]]]],[[[121,[161]],62],[[16,[[121,[161]]]]]],[[[121,[161]],62],[[16,[[121,[161]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[52,[[0,[71,44]]]],36],37],[[]],[[]],[[]],[[]],[[[52,[44]],6],5],0,0,0,0,0,0,0,0,0,[44,[[52,[44]]]],[[[52,[44]]],16],[[[52,[44]]],16],[[[52,[44]]]],[[],2],[[],2],[[],49],0,0,0,[3],[[]],[[]],[[]],[[]],[[],6],[[]],[7],[[]],0,[[],5],[8],[6,5],[5],[[]],[[6,5]],[[],8],[[]],[3],[7],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,11],[[]],[[],[[2,[1]]]],[[11,6],13],[[11,59],[[16,[13]]]],[11,[[7,[13]]]],0,[[],166],[[11,11],5],[[11,36],37],[[166,36],37],[[]],[29,11],[29,11],[[]],[[]],[[]],[[]],[[]],[11,6],[[11,59]],0,0,[[]],[[]],[[]],[[]],0,[[46,10],[[167,[46]]]],[[],166],[10,11],[[[167,[46]]],16],[[],[[2,[[16,[11]],1]]]],[[],[[2,[[16,[11]],1]]]],[11,6],[11,6],[[11,[7,[6]]],[[2,[11,1]]]],0,0,[[],10],[[[167,[46]]],10],[11,10],0,[[[167,[46]]]],[[11,6,6],11],[[]],[[],2],[[],2],[[],2],[46,[[2,[11,1]]]],[46,[[2,[11,1]]]],[[],2],[[],2],[[],2],[[10,[35,[13]]],[[2,[11,1]]]],[[10,[35,[13]],166],[[2,[11,1]]]],[[10,[35,[13]],166],[[2,[11,1]]]],[[],49],[[],49],[[],49],[[166,5],166],[[166,[16,[6]]],166],[[11,10],[[2,[11,1]]]],[11,[[2,[1]]]],0,0,[[]],[[]],[[]],0,0,0,0,[[[168,[[0,[126,71]],[0,[56,60,71]]]],36],37],[[]],[[]],[[]],[[]],[[[128,[126,[0,[56,60]]]]],[[168,[126,[0,[56,60]]]]]],[[[168,[126,[0,[56,60]]]]],16],[[[168,[126,[0,[56,60]]]]],16],[[[168,[126,[0,[56,60]]]]]],[[],2],[[],2],[[],49],0,0,[[]],[[]],[[]],[[[48,[[0,[169,14]]]]],[[48,[[0,[169,14]]]]]],[[]],[[[48,[[0,[71,14]]]],36],37],[[]],[[]],[[]],[[[48,[14]]]],[[]],[14,[[48,[14]]]],[[]],[[],2],[[],2],[[],49],0,0,0,0,0,0,0,0,[107,[[16,[118]]]],[107,[[16,[119]]]],[[107,120],[[16,[[121,[120]]]]]],[107,[[16,[122]]]],[107,[[16,[123]]]],[62,[[16,[119]]]],[107,[[16,[119]]]],[107,122],[107,122],[107,122],[107,122],[[107,107]],[62,[[16,[123]]]],[62,[[16,[123]]]],[107,[[16,[123]]]],[107,[[16,[123]]]],[123,62],[123,62],[123,107],[123,107],[107,[[16,[119]]]],[107,[[16,[119]]]],[107,[[16,[119]]]],[107,[[16,[119]]]],0,0,0,[59,[[16,[170]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[171,171],[120,120],[172,172],[[]],[[]],[[]],[171,170],[[171,36],37],[[171,36],37],[[120,36],37],[[172,36],37],[[]],[[]],[[]],[[]],[[]],[[]],[[],120],[59,[[2,[120]]]],[[]],[[]],[[]],0,[[120,118],173],[[120,119],173],[[120,118]],[[120,119]],[[]],[[]],[[]],[[],112],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],49],[[],49],[[],49],0,0,[41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[120,16],[120,16],[120,16],[120,16],[120,16],[[]],[[]],[120,16],[120,16],[120,16],[120,16],[120,16],[[]],[[]],[120,16],[120,16],[120,16],[120,16],[120,16],[[]],[[]],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[174,36],37],[[91,36],37],[[80,36],37],[[79,36],37],[[101,36],37],[[76,36],37],[[96,36],37],[[75,36],37],[[92,36],37],[[85,36],37],[[93,36],37],[[82,36],37],[[94,36],37],[[100,36],37],[[81,36],37],[[102,36],37],[[78,36],37],[[74,36],37],[[86,36],37],[[98,36],37],[[97,36],37],[[73,36],37],[[84,36],37],[[87,36],37],[[89,36],37],[[99,36],37],[[77,36],37],[[83,36],37],[[88,36],37],[[95,36],37],[[90,36],37],[[39,105],112],[[39,105],112],[[39,105],112],[[59,6,105],112],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[118],[118],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],175],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[119,[[16,[107]]]],[119,[[16,[107]]]],[119,[[16,[107]]]],[119,[[16,[107]]]],[119,[[16,[107]]]],[[62,62]],[[62,62]],[[62,62,107]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[8],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[6,5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[6,5]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[120,16],[120,16],[120,16],[120,16],[120,16],[[]],[[]],[120,16],[120,16],[120,16],[120,16],[120,16],[[]],[[]],[120,16],[120,16],[120,16],[120,16],[120,16],[[]],[[]],[[],62],[[],118],[[],118],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[3],[[33,53],[[2,[1]]]],[[33,53],[[2,[1]]]],[[33,53],[[2,[1]]]],[39,[[2,[1]]]],[[108,39],[[2,[1]]]],[[110,39],[[2,[1]]]],[[39,105],[[2,[1]]]],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],[7],0,0,[[[7,[39]]]],0,0],"c":[496,585,586,806,1185,1188,1417,1442,2822,2991,2992,3532],"p":[[4,"ArrowError",4199],[4,"Result",4200],[8,"Fn",4201],[4,"Ordering",4202],[15,"bool"],[15,"usize"],[15,"slice"],[15,"u64"],[15,"u32"],[6,"SchemaRef",4203],[3,"RecordBatch",2945],[8,"Any",4204],[6,"ArrayRef",114],[8,"Array",114],[8,"AnyDictionaryArray",628],[4,"Option",4205],[3,"BooleanArray",508],[8,"ByteArrayType",3157],[3,"GenericByteArray",562],[8,"ArrowDictionaryKeyType",3157],[3,"DictionaryArray",628],[3,"FixedSizeBinaryArray",767],[3,"FixedSizeListArray",821],[8,"OffsetSizeTrait",871],[3,"GenericListArray",871],[3,"MapArray",937],[8,"ArrowPrimitiveType",3157],[3,"PrimitiveArray",1022],[3,"StructArray",1431],[4,"DataType",4206],[3,"ArrayData",4207],[8,"ArrowNativeType",4208],[3,"OffsetBuffer",4209],[3,"NullBuffer",4210],[3,"Vec",4211],[3,"Formatter",4212],[6,"Result",4212],[6,"GenericBinaryArray",482],[15,"u8"],[6,"GenericStringArray",1404],[8,"Iterator",4213],[3,"BooleanBuilder",2007],[3,"BooleanBuffer",4214],[8,"ArrayAccessor",114],[8,"FnMut",4201],[8,"IntoIterator",4215],[6,"BooleanIter",2861],[3,"Scalar",3044],[3,"TypeId",4204],[3,"GenericBinaryType",3157],[3,"GenericByteBuilder",2280],[3,"ArrayIter",2861],[3,"Buffer",4216],[8,"AsRef",4217],[3,"GenericStringType",3157],[8,"Sync",4218],[3,"TypedDictionaryArray",628],[3,"PrimitiveDictionaryBuilder",2651],[15,"str"],[8,"Send",4218],[6,"FixedSizeBinaryIter",2861],[15,"i32"],[6,"FixedSizeListIter",2861],[6,"FieldRef",4219],[6,"ListArray",871],[6,"GenericListArrayIter",2861],[6,"MapArrayIter",2861],[3,"NullArray",988],[3,"NullBuilder",2459],[3,"PrimitiveBuilder",2487],[8,"Debug",4212],[3,"NativeAdapter",1022],[3,"Time64NanosecondType",3157],[3,"Date64Type",3157],[3,"UInt32Type",3157],[3,"UInt8Type",3157],[3,"DurationMillisecondType",3157],[3,"Date32Type",3157],[3,"Int32Type",3157],[3,"Int16Type",3157],[3,"TimestampMicrosecondType",3157],[3,"Float64Type",3157],[3,"DurationMicrosecondType",3157],[3,"IntervalYearMonthType",3157],[3,"Float16Type",3157],[3,"Time32SecondType",3157],[3,"IntervalDayTimeType",3157],[3,"DurationNanosecondType",3157],[3,"IntervalMonthDayNanoType",3157],[3,"Decimal256Type",3157],[3,"Int8Type",3157],[3,"UInt64Type",3157],[3,"Float32Type",3157],[3,"TimestampSecondType",3157],[3,"Decimal128Type",3157],[3,"UInt16Type",3157],[3,"Time64MicrosecondType",3157],[3,"Time32MillisecondType",3157],[3,"DurationSecondType",3157],[3,"TimestampMillisecondType",3157],[3,"Int64Type",3157],[3,"TimestampNanosecondType",3157],[15,"f64"],[15,"f32"],[15,"i8"],[3,"f16",4220],[15,"i64"],[15,"i128"],[15,"i16"],[3,"i256",4221],[15,"u16"],[3,"String",4222],[8,"ArrowTimestampType",3157],[6,"PrimitiveIter",2861],[3,"ScalarBuffer",4223],[8,"DecimalType",3157],[8,"ArrowTemporalType",3157],[3,"NaiveDate",4224],[3,"NaiveDateTime",4225],[3,"Tz",3100],[3,"DateTime",4226],[3,"Duration",4227],[3,"NaiveTime",4228],[3,"Arc",4229],[8,"Into",4217],[8,"RunEndIndexType",3157],[3,"RunArray",1312],[3,"TypedRunArray",1312],[3,"RunEndBuffer",4230],[3,"Fields",4231],[3,"UnionArray",1481],[3,"BooleanBufferBuilder",1526],[3,"BufferBuilder",1526],[3,"Range",4232],[3,"Error",4212],[3,"Global",4233],[3,"Box",4234],[8,"ArrayBuilder",1526],[3,"MutableBuffer",4235],[3,"FixedSizeBinaryBuilder",2164],[3,"FixedSizeListBuilder",2190],[3,"GenericByteRunBuilder",2217],[6,"GenericStringBuilder",2280],[3,"GenericByteDictionaryBuilder",2324],[3,"GenericListBuilder",2377],[8,"Extend",4215],[8,"Default",4236],[3,"MapBuilder",2411],[3,"MapFieldNames",2411],[8,"ToByteSlice",4208],[3,"Value",2651],[8,"Hasher",4237],[3,"PrimitiveRunBuilder",2700],[3,"StructBuilder",2734],[3,"UnionBuilder",2764],[3,"FieldData",2764],[6,"LargeListArray",871],[6,"LargeStringArray",1404],[6,"StringArray",1404],[8,"From",4217],[8,"TimeZone",4238],[8,"Datelike",4239],[3,"Months",4240],[8,"Add",4241],[8,"Sub",4241],[3,"RecordBatchOptions",2945],[3,"RecordBatchIterator",2945],[3,"RunArrayIter",3023],[8,"Clone",4242],[3,"FixedOffset",4243],[3,"TzOffset",3100],[4,"TzInner",3100],[4,"LocalResult",4238],[3,"BooleanType",3157],[4,"TimeUnit",4206],[8,"ArrowNativeTypeOp",82],[8,"ArrowNumericType",2922],[8,"RecordBatchWriter",2945],[8,"Datum",3044],[8,"RecordBatchReader",2945],[6,"BinaryArray",482],[6,"LargeBinaryArray",482],[6,"Int8DictionaryArray",628],[6,"Int16DictionaryArray",628],[6,"Int32DictionaryArray",628],[6,"Int64DictionaryArray",628],[6,"UInt8DictionaryArray",628],[6,"UInt16DictionaryArray",628],[6,"UInt32DictionaryArray",628],[6,"UInt64DictionaryArray",628],[6,"Int8Array",1022],[6,"Int16Array",1022],[6,"Int32Array",1022],[6,"Int64Array",1022],[6,"UInt8Array",1022],[6,"UInt16Array",1022],[6,"UInt32Array",1022],[6,"UInt64Array",1022],[6,"Float16Array",1022],[6,"Float32Array",1022],[6,"Float64Array",1022],[6,"TimestampSecondArray",1022],[6,"TimestampMillisecondArray",1022],[6,"TimestampMicrosecondArray",1022],[6,"TimestampNanosecondArray",1022],[6,"Date32Array",1022],[6,"Date64Array",1022],[6,"Time32SecondArray",1022],[6,"Time32MillisecondArray",1022],[6,"Time64MicrosecondArray",1022],[6,"Time64NanosecondArray",1022],[6,"IntervalYearMonthArray",1022],[6,"IntervalDayTimeArray",1022],[6,"IntervalMonthDayNanoArray",1022],[6,"DurationSecondArray",1022],[6,"DurationMillisecondArray",1022],[6,"DurationMicrosecondArray",1022],[6,"DurationNanosecondArray",1022],[6,"Decimal128Array",1022],[6,"Decimal256Array",1022],[6,"Int16RunArray",1312],[6,"Int32RunArray",1312],[6,"Int64RunArray",1312],[6,"Int8BufferBuilder",2040],[6,"Int16BufferBuilder",2040],[6,"Int32BufferBuilder",2040],[6,"Int64BufferBuilder",2040],[6,"UInt8BufferBuilder",2040],[6,"UInt16BufferBuilder",2040],[6,"UInt32BufferBuilder",2040],[6,"UInt64BufferBuilder",2040],[6,"Float16BufferBuilder",2040],[6,"Float32BufferBuilder",2040],[6,"Float64BufferBuilder",2040],[6,"Decimal128BufferBuilder",2040],[6,"Decimal256BufferBuilder",2040],[6,"TimestampSecondBufferBuilder",2040],[6,"TimestampMillisecondBufferBuilder",2040],[6,"TimestampMicrosecondBufferBuilder",2040],[6,"TimestampNanosecondBufferBuilder",2040],[6,"Date32BufferBuilder",2040],[6,"Date64BufferBuilder",2040],[6,"Time32SecondBufferBuilder",2040],[6,"Time32MillisecondBufferBuilder",2040],[6,"Time64MicrosecondBufferBuilder",2040],[6,"Time64NanosecondBufferBuilder",2040],[6,"IntervalYearMonthBufferBuilder",2040],[6,"IntervalDayTimeBufferBuilder",2040],[6,"IntervalMonthDayNanoBufferBuilder",2040],[6,"DurationSecondBufferBuilder",2040],[6,"DurationMillisecondBufferBuilder",2040],[6,"DurationMicrosecondBufferBuilder",2040],[6,"DurationNanosecondBufferBuilder",2040],[6,"StringRunBuilder",2217],[6,"LargeStringRunBuilder",2217],[6,"BinaryRunBuilder",2217],[6,"LargeBinaryRunBuilder",2217],[6,"Int8Builder",2487],[6,"Int16Builder",2487],[6,"Int32Builder",2487],[6,"Int64Builder",2487],[6,"UInt8Builder",2487],[6,"UInt16Builder",2487],[6,"UInt32Builder",2487],[6,"UInt64Builder",2487],[6,"Float16Builder",2487],[6,"Float32Builder",2487],[6,"Float64Builder",2487],[6,"TimestampSecondBuilder",2487],[6,"TimestampMillisecondBuilder",2487],[6,"TimestampMicrosecondBuilder",2487],[6,"TimestampNanosecondBuilder",2487],[6,"Date32Builder",2487],[6,"Date64Builder",2487],[6,"Time32SecondBuilder",2487],[6,"Time32MillisecondBuilder",2487],[6,"Time64MicrosecondBuilder",2487],[6,"Time64NanosecondBuilder",2487],[6,"IntervalYearMonthBuilder",2487],[6,"IntervalDayTimeBuilder",2487],[6,"IntervalMonthDayNanoBuilder",2487],[6,"DurationSecondBuilder",2487],[6,"DurationMillisecondBuilder",2487],[6,"DurationMicrosecondBuilder",2487],[6,"DurationNanosecondBuilder",2487],[6,"Decimal128Builder",2487],[6,"Decimal256Builder",2487],[6,"StringDictionaryBuilder",2324],[6,"LargeStringDictionaryBuilder",2324],[6,"BinaryDictionaryBuilder",2324],[6,"LargeBinaryDictionaryBuilder",2324],[6,"GenericBinaryBuilder",2280],[6,"ListBuilder",1526],[6,"LargeListBuilder",1526],[6,"BinaryBuilder",1526],[6,"LargeBinaryBuilder",1526],[6,"StringBuilder",1526],[6,"LargeStringBuilder",1526],[8,"FieldDataValues",2764],[8,"AsArray",2811],[6,"GenericStringIter",2861],[6,"GenericBinaryIter",2861],[6,"Utf8Type",3157],[6,"LargeUtf8Type",3157],[6,"BinaryType",3157],[6,"LargeBinaryType",3157],[8,"ByteArrayNativeType",4194]]},\
"arrow_buffer":{"doc":"Low-level buffer abstractions for Apache Arrow Rust","t":"IIAKAAAAAAAAKMDMAKKKKARINENALLLLLLLLRENNSSSSDSLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDLLLLLMLLLLFLFLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDFFFLLLLFFFFLFFFLFFLLLDDDGMMMMMMMMMMMMMMMDDDMMMMMMMMMMFFFFFFFFFFFDDDDDDDFFFAMMMFFFFMMAMMMMMAAMAMMAMMAMADLLLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLDLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLDDLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMLLLLLLLLLLLLLLLLLLLLLLLDLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLFFFFFFFDLLLLLLLLLLLLLLMLLLLMMLLLLLLDLLLMLLLLLLLLLLLLLLLMLLLLLLDDDMLLLLLLLLMALLMMLMLLLLLLLLLLMMMLLALLLLLDLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLDLLLLLLLLMLLMLLLLLLLMLLLLLLLLDLLLLLMLLLLLLLLLMLLMLLLIIKLLLLLLKOOAKKKKIAAAADDDGMMMMLLLLLLMMLMMLMFFLLLLLLLMLLLLLLLLLMLLLLLMFLLMLLMLMLLLLLLLLLDDDLLLLLLLMMMMMMMLLLLLLLLLLLMMMLLLLLLLFLLLLLLLLLFRRFFFFFFFFF","n":["ArrowNativeType","ToByteSlice","alloc","as_usize","bigint","bit_chunk_iterator","bit_iterator","bit_mask","bit_util","buffer","builder","bytes","from_usize","high","i256","low","native","to_byte_slice","to_isize","to_usize","usize_as","util","ALIGNMENT","Allocation","Custom","Deallocation","Standard","alignment","borrow","borrow_mut","fmt","from","into","try_from","try_into","type_id","ALIGNMENT","DivRemError","DivideByZero","DivideOverflow","MAX","MIN","MINUS_ONE","ONE","ParseI256Error","ZERO","add","add","add","add","as_digits","as_i128","as_usize","bitand","bitor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_abs","checked_add","checked_div","checked_mul","checked_neg","checked_pow","checked_rem","checked_sub","clone","clone_into","cmp","default","define_as_primitive","derive_op","div","div","div","div","div","div_rem","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_be_bytes","from_bigint_with_overflow","from_digits","from_f64","from_i128","from_le_bytes","from_parts","from_str","from_string","from_usize","hash","high","i256","into","into","into","is_negative","is_positive","low","mul","mul","mul","mul","mulx","neg","parse_impl","partial_cmp","rem","rem","rem","rem","shl","shr","signum","split_array","sub","sub","sub","sub","to_be_bytes","to_byte_slice","to_i128","to_i64","to_isize","to_le_bytes","to_owned","to_parts","to_string","to_string","to_u64","to_usize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","usize_as","wrapping_abs","wrapping_add","wrapping_div","wrapping_mul","wrapping_neg","wrapping_pow","wrapping_rem","wrapping_sub","ArrayPlusOne","add_assign","binop_slice","bits","borrow","borrow_mut","deref","deref_mut","div_rem","div_rem_knuth","div_rem_small","div_rem_word","from","full_mul_u64","full_shl","full_shr","into","shl_word","sub_assign","try_from","try_into","type_id","BitChunkIterator","BitChunks","UnalignedBitChunk","UnalignedBitChunkIterator","a","b","bit_offset","bit_offset","buffer","buffer","chunk_len","chunk_len","chunks","index","lead_padding","prefix","remainder_len","suffix","trailing_padding","BitIndexIterator","BitIterator","BitSliceIterator","buffer","chunk_offset","current_chunk","current_chunk","current_offset","current_offset","end_offset","iter","iter","len","try_for_each_valid_idx","set_bits","ceil","get_bit","get_bit_raw","round_upto_multiple_of_64","round_upto_power_of_2","set_bit","set_bit_raw","unset_bit","unset_bit_raw","BooleanBuffer","Buffer","MutableBuffer","NullBuffer","OffsetBuffer","RunEndBuffer","ScalarBuffer","bitwise_bin_op_helper","bitwise_quaternary_op_helper","bitwise_unary_op_helper","boolean","buffer","buffer","buffer","buffer_bin_and","buffer_bin_or","buffer_bin_xor","buffer_unary_not","data","data","immutable","layout","len","len","len","length","mutable","null","null_count","offset","offset","offset","ops","phantom","ptr","run","run_ends","scalar","BooleanBuffer","bit_chunks","bitand","bitor","bitxor","borrow","borrow_mut","buffer","clone","clone_into","collect_bool","count_set_bits","eq","equivalent","fmt","from","from","from","from","from_iter","inner","into","into_inner","into_iter","is_empty","is_set","iter","len","len","new","new_set","new_unset","not","offset","offset","ptr_eq","set_indices","set_slices","slice","sliced","to_owned","try_from","try_into","type_id","value","value_unchecked","values","Buffer","as_ptr","as_slice","bit_chunks","bit_slice","borrow","borrow_mut","build_with_arguments","capacity","clone","clone_into","count_set_bits","count_set_bits_offset","data","deallocation","deref","eq","equivalent","fmt","from","from","from","from","from_bytes","from_custom_allocation","from_iter","from_iter","from_raw_parts","from_slice_ref","from_trusted_len_iter","from_vec","into","into_mutable","into_vec","is_empty","len","length","ptr","ptr_eq","slice","slice_with_length","to_owned","try_from","try_from_trusted_len_iter","try_into","type_id","typed_data","MutableBuffer","SetLenOnDrop","as_mut_ptr","as_ptr","as_slice","as_slice_mut","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","collect_bool","dangling_ptr","data","default","deref","deref_mut","drop","drop","eq","extend","extend_from_iter","extend_from_slice","extend_zeros","fmt","freeze","from","from","from","from_bytes","from_iter","from_iter","from_len_zeroed","from_trusted_len_iter","from_trusted_len_iter_bool","from_vec","into","into","into_buffer","is_empty","layout","len","len","len","local_len","new","new","new_null","push","push_unchecked","reallocate","reserve","resize","set_len","set_null_bits","shrink_to_fit","truncate","try_from","try_from","try_from_trusted_len_iter","try_into","try_into","type_id","type_id","typed_data","typed_data_mut","with_bitset","with_capacity","NullBuffer","borrow","borrow_mut","buffer","buffer","clone","clone_into","contains","eq","equivalent","expand","fmt","from","from","from","from","from_iter","inner","into","into_inner","into_iter","is_empty","is_null","is_valid","iter","len","new","new_null","new_unchecked","new_valid","null_count","null_count","offset","slice","to_owned","try_for_each_valid_idx","try_from","try_into","type_id","union","valid_indices","valid_slices","validity","OffsetBuffer","as_ref","borrow","borrow_mut","clone","clone_into","deref","fmt","from","from_lengths","inner","into","into_inner","new","new_empty","new_unchecked","new_zeroed","ptr_eq","slice","to_owned","try_from","try_into","type_id","bitwise_bin_op_helper","bitwise_quaternary_op_helper","bitwise_unary_op_helper","buffer_bin_and","buffer_bin_or","buffer_bin_xor","buffer_unary_not","RunEndBuffer","borrow","borrow_mut","clone","clone_into","fmt","from","get_end_physical_index","get_physical_index","get_start_physical_index","inner","into","into_inner","is_empty","len","len","max_value","new","new_unchecked","offset","offset","run_ends","slice","to_owned","try_from","try_into","type_id","values","ScalarBuffer","as_ref","borrow","borrow_mut","buffer","clone","clone_into","deref","eq","fmt","from","from","from","from","from_iter","inner","into","into_inner","into_iter","new","phantom","ptr_eq","slice","to_owned","try_from","try_into","type_id","BooleanBufferBuilder","BufferBuilder","NullBufferBuilder","_marker","advance","append","append_n","append_n_zeroed","append_slice","append_trusted_len_iter","as_slice","as_slice_mut","bitmap_builder","boolean","borrow","borrow_mut","buffer","buffer","capacity","capacity","default","extend","finish","fmt","from","from","from_iter","into","is_empty","len","len","len","len","new","new_from_buffer","null","reserve","truncate","try_from","try_into","type_id","BooleanBufferBuilder","advance","append","append_buffer","append_n","append_packed_range","append_slice","as_slice","as_slice_mut","borrow","borrow_mut","buffer","capacity","finish","finish_cloned","fmt","from","get_bit","into","is_empty","len","len","new","new_from_buffer","reserve","resize","set_bit","truncate","try_from","try_into","type_id","NullBufferBuilder","append","append_n_non_nulls","append_n_nulls","append_non_null","append_null","append_slice","as_slice","as_slice_mut","bitmap_builder","borrow","borrow_mut","capacity","finish","finish_cloned","fmt","from","into","is_empty","len","len","materialize","materialize_if_needed","new","new_from_buffer","new_with_len","try_from","try_into","type_id","Bytes","as_slice","borrow","borrow_mut","capacity","deallocation","deallocation","deref","drop","eq","fmt","from","from","into","is_empty","len","len","new","ptr","ptr","try_from","try_into","type_id","ArrowNativeType","ToByteSlice","as_usize","from_i128","from_i128","from_i32","from_i32","from_i64","from_i64","from_usize","native_float","native_integer","private","to_byte_slice","to_isize","to_usize","usize_as","Sealed","bit_chunk_iterator","bit_iterator","bit_mask","bit_util","BitChunkIterator","BitChunks","UnalignedBitChunk","UnalignedBitChunkIterator","a","b","bit_offset","bit_offset","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","chunk_len","chunk_len","chunk_len","chunks","chunks","compute_prefix_mask","compute_suffix_mask","count_ones","fmt","fmt","fmt","from","from","from","index","into","into","into","into_iter","into_iter","iter","iter","iter_padded","lead_padding","lead_padding","len","new","new","next","prefix","prefix","read_u64","remainder_bits","remainder_len","remainder_len","size_hint","suffix","suffix","trailing_padding","trailing_padding","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BitIndexIterator","BitIterator","BitSliceIterator","advance_to_set_bit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","chunk_offset","current_chunk","current_chunk","current_offset","current_offset","end_offset","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","iter","iter","len","new","new","new","next","next","next","next_back","try_for_each_valid_idx","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","set_bits","BIT_MASK","UNSET_BIT_MASK","ceil","get_bit","get_bit_raw","round_upto_multiple_of_64","round_upto_power_of_2","set_bit","set_bit_raw","unset_bit","unset_bit_raw"],"q":[[0,"arrow_buffer"],[22,"arrow_buffer::alloc"],[36,"arrow_buffer::alloc::alignment"],[37,"arrow_buffer::bigint"],[165,"arrow_buffer::bigint::div"],[187,"arrow_buffer::bit_chunk_iterator"],[206,"arrow_buffer::bit_iterator"],[220,"arrow_buffer::bit_mask"],[221,"arrow_buffer::bit_util"],[230,"arrow_buffer::buffer"],[268,"arrow_buffer::buffer::boolean"],[315,"arrow_buffer::buffer::immutable"],[362,"arrow_buffer::buffer::mutable"],[431,"arrow_buffer::buffer::null"],[474,"arrow_buffer::buffer::offset"],[497,"arrow_buffer::buffer::ops"],[504,"arrow_buffer::buffer::run"],[532,"arrow_buffer::buffer::scalar"],[559,"arrow_buffer::builder"],[600,"arrow_buffer::builder::boolean"],[631,"arrow_buffer::builder::null"],[660,"arrow_buffer::bytes"],[683,"arrow_buffer::native"],[700,"arrow_buffer::native::private"],[701,"arrow_buffer::util"],[705,"arrow_buffer::util::bit_chunk_iterator"],[770,"arrow_buffer::util::bit_iterator"],[818,"arrow_buffer::util::bit_mask"],[819,"arrow_buffer::util::bit_util"],[830,"core::option"],[831,"core::fmt"],[832,"core::fmt"],[833,"core::any"],[834,"core::cmp"],[835,"core::num::error"],[836,"num_bigint::bigint"],[837,"core::hash"],[838,"alloc::string"],[839,"core::ops::function"],[840,"core::marker"],[841,"core::ops::function"],[842,"core::iter::traits::collect"],[843,"core::ptr::non_null"],[844,"core::convert"],[845,"alloc::sync"],[846,"core::iter::traits::iterator"],[847,"core::clone"],[848,"core::fmt"],[849,"bytes::bytes"]],"d":["Trait expressing a Rust type that has the same in-memory …","Allows conversion from supported Arrow types to a byte …","Defines the low-level <code>Allocation</code> API for shared memory …","Convert to usize according to the <code>as</code> operator","","Types for iterating over bitmasks in 64-bit chunks","Types for iterating over packed bitmasks","Utils for working with packed bit masks","Utils for working with bits","Types of shared memory region","Buffer builders","This module contains an implementation of a contiguous …","Convert native integer type from usize","","A signed 256-bit integer","","","Converts this instance into a byte slice","Convert native type to isize.","Convert native type to usize.","Convert from usize according to the <code>as</code> operator","","Cache and allocation multiple alignment size","The owner of an allocation. The trait implementation is …","An allocation from an external source like the FFI …","Mode of deallocating memory regions","An allocation using <code>std::alloc</code>","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Cache and allocation multiple alignment size","Error returned by i256::DivRem","Division by zero","Division overflow","The maximum value that can be represented by this integer …","The minimum value that can be represented by this integer …","The multiplicative inverse for this integer type, i.e. <code>-1</code>.","The multiplicative identity for this integer type, i.e. <code>1</code>.","An opaque error similar to <code>std::num::ParseIntError</code>","The additive identity for this integer type, i.e. <code>0</code>.","","","","","Interpret this <code>i256</code> as 4 <code>u64</code> digits, least significant …","Wraps this <code>i256</code> into an <code>i128</code>","","","","","","","","","","","Computes the absolute value of this i256 returning <code>None</code> if …","Performs checked addition","Performs checked division","Performs checked multiplication","Negates this i256 returning <code>None</code> if <code>Self == Self::MIN</code>","Performs checked exponentiation","Performs checked remainder","Performs checked subtraction","","","","","","","N-digit division","","","","","Division operation, returns (quotient, remainder). This …","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Create an integer value from its representation as a byte …","Create an i256 from the provided <code>BigInt</code> returning a bool …","Interpret 4 <code>u64</code> digits, least significant first, as a <code>i256</code>","Create an optional i256 from the provided <code>f64</code>. Returning …","","Create an integer value from its representation as a byte …","Create an i256 from the provided low u128 and high i128","","Create an integer value from its representation as string.","","","","A signed 256-bit integer","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this <code>i256</code> is negative","Returns <code>true</code> if this <code>i256</code> is positive","","","","","","Performs an unsigned multiplication of <code>a * b</code> returning a …","","Parse <code>s</code> with any sign and leading 0s removed","","","","","","","","Returns a number <code>i256</code> representing sign of this <code>i256</code>.","Temporary workaround due to lack of stable const array …","","","","","Return the memory representation of this integer as a byte …","","Converts this <code>i256</code> into an <code>i128</code> returning <code>None</code> if this …","","","Return the memory representation of this integer as a byte …","","Returns this <code>i256</code> as a low u128 and high i128","","","","","","","","","","","","","","","Computes the absolute value of this i256","Performs wrapping addition","Performs wrapping division","Performs wrapping multiplication","Negates this i256","Performs wrapping exponentiation","Performs wrapping remainder","Performs wrapping subtraction","An array of N + 1 elements","Perform <code>a += b</code>","Converts an overflowing binary operation on scalars to one …","Return the least number of bits needed to represent the …","","","","","Unsigned, little-endian, n-digit division with remainder","Use Knuth Algorithm D to compute <code>numerator / divisor</code> …","Division of numerator by a u64 divisor","Perform narrowing division of a u128 by a u64 divisor, …","Returns the argument unchanged.","Widening multiplication of an N-digit array with a u64","Widening left shift of an N-digit array by at most 63 bits","Narrowing right shift of an (N+1)-digit array by at most …","Calls <code>U::from(self)</code>.","Left shift of an N-digit array by at most 63 bits","Perform <code>a -= b</code>","","","","","Iterates over an arbitrarily aligned byte buffer","Iterates over an arbitrarily aligned byte buffer","","","","offset inside a byte, guaranteed to be between 0 and 7 …","","","","number of complete u64 chunks","","","","","","number of remaining bits, guaranteed to be between 0 and …","","","An iterator of <code>usize</code> whose index in a provided bitmask is …","Iterator over the bits within a packed bitmask","Iterator of contiguous ranges of set bits within a …","","","","","","","","","","","Calls the provided closure for each index in the provided …","Sets all bits on <code>write_data</code> in the range …","Returns the ceil of <code>value</code>/<code>divisor</code>","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","Returns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …","Returns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…","Sets bit at position <code>i</code> for <code>data</code> to 1","Sets bit at position <code>i</code> for <code>data</code>","Sets bit at position <code>i</code> for <code>data</code> to 0","Sets bit at position <code>i</code> for <code>data</code> to 0","A slice-able <code>Buffer</code> containing bit-packed booleans","Buffer represents a contiguous memory region that can be …","A <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …","A <code>BooleanBuffer</code> used to encode validity for arrow arrays","A non-empty buffer of monotonically increasing, positive …","A slice-able buffer of monotonically increasing, positive …","A strongly-typed <code>Buffer</code> supporting zero-copy cloning and …","Apply a bitwise operation <code>op</code> to two inputs and return the …","Apply a bitwise operation <code>op</code> to four inputs and return the …","Apply a bitwise operation <code>op</code> to one input and return the …","","Underlying data buffer","","","Apply a bitwise and to two inputs and return the result as …","Apply a bitwise or to two inputs and return the result as …","Apply a bitwise xor to two inputs and return the result as …","Apply a bitwise not to one input and return the result as …","the internal byte buffer.","","","","","","","Byte length of the buffer.","","","","","","","","","Pointer into <code>data</code> valid","","","","A slice-able <code>Buffer</code> containing bit-packed booleans","Returns a <code>BitChunks</code> instance which can be used to iterate …","","","","","","","","","Invokes <code>f</code> with indexes <code>0..len</code> collecting the boolean …","Returns the number of set bits in this buffer","","","","Returns the argument unchanged.","","","","","Returns the inner <code>Buffer</code>","Calls <code>U::from(self)</code>.","Returns the inner <code>Buffer</code>, consuming self","","Returns true if this <code>BooleanBuffer</code> is empty","Returns <code>true</code> if the bit at index <code>i</code> is set","Returns an iterator over the bits in this <code>BooleanBuffer</code>","Returns the length of this <code>BooleanBuffer</code> in bits","","Create a new <code>BooleanBuffer</code> from a <code>Buffer</code>, an <code>offset</code> and …","Create a new <code>BooleanBuffer</code> of <code>length</code> where all values are …","Create a new <code>BooleanBuffer</code> of <code>length</code> where all values are …","","Returns the offset of this <code>BooleanBuffer</code> in bits","","Returns true if this <code>BooleanBuffer</code> is equal to <code>other</code>, …","Returns an iterator over the set bit positions in this …","Returns a <code>BitSliceIterator</code> yielding contiguous ranges of …","Slices this <code>BooleanBuffer</code> by the provided <code>offset</code> and <code>length</code>","Returns a <code>Buffer</code> containing the sliced contents of this …","","","","","Returns the boolean value at index <code>i</code>.","Returns the boolean value at index <code>i</code>.","Returns the packed values of this <code>BooleanBuffer</code> not …","Buffer represents a contiguous memory region that can be …","Returns a pointer to the start of this buffer.","Returns the byte slice stored in this buffer","Returns a <code>BitChunks</code> instance which can be used to iterate …","Returns a slice of this buffer starting at a certain bit …","","","Auxiliary method to create a new Buffer","Returns the capacity of this buffer. For externally owned …","","","Returns the number of 1-bits in this buffer.","Returns the number of 1-bits in this buffer, starting from …","the internal byte buffer.","","","","","","","","","Returns the argument unchanged.","Auxiliary method to create a new Buffer","Creates a buffer from an existing memory region. Ownership …","","","Creates a buffer from an existing aligned memory region …","Initializes a Buffer from a slice of items.","Creates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …","Create a <code>Buffer</code> from the provided <code>Vec</code> without copying","Calls <code>U::from(self)</code>.","Returns <code>MutableBuffer</code> for mutating the buffer if this …","Returns <code>Vec</code> for mutating the buffer","Returns whether the buffer is empty.","Returns the number of bytes in the buffer","Byte length of the buffer.","Pointer into <code>data</code> valid","Returns true if this <code>Buffer</code> is equal to <code>other</code>, using …","Returns a new Buffer that is a slice of this buffer …","Returns a new Buffer that is a slice of this buffer …","","","Creates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …","","","View buffer as a slice of a specific type.","A <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …","","Returns a mutable raw pointer to this buffer’s internal …","Returns a raw pointer to this buffer’s internal memory …","Returns the data stored in this buffer as a slice.","Returns the data stored in this buffer as a mutable slice.","","","","","Returns the total capacity in this buffer. The invariant …","Clear all existing data from this buffer.","Invokes <code>f</code> with values <code>0..len</code> collecting the boolean …","","","","","","","","","","","Extends this buffer from a slice of items that can be …","Extends the buffer by <code>additional</code> bytes equal to <code>0u8</code>, …","","Freezes this buffer and return an immutable version of it.","Returns the argument unchanged.","Returns the argument unchanged.","","Allocates a new MutableBuffer from given <code>Bytes</code>.","","","Allocates a new MutableBuffer with <code>len</code> and capacity to be …","Creates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …","Creates a <code>MutableBuffer</code> from a boolean <code>Iterator</code> with a …","Create a <code>MutableBuffer</code> from the provided <code>Vec</code> without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns whether this buffer is empty or not.","","Returns the length (the number of bytes written) in this …","","","","","Allocate a new MutableBuffer with initial capacity to be …","creates a new MutableBuffer with capacity and length …","Extends the buffer with a new item, increasing its …","Extends the buffer with a new item, without checking for …","","Ensures that this buffer has at least <code>self.len + additional</code>…","Resizes the buffer, either truncating its contents (with …","Safety","Ensure that <code>count</code> bytes from <code>start</code> contain zero bits","Shrinks the capacity of the buffer as much as possible. …","Truncates this buffer to <code>len</code> bytes","","","Creates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …","","","","","View buffer as a immutable slice of a specific type.","View this buffer as a mutable slice of a specific type.","Set the bits in the range of <code>[0, end)</code> to 0 (if <code>val</code> is …","Allocate a new MutableBuffer with initial capacity to be …","A <code>BooleanBuffer</code> used to encode validity for arrow arrays","","","Returns the underlying <code>Buffer</code>","","","","Returns true if all nulls in <code>other</code> also exist in self","","","Returns a new <code>NullBuffer</code> where each bit in the current …","","","Returns the argument unchanged.","","","","Returns the inner <code>BooleanBuffer</code>","Calls <code>U::from(self)</code>.","Returns the inner <code>BooleanBuffer</code>","","Returns true if this <code>NullBuffer</code> is empty","Returns <code>true</code> if the value at <code>idx</code> is null","Returns <code>true</code> if the value at <code>idx</code> is not null","Returns an iterator over the bits in this <code>NullBuffer</code>","Returns the length of this <code>NullBuffer</code>","Create a new <code>NullBuffer</code> computing the null count","Create a new <code>NullBuffer</code> of length <code>len</code> where all values are …","Create a new <code>NullBuffer</code> with the provided <code>buffer</code> and …","Create a new <code>NullBuffer</code> of length <code>len</code> where all values are …","Returns the null count for this <code>NullBuffer</code>","","Returns the offset of this <code>NullBuffer</code> in bits","Slices this <code>NullBuffer</code> by the provided <code>offset</code> and <code>length</code>","","Calls the provided closure for each index in this null …","","","","Computes the union of the nulls in two optional <code>NullBuffer</code>","Returns a <code>BitIndexIterator</code> over the valid indices in this …","Returns a <code>BitSliceIterator</code> yielding contiguous ranges of …","Returns the packed validity of this <code>NullBuffer</code> not …","A non-empty buffer of monotonically increasing, positive …","","","","","","","","Returns the argument unchanged.","Create a new <code>OffsetBuffer</code> from the iterator of slice …","Returns the inner <code>ScalarBuffer</code>","Calls <code>U::from(self)</code>.","Returns the inner <code>ScalarBuffer</code>, consuming self","Create a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>","Create a new <code>OffsetBuffer</code> containing a single 0 value","Create a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>","Create a new <code>OffsetBuffer</code> containing <code>len + 1</code> <code>0</code> values","Returns true if this <code>OffsetBuffer</code> is equal to <code>other</code>, using …","Returns a zero-copy slice of this buffer with length <code>len</code> …","","","","","Apply a bitwise operation <code>op</code> to two inputs and return the …","Apply a bitwise operation <code>op</code> to four inputs and return the …","Apply a bitwise operation <code>op</code> to one input and return the …","Apply a bitwise and to two inputs and return the result as …","Apply a bitwise or to two inputs and return the result as …","Apply a bitwise xor to two inputs and return the result as …","Apply a bitwise not to one input and return the result as …","A slice-able buffer of monotonically increasing, positive …","","","","","","Returns the argument unchanged.","Returns the physical index at which the logical array ends","Performs a binary search to find the physical index for …","Returns the physical index at which the logical array …","Returns the inner <code>ScalarBuffer</code>","Calls <code>U::from(self)</code>.","Returns the inner <code>ScalarBuffer</code>, consuming self","Returns true if this buffer is empty","Returns the logical length of the run-ends stored by this …","","Returns the maximum run-end encoded in the underlying …","Create a new <code>RunEndBuffer</code> from a <code>ScalarBuffer</code>, an <code>offset</code> …","Create a new <code>RunEndBuffer</code> from an <code>ScalarBuffer</code>, an <code>offset</code> …","Returns the logical offset into the run-ends stored by …","","","Slices this <code>RunEndBuffer</code> by the provided <code>offset</code> and <code>length</code>","","","","","Returns the values of this <code>RunEndBuffer</code> not including any …","A strongly-typed <code>Buffer</code> supporting zero-copy cloning and …","","","","Underlying data buffer","","","","","","","","","Returns the argument unchanged.","","Returns the inner <code>Buffer</code>","Calls <code>U::from(self)</code>.","Returns the inner <code>Buffer</code>, consuming self","","Create a new <code>ScalarBuffer</code> from a <code>Buffer</code>, and an <code>offset</code> and …","","Returns true if this <code>ScalarBuffer</code> is equal to <code>other</code>, using …","Returns a zero-copy slice of this buffer with length <code>len</code> …","","","","","Builder for <code>BooleanBuffer</code>","Builder for creating a Buffer object.","Builder for creating the null bit buffer. This builder …","","Increases the number of elements in the internal buffer by …","Appends a value of type <code>T</code> into the builder, growing the …","Appends a value of type <code>T</code> into the builder N times, …","Appends <code>n</code>, zero-initialized values","Appends a slice of type <code>T</code>, growing the internal buffer as …","Safety","View the contents of this buffer as a slice","View the contents of this buffer as a mutable slice","","","","","","","Returns the actual capacity (number of elements) of the …","","","","Resets this builder and returns an immutable Buffer.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns whether the internal buffer is empty.","Returns the current number of array elements in the …","","Store the length of the buffer before materializing.","","Creates a new builder with initial capacity for <em>at least</em> …","Creates a new builder from a <code>MutableBuffer</code>","","Reserves memory for <em>at least</em> <code>n</code> more elements of type <code>T</code>.","Shorten this BufferBuilder to <code>len</code> items","","","","Builder for <code>BooleanBuffer</code>","Advances the buffer by <code>additional</code> bits","Appends a boolean <code>v</code> into the buffer","Append <code>BooleanBuffer</code> to this <code>BooleanBufferBuilder</code>","Appends n <code>additional</code> bits of value <code>v</code> into the buffer","Append <code>range</code> bits from <code>to_set</code>","Appends a slice of booleans into the buffer","Returns the packed bits","Returns the packed bits","","","","Returns the capacity of the buffer","Creates a <code>BooleanBuffer</code>","Builds the BooleanBuffer without resetting the builder.","","Returns the argument unchanged.","Gets a bit in the buffer at <code>index</code>","Calls <code>U::from(self)</code>.","Returns true if empty","Returns the length of the buffer","","Creates a new <code>BooleanBufferBuilder</code>","Creates a new <code>BooleanBufferBuilder</code> from <code>MutableBuffer</code> of …","Reserve space to at least <code>additional</code> new bits. Capacity …","Resizes the buffer, either truncating its contents (with …","Sets a bit in the buffer at <code>index</code>","Truncates the builder to the given length","","","","Builder for creating the null bit buffer. This builder …","Appends a boolean value into the builder.","Appends <code>n</code> <code>true</code>s into the builder to indicate that these <code>n</code> …","Appends <code>n</code> <code>false</code>s into the builder to indicate that these <code>n</code> …","Appends a <code>true</code> into the builder to indicate that this item …","Appends a <code>false</code> into the builder to indicate that this …","Appends a boolean slice into the builder to indicate the …","Returns the inner bitmap builder as slice","","","","","","Builds the null buffer and resets the builder. Returns <code>None</code>…","Builds the NullBuffer without resetting the builder.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Store the length of the buffer before materializing.","","","Creates a new empty builder. <code>capacity</code> is the number of …","Creates a new builder from a <code>MutableBuffer</code>.","Creates a new builder with given length.","","","","A continuous, fixed-size, immutable memory region that …","","","","","","how to deallocate this region","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","The number of bytes visible to this region. This is always …","Takes ownership of an allocated memory region,","","The raw pointer to be beginning of the region","","","","Trait expressing a Rust type that has the same in-memory …","Allows conversion from supported Arrow types to a byte …","Convert to usize according to the <code>as</code> operator","Convert native type from i128.","Convert native type from i128.","Convert native type from i32.","Convert native type from i32.","Convert native type from i64.","Convert native type from i64.","Convert native integer type from usize","","","","Converts this instance into a byte slice","Convert native type to isize.","Convert native type to usize.","Convert from usize according to the <code>as</code> operator","","Types for iterating over bitmasks in 64-bit chunks","Types for iterating over packed bitmasks","Utils for working with packed bit masks","Utils for working with bits","","Iterates over an arbitrarily aligned byte buffer","Iterates over an arbitrarily aligned byte buffer","","","","offset inside a byte, guaranteed to be between 0 and 7 …","","","","","","","","","","Returns the number of chunks","number of complete u64 chunks","","","","","","Counts the number of ones","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns an iterator over chunks of 64 bits represented as …","Returns an iterator over chunks of 64 bits, with the …","","","","Create a from a byte array, and and an offset and length …","","","","","","Returns the bitmask of remaining bits","Returns the number of remaining bits, guaranteed to be …","number of remaining bits, guaranteed to be between 0 and …","","","","","","","","","","","","","","","An iterator of <code>usize</code> whose index in a provided bitmask is …","Iterator over the bits within a packed bitmask","Iterator of contiguous ranges of set bits within a …","Returns <code>Some((chunk_offset, bit_offset))</code> for the next …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a new <code>BitIterator</code> from the provided <code>buffer</code>, and …","Create a new <code>BitSliceIterator</code> from the provided <code>buffer</code>, …","Create a new <code>BitIndexIterator</code> from the provide <code>buffer</code>, and …","","","","","Calls the provided closure for each index in the provided …","","","","","","","","","","Sets all bits on <code>write_data</code> in the range …","","","Returns the ceil of <code>value</code>/<code>divisor</code>","Returns whether bit at position <code>i</code> in <code>data</code> is set or not","Returns whether bit at position <code>i</code> in <code>data</code> is set or not.","Returns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …","Returns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…","Sets bit at position <code>i</code> for <code>data</code> to 1","Sets bit at position <code>i</code> for <code>data</code>","Sets bit at position <code>i</code> for <code>data</code> to 0","Sets bit at position <code>i</code> for <code>data</code> to 0"],"i":[0,0,0,50,0,0,0,0,0,0,0,0,50,11,0,11,0,53,50,50,50,0,0,0,6,0,6,0,6,6,6,6,6,6,6,6,0,0,17,17,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,17,19,11,17,19,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,11,11,11,11,11,11,11,19,19,11,11,17,19,19,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,17,19,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,19,11,11,11,17,19,11,17,19,11,17,19,11,11,11,11,11,11,11,11,11,11,0,0,0,0,33,33,33,33,0,0,0,0,33,0,0,0,33,0,0,33,33,33,0,0,0,0,67,67,37,66,37,66,37,66,65,66,65,65,37,65,65,0,0,0,41,42,43,42,41,43,41,43,42,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,36,54,0,0,0,0,35,45,0,45,45,36,59,35,0,0,54,0,36,59,0,58,35,0,59,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,45,45,45,45,52,45,52,45,45,45,45,0,45,45,45,45,52,45,45,45,45,45,45,45,45,52,45,45,45,45,45,45,45,45,45,52,45,45,45,45,45,52,45,52,52,45,45,45,45,45,45,45,45,45,45,45,52,45,45,52,45,52,45,45,45,45,45,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,0,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,61,61,61,61,61,61,61,61,61,63,0,61,61,38,61,61,63,61,61,61,61,61,61,61,61,61,61,38,63,61,61,61,0,61,61,61,61,61,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,50,50,50,50,50,50,50,50,0,0,0,53,50,50,50,0,0,0,0,0,0,0,0,0,67,67,37,66,65,37,66,65,37,66,37,66,37,37,66,65,65,0,0,65,65,37,66,65,37,66,66,65,37,66,37,66,65,37,37,65,65,66,65,37,66,65,65,0,37,37,37,66,65,65,65,65,65,37,66,65,37,66,65,37,66,0,0,0,43,41,43,42,41,43,42,41,42,43,42,41,43,41,43,42,41,43,42,41,43,42,41,43,42,43,42,43,41,43,42,41,43,42,41,0,41,43,42,41,43,42,41,43,42,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[[],1],0,0,0,0,0,0,0,0,[1,2],0,0,0,0,[[],[[4,[3]]]],[[],[[2,[5]]]],[[],[[2,[1]]]],[1],0,0,0,0,0,0,0,[[]],[[]],[[6,7],8],[[]],[[]],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,[[11,11]],[[11,11]],[[11,11]],[[11,11]],[11,[[13,[12]]]],[11,14],[11,1],[[11,11]],[[11,11]],[[11,11]],[[]],[[]],[[]],[[]],[[]],[[]],[11,[[2,[11]]]],[[11,11],[[2,[11]]]],[[11,11],[[2,[11]]]],[[11,11],[[2,[11]]]],[11,[[2,[11]]]],[[11,15],[[2,[11]]]],[[11,11],[[2,[11]]]],[[11,11],[[2,[11]]]],[11,11],[[]],[[11,11],16],[[],11],0,0,0,[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,11],[[9,[17]]]],[[11,11],18],[[],18],[[19,7],8],[[19,7],8],[[11,7],8],[[11,7],8],[[]],[20,19],[[]],[[]],[21,11],[22,11],[23,11],[24,11],[[[13,[3]]],11],[25],[[[13,[12]]],11],[26,[[2,[11]]]],[14,11],[[[13,[3]]],11],[[27,14],11],[28,[[9,[11]]]],[28,[[2,[11]]]],[1,[[2,[11]]]],[[11,29]],0,0,[[]],[[]],[[]],[11,18],[11,18],0,[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[27,27]],[11],[[28,18],[[9,[11,19]]]],[[11,11],[[2,[16]]]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[[11,3]],[[11,3]],[11,11],[[[13,[3]]]],[[11,11]],[[11,11]],[[11,11]],[[11,11]],[11,[[13,[3]]]],[[],[[4,[3]]]],[11,[[2,[14]]]],[11,[[2,[22]]]],[11,[[2,[5]]]],[11,[[13,[3]]]],[[]],[11],[[],30],[[],30],[11,[[2,[12]]]],[11,[[2,[1]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[1,11],[11,11],[[11,11],11],[[11,11],11],[[11,11],11],[11,11],[[11,15],11],[[11,11],11],[[11,11],11],0,[[[4,[12]],[4,[12]]],18],[[[4,[12]],[4,[12]],[0,[31,32]]],18],[[[4,[12]]],1],[[]],[[]],[33],[33],[[[13,[12]],[13,[12]]]],[[[13,[12]],[13,[12]],1,1]],[[[13,[12]],12]],[[12,12,12]],[[]],[[[13,[12]],12],[[33,[12]]]],[[[13,[12]],15],[[33,[12]]]],[[[33,[12]],15],[[13,[12]]]],[[]],[[[13,[12]],15],[[13,[12]]]],[[[4,[12]],[4,[12]]],18],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1,1,[2,[[4,[3]]]],34],9],[[[4,[3]],[4,[3]],1,1,1],1],[[1,1],1],[[[4,[3]],1],18],[[3,1],18],[1,1],[[1,1],1],[[[4,[3]],1]],[[3,1]],[[[4,[3]],1]],[[3,1]],0,0,0,0,0,0,0,[[35,1,35,1,1,34],35],[[[13,[35]],[13,[1]],1,31],35],[[35,1,1,34],35],0,0,0,0,[[35,1,35,1,1],35],[[35,1,35,1,1],35],[[35,1,35,1,1],35],[[35,1,1],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[36,37],[[36,36]],[[36,36]],[[36,36]],[[]],[[]],0,[36,36],[[]],[[1,34],36],[36,1],[[36,36],18],[[],18],[[36,7],8],[[]],[[[4,[18]]],36],[38,36],[[[39,[18]]],36],[40,36],[36,35],[[]],[36,35],[36],[36,18],[[36,1],18],[36,41],[36,1],0,[[35,1,1],36],[1,36],[1,36],[36],[36,1],0,[[36,36],18],[36,42],[36,43],[[36,1,1],36],[36,35],[[]],[[],9],[[],9],[[],10],[[36,1],18],[[36,1],18],[36,[[4,[3]]]],0,[35,3],[35,[[4,[3]]]],[[35,1,1],37],[[35,1,1],35],[[]],[[]],[[[44,[3]],1,6],35],[35,1],[35,35],[[]],[35,1],[[35,1,1],1],0,[35,6],[35,[[4,[3]]]],[[35,35],18],[[],18],[[35,7],8],[38,35],[45,35],[[[46,[[4,[3]]]]],35],[[]],[47,35],[[[44,[3]],1,[49,[48]]],35],[40,35],[40,35],[[[44,[3]],1,1],35],[[[46,[[4,[50]]]]],35],[51,35],[[[39,[50]]],35],[[]],[35,[[9,[45,35]]]],[35,[[9,[[39,[50]],35]]]],[35,18],[35,1],0,0,[[35,35],18],[[35,1],35],[[35,1,1],35],[[]],[[],9],[51,[[9,[35]]]],[[],9],[[],10],[35,[[4,[50]]]],0,0,[45,3],[45,3],[45,[[4,[3]]]],[45,[[4,[3]]]],[[]],[[]],[[]],[[]],[45,1],[45],[[1,34],45],[[],[[44,[3]]]],0,[[],45],[45,[[4,[3]]]],[45,[[4,[3]]]],[52],[45],[[45,45],18],[[45,40]],[[45,51]],[[45,[4,[50]]]],[[45,1]],[[45,7],8],[45,35],[[]],[[]],[[[39,[50]]],45],[47,[[9,[45,47]]]],[40,45],[40,45],[1,45],[51,45],[51,45],[[[39,[50]]],45],[[]],[[]],[45,35],[45,18],0,[45,1],0,0,0,[1,52],[1,45],[1,45],[[45,53]],[[45,53]],[[45,1]],[[45,1]],[[45,1,3]],[[45,1]],[[45,1,1]],[45],[[45,1]],[[],9],[[],9],[51,[[9,[45]]]],[[],9],[[],9],[[],10],[[],10],[45,[[4,[50]]]],[45,[[4,[50]]]],[[45,1,18],45],[1,45],0,[[]],[[]],[54,35],0,[54,54],[[]],[[54,54],18],[[54,54],18],[[],18],[[54,1],54],[[54,7],8],[36,54],[[]],[[[39,[18]]],54],[[[4,[18]]],54],[40,54],[54,36],[[]],[54,36],[54],[54,18],[[54,1],18],[[54,1],18],[54,41],[54,1],[36,54],[1,54],[[36,1],54],[1,54],[54,1],0,[54,1],[[54,1,1],54],[[]],[[54,34],9],[[],9],[[],9],[[],10],[[[2,[54]],[2,[54]]],[[2,[54]]]],[54,42],[54,43],[54,[[4,[3]]]],0,[[[55,[50]]],[[4,[50]]]],[[]],[[]],[[[55,[[0,[56,50]]]]],[[55,[[0,[56,50]]]]]],[[]],[[[55,[50]]]],[[[55,[[0,[57,50]]]],7],8],[[]],[40,[[55,[50]]]],[[[55,[50]]],[[58,[50]]]],[[]],[[[55,[50]]],[[58,[50]]]],[[[58,[50]]],[[55,[50]]]],[[],[[55,[50]]]],[[[58,[50]]],[[55,[50]]]],[1,[[55,[50]]]],[[[55,[50]],[55,[50]]],18],[[[55,[50]],1,1],[[55,[50]]]],[[]],[[],9],[[],9],[[],10],[[35,1,35,1,1,34],35],[[[13,[35]],[13,[1]],1,31],35],[[35,1,1,34],35],[[35,1,35,1,1],35],[[35,1,35,1,1],35],[[35,1,35,1,1],35],[[35,1,1],35],0,[[]],[[]],[[[59,[[0,[56,50]]]]],[[59,[[0,[56,50]]]]]],[[]],[[[59,[[0,[57,50]]]],7],8],[[]],[[[59,[50]]],1],[[[59,[50]],1],1],[[[59,[50]]],1],[[[59,[50]]],[[58,[50]]]],[[]],[[[59,[50]]],[[58,[50]]]],[[[59,[50]]],18],[[[59,[50]]],1],0,[[[59,[50]]],1],[[[58,[50]],1,1],[[59,[50]]]],[[[58,[50]],1,1],[[59,[50]]]],[[[59,[50]]],1],0,0,[[[59,[50]],1,1],[[59,[50]]]],[[]],[[],9],[[],9],[[],10],[[[59,[50]]],[[4,[50]]]],0,[[[58,[50]]],[[4,[50]]]],[[]],[[]],0,[[[58,[[0,[56,50]]]]],[[58,[[0,[56,50]]]]]],[[]],[[[58,[50]]]],[[[58,[50]],[0,[[46,[[4,[50]]]],60]]],18],[[[58,[50]],7],8],[45,[[58,[50]]]],[[[39,[50]]],[[58,[50]]]],[35,[[58,[50]]]],[[]],[40,[[58,[50]]]],[[[58,[50]]],35],[[]],[[[58,[50]]],35],[[[58,[50]]]],[[35,1,1],[[58,[50]]]],0,[[[58,[50]],[58,[50]]],18],[[[58,[50]],1,1],[[58,[50]]]],[[]],[[],9],[[],9],[[],10],0,0,0,0,[[[61,[50]],1]],[[[61,[50]],50]],[[[61,[50]],1,50]],[[[61,[50]],1]],[[[61,[50]],[4,[50]]]],[[[61,[50]],40]],[[[61,[50]]],[[4,[50]]]],[[[61,[50]]],[[4,[50]]]],0,0,[[]],[[]],0,0,[[[61,[50]]],1],0,[[],[[61,[50]]]],[[[61,[50]],40]],[[[61,[50]]],35],[[[61,[[0,[57,50]]]],7],8],[[[39,[50]]],[[61,[50]]]],[[]],[40,[[61,[50]]]],[[]],[[[61,[50]]],18],[[[61,[50]]],1],0,0,0,[1,[[61,[50]]]],[45,[[61,[50]]]],0,[[[61,[50]],1]],[[[61,[50]],1]],[[],9],[[],9],[[],10],0,[[38,1]],[[38,18]],[[38,36]],[[38,1,18]],[[38,[62,[1]],[4,[3]]]],[[38,[4,[18]]]],[38,[[4,[3]]]],[38,[[4,[3]]]],[[]],[[]],0,[38,1],[38,36],[38,36],[[38,7],8],[[]],[[38,1],18],[[]],[38,18],[38,1],0,[1,38],[[45,1],38],[[38,1]],[[38,1]],[[38,1,18]],[[38,1]],[[],9],[[],9],[[],10],0,[[63,18]],[[63,1]],[[63,1]],[63],[63],[[63,[4,[18]]]],[63,[[2,[[4,[3]]]]]],[63,[[2,[[4,[3]]]]]],0,[[]],[[]],0,[63,[[2,[54]]]],[63,[[2,[54]]]],[[63,7],8],[[]],[[]],[63,18],[63,1],0,[63],[63],[1,63],[[45,1],63],[1,63],[[],9],[[],9],[[],10],0,[47,[[4,[3]]]],[[]],[[]],[47,1],[47,6],0,[47,[[4,[3]]]],[47],[[47,47],18],[[47,7],8],[[]],[64,47],[[]],[47,18],[47,1],0,[[[44,[3]],1,6],47],[47,[[44,[3]]]],0,[[],9],[[],9],[[],10],0,0,[[],1],[14,2],[14,2],[23,2],[23,2],[22,2],[22,2],[1,2],0,0,0,[[],[[4,[3]]]],[[],[[2,[5]]]],[[],[[2,[1]]]],[1],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[37,1],0,0,[65,[[4,[12]]]],0,[1,12],[[1,1]],[65,1],[[65,7],8],[[37,7],8],[[66,7],8],[[]],[[]],[[]],0,[[]],[[]],[[]],[37],[[]],[65,67],[37,66],[37,51],[65,1],0,[66,1],[[[4,[3]],1,1],65],[[[4,[3]],1,1],37],[66,[[2,[12]]]],[65,[[2,[12]]]],0,[[[4,[3]]],12],[37,12],[37,1],0,[66],[65,[[2,[12]]]],0,[65,1],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,0,0,[43,2],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[43,7],8],[[42,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[4,[3]],1,1],41],[[[4,[3]],1,1],43],[[[4,[3]],1,1],42],[41,2],[43,2],[42,2],[41,2],[[1,1,1,[2,[[4,[3]]]],34],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[[4,[3]],[4,[3]],1,1,1],1],0,0,[[1,1],1],[[[4,[3]],1],18],[[3,1],18],[1,1],[[1,1],1],[[[4,[3]],1]],[[3,1]],[[[4,[3]],1]],[[3,1]]],"c":[293,326,342,388,398,686,687,688,689,690,691],"p":[[15,"usize"],[4,"Option",830],[15,"u8"],[15,"slice"],[15,"isize"],[4,"Deallocation",22],[3,"Formatter",831],[6,"Result",831],[4,"Result",832],[3,"TypeId",833],[3,"i256",37],[15,"u64"],[15,"array"],[15,"i128"],[15,"u32"],[4,"Ordering",834],[4,"DivRemError",37],[15,"bool"],[3,"ParseI256Error",37],[3,"ParseIntError",835],[15,"i8"],[15,"i64"],[15,"i32"],[15,"i16"],[3,"BigInt",836],[15,"f64"],[15,"u128"],[15,"str"],[8,"Hasher",837],[3,"String",838],[8,"Fn",839],[8,"Copy",840],[3,"ArrayPlusOne",165],[8,"FnMut",839],[3,"Buffer",315],[3,"BooleanBuffer",268],[3,"BitChunks",705],[3,"BooleanBufferBuilder",600],[3,"Vec",841],[8,"IntoIterator",842],[3,"BitIterator",770],[3,"BitIndexIterator",770],[3,"BitSliceIterator",770],[3,"NonNull",843],[3,"MutableBuffer",362],[8,"AsRef",844],[3,"Bytes",660],[8,"Allocation",22],[3,"Arc",845],[8,"ArrowNativeType",683],[8,"Iterator",846],[3,"SetLenOnDrop",362],[8,"ToByteSlice",683],[3,"NullBuffer",431],[3,"OffsetBuffer",474],[8,"Clone",847],[8,"Debug",831],[3,"ScalarBuffer",532],[3,"RunEndBuffer",504],[8,"Sized",840],[3,"BufferBuilder",559],[3,"Range",848],[3,"NullBufferBuilder",631],[3,"Bytes",849],[3,"UnalignedBitChunk",705],[3,"BitChunkIterator",705],[6,"UnalignedBitChunkIterator",705]]},\
"arrow_cast":{"doc":"Cast kernel for Apache Arrow","t":"AAAADIFFFLLFFLFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFLLFFLFLLLLMLLKLLFFFFFFFMFFKKLLLFLFFDDNIIENGNEDGNNNNNQGDMFFLLLLLLLLLLLLLLLLLLLLLLFMMOLOOMLLLLLLLLLMMLLLLLLLLLLLLLLLLMLLLLLLFFLMMKOMMMOMOMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLFFNNNRRNRDDDENNNNGRRRRNINDNNLLLLLLLLLLLLLLLLLLLLLMLMMLLLLMLLLLLLLLLLLLMLLLLLMMMLLLKLFFLFFFFFOFFFFLLLLLLFLLLLLLLLLLLLLLLLFFFFFFFF","n":["cast","display","parse","pretty","CastOptions","DecimalCast","adjust_timestamp_to_timezone","as_time_res_with_timezone","bool_to_numeric_cast","borrow","borrow_mut","can_cast_types","cast","cast","cast_binary_to_fixed_size_binary","cast_binary_to_string","cast_bool_to_numeric","cast_byte_container","cast_decimal_to_decimal","cast_decimal_to_decimal_error","cast_decimal_to_decimal_same_type","cast_decimal_to_float","cast_decimal_to_integer","cast_duration_to_interval","cast_fixed_size_binary_to_binary","cast_fixed_size_list_to_list","cast_floating_point_to_decimal128","cast_floating_point_to_decimal256","cast_integer_to_decimal","cast_interval_day_time_to_interval_month_day_nano","cast_interval_year_month_to_interval_month_day_nano","cast_list_container","cast_list_inner","cast_month_day_nano_to_duration","cast_numeric_arrays","cast_numeric_to_bool","cast_reinterpret_arrays","cast_string_to_day_time_interval","cast_string_to_decimal","cast_string_to_month_day_nano_interval","cast_string_to_timestamp","cast_string_to_timestamp_impl","cast_string_to_year_month_interval","cast_to_dictionary","cast_utf8_to_boolean","cast_values_to_list","cast_with_options","clone","clone_into","convert_to_bigger_or_equal_scale_decimal","convert_to_smaller_scale_decimal","default","dictionary_cast","eq","equivalent","equivalent","fmt","format_options","from","from_cast","from_decimal","hash","into","make_timestamp_array","numeric_cast","numeric_to_bool_cast","pack_byte_to_dictionary","pack_numeric_to_dictionary","parse_string","parse_string_to_decimal_native","safe","string_to_decimal_cast","time_unit_multiple","to_i128","to_i256","to_owned","try_from","try_into","try_numeric_cast","type_id","unpack_dictionary","value_to_string","ArrayFormat","ArrayFormatter","Arrow","DisplayIndex","DisplayIndexState","DurationFormat","Err","FieldDisplay","Format","FormatError","FormatOptions","FormatResult","ISO8601","None","Ok","Pretty","Some","State","TimeFormat","ValueFormatter","array","array_format","array_value_to_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","clone","clone","clone_into","clone_into","date32_to_date","date_format","datetime_format","decimal_display","default","duration_display","duration_fmt","duration_format","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","format","formatter","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","hash","hash","idx","into","into","into","into","into","into","lexical_to_string","make_formatter","new","null","null","prepare","primitive_display","safe","safe","state","temporal_display","time_format","timestamp_display","timestamp_format","timestamp_tz_format","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_to_string","type_id","type_id","type_id","type_id","type_id","type_id","value","with_date_format","with_datetime_format","with_display_error","with_duration_format","with_null","with_time_format","with_timestamp_format","with_timestamp_tz_format","write","write","write","write","write_list","write_timestamp","Century","Day","Decade","EPOCH_DAYS_FROM_CE","ERR_NANOSECONDS_NOT_SUPPORTED","Hour","INTERVAL_PRECISION","Interval","IntervalAmount","IntervalParseConfig","IntervalUnit","Microsecond","Millisecond","Minute","Month","MonthDayNano","NANOS_PER_HOUR","NANOS_PER_MILLIS","NANOS_PER_MINUTE","NANOS_PER_SECOND","Nanosecond","Parser","Second","TimestampParser","Week","Year","add","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","clone","clone","clone_into","clone_into","date","days","default","default_unit","digits","eq","eq","fmt","fmt","frac","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_str","from_str","integer","into","into","into","into","into","mask","months","nanos","new","new","new","parse","parse","parse_date","parse_decimal","parse_formatted","parse_interval_components","parse_interval_day_time","parse_interval_month_day_nano","parse_interval_year_month","parse_nanos","parser_primitive","string_to_datetime","string_to_time","string_to_time_nanoseconds","string_to_timestamp_nanos","test","time","to_day_time","to_month_day_nanos","to_owned","to_owned","to_timestamp_nanos","to_year_months","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","create_column","create_table","pretty_format_batches","pretty_format_batches_with_options","pretty_format_columns","pretty_format_columns_with_options","print_batches","print_columns"],"q":[[0,"arrow_cast"],[4,"arrow_cast::cast"],[82,"arrow_cast::display"],[222,"arrow_cast::parse"],[340,"arrow_cast::pretty"],[348,"arrow_array::types"],[349,"arrow_array::array::primitive_array"],[350,"arrow_array::timezone::private"],[351,"arrow_schema::error"],[352,"core::result"],[353,"core::option"],[354,"chrono::naive::time"],[355,"arrow_array::array::boolean_array"],[356,"arrow_array::types"],[357,"arrow_array::array"],[358,"arrow_array::array"],[359,"arrow_array::arithmetic"],[360,"arrow_schema::field"],[361,"alloc::sync"],[362,"arrow_array::array::list_array"],[363,"arrow_array::array::string_array"],[364,"chrono::offset"],[365,"arrow_array::types"],[366,"core::fmt"],[367,"arrow_schema::datatype"],[368,"core::any"],[369,"alloc::boxed"],[370,"alloc::string"],[371,"chrono::naive::date"],[372,"core::fmt"],[373,"core::fmt"],[374,"chrono::naive::datetime"],[375,"alloc::vec"],[376,"chrono::datetime"],[377,"comfy_table::table"],[378,"arrow_array::record_batch"],[379,"core::fmt"]],"d":["Defines cast kernels for <code>ArrayRef</code>, to convert <code>Array</code>s …","Functions for printing array values, as strings, for …","","Utilities for pretty printing record batches. Note this …","CastOptions provides a way to override the default cast …","A utility trait that provides checked conversions between …","","","","","","Return true if a value of type <code>from_type</code> can be cast into a","Cast <code>array</code> to the provided data type and return a new …","","Helper function to cast from one <code>BinaryArray</code> or ‘…","A specified helper to cast from <code>GenericBinaryArray</code> to …","Cast Boolean types to numeric","Helper function to cast from one <code>ByteArrayType</code> to another …","","","","","","Cast the array from duration and interval","Helper function to cast from ‘FixedSizeBinaryArray’ to …","","","","","Cast the array from interval day time to month day nano","Cast the array from interval year month to month day nano","Cast the container type of List/Largelist array but not …","Helper function that takes an Generic list container and …","Cast the array from interval to duration","Convert Array into a PrimitiveArray of type, and apply …","Cast numeric types to Boolean","Cast the primitive array using …","","Cast Utf8 to decimal","","Casts generic string arrays to an ArrowTimestampType …","","","Attempts to encode an array into an <code>ArrayDictionary</code> with …","Casts Utf8 to Boolean","Helper function that takes a primitive array and casts to …","Cast <code>array</code> to the provided data type and return a new …","","","","","","Attempts to cast an <code>ArrayDictionary</code> with index type K into …","","","","","Formatting options when casting from temporal types to …","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","Parse UTF-8","Parses given string to specified decimal native …","how to handle cast failures, either return NULL …","","Get the time unit as a multiple of a second","","","","","","","","","","","A string formatter for an <code>Array</code>","","<code>Display</code> but accepting an index","<code>DisplayIndex</code> with additional state","Format for displaying durations","Contains the error value","Pairs a boxed <code>DisplayIndex</code> with its field name","","Either an <code>ArrowError</code> or <code>std::fmt::Error</code>","Options for formatting arrays","","ISO 8601 - <code>P198DT72932.972880S</code>","No value.","Contains the success value","A human readable representation - …","Some value of type <code>T</code>.","","","Implements <code>Display</code> for a specific array value","","","Get the value at the given row in an array as a String.","","","","","","","","","","","","","","","","","","","","","","","","Date format for date arrays","Format for DateTime arrays","","","","","Duration format","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts numeric type to a <code>String</code>","","","","Format string for nulls","","","","If set to <code>true</code> any formatting errors will be written to …","","","Time format for time arrays","","Timestamp format for timestamp arrays","Timestamp format for timestamp with timezone arrays","","","","","","","","","","","","","","","","Returns an <code>ArrayFormatter</code> that can be used to format <code>array</code>","Fallibly converts this to a string","","","","","","","Returns a <code>ValueFormatter</code> that implements <code>Display</code> for the …","Overrides the format used for <code>DataType::Date32</code> columns","Overrides the format used for <code>DataType::Date64</code> columns","If set to <code>true</code> any formatting errors will be written to …","Overrides the format used for duration columns","Overrides the string used to represent a null","Overrides the format used for <code>DataType::Time32</code> and …","Overrides the format used for <code>DataType::Timestamp</code> columns …","Overrides the format used for <code>DataType::Timestamp</code> columns …","","","Writes this value to the provided <code>Write</code>","","","","","","","Number of days between 0001-01-01 and 1970-01-01","Error message if nanosecond conversion request beyond …","","Chosen based on the number of decimal digits in 1 week in …","","","","","","","","","","","","","","","Specialized parsing implementations used by csv and json …","","Helper for parsing RFC3339 timestamps","","","Interval addition following Postgres behavior. Fractional …","","","","","","","","","","","","","","","","","","","","Parses a date of the form <code>1997-01-31</code>","","","The default unit to use if none is specified e.g. …","The timestamp bytes to parse minus <code>b&#39;0&#39;</code>","","","","","The fractional component multiplied by …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","The integer component of the interval amount","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A mask containing a <code>1</code> bit where the corresponding byte is …","","","","","","","Parse string value in traditional Postgres format such as …","","Parse the string format decimal value to i128/i256 format …","","parse the string into a vector of interval components i.e. …","","","","Parse nanoseconds from the first <code>N</code> values in digits, …","","Accepts a string and parses it relative to the provided …","","Accepts a string in ISO8601 standard format and some …","Accepts a string in RFC3339 / ISO8601 standard format and …","Returns true if the byte at <code>idx</code> in the original string …","Parses a time of any of forms","","","","","Fallible conversion of <code>NaiveDateTime</code> to <code>i64</code> nanoseconds","","","","","","","","","","","","","","","","","","Convert a series of record batches into a table","Create a visual representation of record batches","Create a visual representation of record batches","Create a visual representation of columns","","Prints a visual representation of record batches to stdout","Prints a visual representation of a list of column to …"],"i":[0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,0,4,4,4,4,4,4,4,32,4,4,0,0,0,0,0,0,0,4,0,0,32,32,4,4,4,0,4,0,0,0,0,47,0,0,0,67,0,47,0,0,0,44,68,67,44,68,39,0,0,52,0,0,46,50,47,52,44,40,46,50,47,52,44,40,46,50,47,52,44,40,44,40,44,40,0,40,40,0,40,0,0,40,44,40,44,44,40,40,46,44,40,50,46,46,50,47,47,47,52,44,40,46,50,47,52,44,40,44,40,46,46,50,47,52,44,40,0,0,40,52,40,39,0,50,40,52,0,40,0,40,40,44,40,46,46,50,47,52,44,40,46,50,47,52,44,40,50,46,46,50,47,52,44,40,50,40,40,40,40,40,40,40,40,41,39,46,52,0,0,57,57,57,0,0,57,0,0,0,0,0,57,57,57,57,0,0,0,0,0,57,0,57,0,57,57,55,58,60,57,56,55,58,60,57,56,55,58,60,57,56,55,57,56,57,56,58,55,55,60,58,56,55,56,55,56,58,60,57,56,55,58,60,57,56,55,57,56,56,58,60,57,56,55,58,55,55,58,60,55,69,55,0,0,69,0,0,0,0,0,0,0,0,0,0,58,58,55,55,57,56,0,55,58,60,57,56,55,58,60,57,56,55,58,60,57,56,55,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,[[[2,[1]],3,4],[[6,[[2,[1]],5]]]],[[7,[8,[3]]],[[6,[9,5]]]],[[10,4],[[2,[11]]]],[[]],[[]],[[12,12],13],[[14,12],[[6,[15,5]]]],[[]],[[14,16,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[14,[[6,[15,5]]]],[[[2,[17]],18,19,18,4],[[6,[15,5]]]],[[19,18],20],[[[2,[17]],18,19,18,4],[[6,[15,5]]]],[[14,20],[[6,[15,5]]]],[[14,18,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[14,16],[[6,[15,5]]]],[14,[[6,[15,5]]]],[[[2,[11]],19,18,4],[[6,[15,5]]]],[[[2,[11]],19,18,4],[[6,[15,5]]]],[[[2,[11]],19,18,21,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[14,22,12,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[14,[[6,[15,5]]]],[14,[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[14,19,18,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[14,[8,[[24,[23]]]],4],[[6,[15,5]]]],[[[26,[25]],27,4],[[6,[[2,[28]],5]]]],[[14,4],[[6,[15,5]]]],[[14,12,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[14,29,4],[[6,[15,5]]]],[[14,12,4],[[6,[15,5]]]],[4,4],[[]],[[[2,[17]],18,19,18,4],[[6,[[2,[17]],5]]]],[[[2,[17]],18,19,18,4],[[6,[[2,[17]],5]]]],[[],4],[[14,12,4],[[6,[15,5]]]],[[4,4],13],[[],13],[[],13],[[4,30],31],0,[[]],[[]],[32,8],[[4,33]],[[]],[[[2,[1]],34,[8,[[24,[23]]]]],15],[[[2,[11]]],[[2,[11]]]],[[[2,[[0,[11,11]]]]],[[6,[10,5]]]],[[14,4],[[6,[15,5]]]],[[14,12,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],[[23,35],[[6,[5]]]],0,[[[26,[25]],19,18,4],[[6,[[2,[17]],5]]]],[34,7],[[],[[8,[36]]]],[[],[[8,[37]]]],[[]],[[],6],[[],6],[[[2,[11]]],[[6,[[2,[11]],5]]]],[[],38],[[14,12,4],[[6,[15,5]]]],[[14,4],[[6,[15,5]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[0,[39,14]],40],[[6,[[42,[41]],5]]]],[[14,35],[[6,[43,5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,44],[40,40],[[]],[[]],[16,[[8,[45]]]],0,0,0,[[],40],0,0,0,[[44,44],13],[[40,40],13],[[],13],[[],13],[[],13],[[],13],[[46,30],31],[[44,30],31],[[40,30],31],0,0,[[]],[[]],[5,47],[[]],[48,47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[44,33]],[[40,33]],0,[[]],[[]],[[]],[[]],[[]],[[]],[49,43],[[14,40],[[6,[[42,[41]],5]]]],[[],40],0,0,[40,[[6,[5]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[],43],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[14,40],[[6,[50,5]]]],[46,[[6,[43,5]]]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[50,35],46],[[40,[8,[23]]],40],[[40,[8,[23]]],40],[[40,13],40],[[40,44],40],[[40,23],40],[[40,[8,[23]]],40],[[40,[8,[23]]],40],[[40,[8,[23]]],40],[[35,51],[[6,[47]]]],[[35,51],[[6,[47]]]],[[46,51],[[6,[5]]]],[[[52,[[0,[39,14]]]],35,51],[[6,[47]]]],[[51,[53,[35]],41],[[6,[47]]]],[[51,54,[8,[3]],[8,[23]]],[[6,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[55,56,57],[[6,[55,5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57,57],[56,56],[[]],[[]],[58,[[8,[45]]]],0,[[],55],0,0,[[56,56],13],[[55,55],13],[[56,30],31],[[55,30],31],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,[[6,[57,5]]]],[23,[[6,[56]]]],0,[[]],[[]],[[]],[[]],[[]],0,0,0,[[[59,[19]]],58],[57,60],[[16,16,7],55],[23,8],[[23,60],[[6,[55,5]]]],[23,[[8,[45]]]],[[23,19,18],[[6,[5]]]],[[23,23],8],[[23,60],[[6,[61,5]]]],[23,[[6,[5]]]],[23,[[6,[5]]]],[23,[[6,[5]]]],[[[59,[19]]],62],0,[[27,23],[[6,[[63,[27]],5]]]],[23,[[8,[9]]]],[23,[[6,[7,5]]]],[23,[[6,[7,5]]]],[[58,35,19],13],[58,8],[55,[[6,[5]]]],[55],[[]],[[]],[54,[[6,[7,5]]]],[55,[[6,[16,5]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],38],[[],38],[[],38],[[],38],[[],38],[[23,[59,[15]],40],[[6,[64,5]]]],[[[59,[65]],40],[[6,[64,5]]]],[[[59,[65]]],[[6,[66,5]]]],[[[59,[65]],40],[[6,[66,5]]]],[[23,[59,[15]]],[[6,[66,5]]]],[[23,[59,[15]],40],[[6,[66,5]]]],[[[59,[65]]],[[6,[5]]]],[[23,[59,[15]]],[[6,[5]]]]],"c":[],"p":[[3,"Int64Type",348],[3,"PrimitiveArray",349],[3,"Tz",350],[3,"CastOptions",4],[4,"ArrowError",351],[4,"Result",352],[15,"i64"],[4,"Option",353],[3,"NaiveTime",354],[3,"BooleanArray",355],[8,"ArrowPrimitiveType",348],[4,"DataType",356],[15,"bool"],[8,"Array",357],[6,"ArrayRef",357],[15,"i32"],[8,"DecimalType",348],[15,"i8"],[15,"u8"],[8,"Fn",358],[8,"ArrowNativeTypeOp",359],[3,"Field",360],[15,"str"],[3,"Arc",361],[8,"OffsetSizeTrait",362],[6,"GenericStringArray",363],[8,"TimeZone",364],[8,"ArrowTimestampType",348],[6,"FieldRef",360],[3,"Formatter",365],[6,"Result",365],[8,"DecimalCast",4],[8,"Hasher",366],[4,"TimeUnit",356],[15,"usize"],[15,"i128"],[3,"i256",367],[3,"TypeId",368],[8,"DisplayIndexState",82],[3,"FormatOptions",82],[8,"DisplayIndex",82],[3,"Box",369],[3,"String",370],[4,"DurationFormat",82],[3,"NaiveDate",371],[3,"ValueFormatter",82],[4,"FormatError",82],[3,"Error",365],[8,"ToLexical",372],[3,"ArrayFormatter",82],[8,"Write",365],[3,"ArrayFormat",82],[3,"Range",373],[3,"NaiveDateTime",374],[3,"Interval",222],[3,"IntervalAmount",222],[4,"IntervalUnit",222],[3,"TimestampParser",222],[15,"slice"],[3,"IntervalParseConfig",222],[3,"Vec",375],[15,"u32"],[3,"DateTime",376],[3,"Table",377],[3,"RecordBatch",378],[8,"Display",365],[6,"FormatResult",82],[6,"TimeFormat",82],[8,"Parser",222]]},\
"arrow_csv":{"doc":"Transfer data between the Arrow memory format and CSV …","t":"CCCCCFAAGDDDDNDDGDNMMMLLLLLLLLLLLLLLMLFLFLLFLFFLLLLLLLLLLLLLLLMMLLLMLMMLLLLLLMLLLLLLLLLLLLLLLLMFFLFLLLLLLLLLMLLMMMFFMMMLMMMALLLMMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRDDDLLLLLLLLLLLLMMMMMLMLLLLLLLLLLLLLLLLLLLMLMMMMMMMMLLLLLLLLLLRRRRRDDMLLLLLLLLLLMMMMLMLLLLLLLMMLLLLLMMMMMMMMLLLLLLLLLLLLLLLLM","n":["Reader","ReaderBuilder","Writer","WriterBuilder","infer_schema_from_files","map_csv_error","reader","writer","Bounds","BufReader","Decoder","Format","InferredDataType","None","NullRegex","REGEX_SET","Reader","ReaderBuilder","Some","__private_field","batch_size","batch_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","build","build_boolean_array","build_buffered","build_decimal_array","build_decoder","build_parser","build_primitive_array","build_reader","build_timestamp_array","build_timestamp_array_impl","capacity","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone_into","clone_into","clone_into","decode","decoder","decoder","default","default","default","delimiter","deref","end","escape","flush","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get","has_header","has_header","infer_file_schema","infer_reader_schema","infer_schema","infer_schema_from_files","into","into","into","into","into","into","into","into_iter","is_null","line_number","new","next","null_regex","null_regex","packed","parse","parse_bool","projection","projection","quote","read","reader","reader","record_decoder","records","schema","schema","schema","schema","schema","terminator","to_owned","to_owned","to_owned","to_skip","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","with_batch_size","with_bounds","with_delimiter","with_delimiter","with_escape","with_escape","with_format","with_header","with_null_regex","with_null_regex","with_projection","with_quote","with_quote","with_terminator","with_terminator","AVERAGE_FIELD_SIZE","MIN_CAPACITY","RecordDecoder","StringRecord","StringRecords","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","clear","clone","clone_into","current_field","data","data","data","data_len","decode","delimiter","flush","fmt","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","get","get","into","into","into","is_empty","iter","len","len","line_number","new","num_columns","num_columns","num_rows","num_rows","offsets","offsets","offsets","offsets_len","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","DEFAULT_DATE_FORMAT","DEFAULT_NULL_VALUE","DEFAULT_TIMESTAMP_FORMAT","DEFAULT_TIMESTAMP_TZ_FORMAT","DEFAULT_TIME_FORMAT","Writer","WriterBuilder","beginning","borrow","borrow","borrow_mut","borrow_mut","build","cast","cast","clone","clone_into","close","date_format","date_format","datetime_format","datetime_format","default","delimiter","fmt","fmt","from","from","from_cast","from_cast","has_headers","has_headers","has_headers","into","into","into_inner","new","new","null_value","null_value","time_format","time_format","timestamp_format","timestamp_format","timestamp_tz_format","timestamp_tz_format","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_date_format","with_datetime_format","with_delimiter","with_null","with_rfc3339","with_time_format","with_timestamp_format","write","write","writer"],"q":[[0,"arrow_csv"],[8,"arrow_csv::reader"],[171,"arrow_csv::reader::records"],[234,"arrow_csv::writer"],[297,"csv::error"],[298,"arrow_schema::error"],[299,"std::io"],[300,"core::result"],[301,"arrow_array::array"],[302,"std::io"],[303,"csv::reader"],[304,"core::option"],[305,"chrono::offset"],[306,"arrow_array::types"],[307,"arrow_array::array::primitive_array"],[308,"regex::regexset::string"],[309,"arrow_array::record_batch"],[310,"core::fmt"],[311,"core::fmt"],[312,"std::io"],[313,"arrow_schema::schema"],[314,"arrow_schema::schema"],[315,"std::collections::hash::map"],[316,"alloc::vec"],[317,"std::io::buffered::bufreader"],[318,"core::any"],[319,"regex::regex::string"],[320,"core::iter::traits::iterator"],[321,"std::io"]],"d":["","","","","","","CSV Reader","CSV Writer","","CSV file reader","A push-based interface for decoding CSV data from an …","The format specification for the CSV file","","No value.","A wrapper over <code>Option&lt;Regex&gt;</code> to check if the value is <code>NULL</code>.","Order should match <code>InferredDataType</code>","CSV file reader using <code>std::io::BufReader</code>","CSV file reader builder","Some value of type <code>T</code>.","","Number of records per batch","Batch size (number of records to load each time)","","","","","","","","","","","","","","","The bounds over which to scan the reader. <code>None</code> starts from …","Create a new <code>Reader</code> from a non-buffered reader","","Create a new <code>BufReader</code> from a buffered reader","","Builds a decoder that can be used to decode CSV from an …","Build a <code>csv_core::Reader</code> for this <code>Format</code>","","Build a <code>csv::Reader</code> for this <code>Format</code>","","","Returns the number of records that can be read before …","","","","","","","","","","","","","","Decode records from <code>buf</code> returning the number of bytes read","The decoder","The decoder","","","","","","End line number","","Flushes the currently buffered data to a <code>RecordBatch</code>","","","","","","Format of the CSV file","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the inferred data type","Set whether the CSV file has headers","","Infer the schema of a CSV file by reading through the …","Infer schema of CSV records provided by struct that …","Infer schema of CSV records from the provided <code>reader</code>","Infer schema from a list of CSV files by reading through …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the value should be considered as <code>NULL</code> …","Current line number","Create a new builder for configuring CSV parsing options.","","","Check if the string matches this pattern for <code>NULL</code>.","Packed booleans indicating type","Parses a slice of <code>StringRecords</code> into a RecordBatch","","Optional projection for which columns to load (zero-based …","Optional projection for which columns to load (zero-based …","","","File reader","File reader","A decoder for <code>StringRecords</code>","","Returns the schema of the reader, useful for getting the …","Returns the schema of the reader, useful for getting the …","","Explicit schema for the CSV file","Schema of the CSV file","","","","","Rows to skip","","","","","","","","","","","","","","","","","","","","","","Updates the <code>InferredDataType</code> with the given string","Set the batch size (number of records to load at one time)","Set the bounds over which to scan the reader. <code>start</code> and <code>end</code>…","","Set the CSV file’s column delimiter as a byte character","","","Overrides the <code>Format</code> of this `ReaderBuilder","","Provide a regex to match null values, defaults to <code>^$</code>","Provide a regex to match null values, defaults to <code>^$</code>","Set the reader’s column projection","","","","","The estimated length of a field in bytes","The minimum amount of data in a single read","<code>RecordDecoder</code> provides a push-based interface to decoder …","A single parsed, UTF-8 CSV record","A collection of parsed, UTF-8 CSV records","","","","","","","","","","Clears the current contents of the decoder","","","The number of fields read for the current record","Decoded field data","","","Offsets into data","Decodes records from <code>input</code> returning the number of records …","","Flushes the current contents of the reader","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the decoder is empty","","Returns the current number of buffered records","","The current line number","","The expected number of fields per row","","The number of rows buffered","","Offsets delimiting field start positions","","","The current offset into <code>self.offsets</code>","","","","","","","","","","","","","","","","A CSV writer","A CSV writer builder","Is the beginning-of-writer","","","","","Create a new <code>Writer</code>","","","","","","The date format for date arrays","Optional date format for date arrays","The datetime format for datetime arrays","Optional datetime format for datetime arrays","","Optional column delimiter. Defaults to <code>b&#39;,&#39;</code>","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Set whether to write headers","Whether file should be written with headers. Defaults to …","Whether to write column names as file headers. Defaults to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this <code>Writer&lt;W&gt;</code>, returning the underlying writer.","Create a new CsvWriter from a writable object, with …","Create a new builder for configuring CSV writing options.","The value to represent null entries","Optional value to represent null","The time format for time arrays","Optional time format for time arrays","The timestamp format for timestamp arrays","Optional timestamp format for timestamp arrays","The timestamp format for timestamp (with timezone) arrays","Optional timestamp format for timestamp with timezone …","","","","","","","","Set the CSV file’s date format","Set the CSV file’s datetime format","Set the CSV file’s column delimiter as a byte character","Set the value to represent null in output","Use RFC3339 format for date/time/timestamps","Set the CSV file’s time format","Set the CSV file’s timestamp format","Write a vector of record batches to a writable object","","The object to write to"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,50,26,15,3,12,26,9,24,16,15,3,12,26,9,24,16,15,3,3,3,0,3,0,3,16,0,16,0,0,15,12,26,9,24,16,15,3,9,24,16,9,24,16,15,5,12,9,24,16,16,26,15,16,15,12,9,16,15,3,3,12,26,9,24,16,15,3,12,26,9,24,16,15,3,24,3,16,0,0,16,0,12,26,9,24,16,15,3,12,9,15,3,12,16,15,24,0,0,15,3,16,12,5,12,15,0,5,12,12,15,3,16,9,24,16,15,12,26,9,24,16,15,3,12,26,9,24,16,15,3,12,26,9,24,16,15,3,24,3,3,16,3,16,3,3,16,16,3,3,16,3,16,3,0,0,0,0,0,43,8,44,43,8,44,43,8,44,43,44,44,43,43,8,44,43,43,43,43,43,8,44,43,8,44,43,8,44,8,44,43,8,44,43,8,43,8,43,43,43,8,43,8,43,8,44,43,44,43,8,44,43,8,44,43,8,44,0,0,0,0,0,0,0,48,48,46,48,46,46,48,46,46,46,48,48,46,48,46,46,46,48,46,48,46,48,46,46,48,46,48,46,48,48,46,48,46,48,46,48,46,48,46,46,48,46,48,46,48,46,46,46,46,46,46,46,46,48,48,48],"f":[0,0,0,0,0,[1,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[3,4],[[6,[[5,[4]],2]]]],[[7,8,7,9],[[6,[10,2]]]],[[3,11],[[6,[[12,[11]],2]]]],[[7,8,7,13,14,9],[[6,[10,2]]]],[3,15],[16,17],[[7,8,7,9],[[6,[10,2]]]],[[16,4],[[18,[4]]]],[[7,8,7,[20,[19]],9],[[6,[10,2]]]],[[7,8,7,21,9],[[6,[[23,[22]],2]]]],[15,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[24,24],[16,16],[[]],[[]],[[]],[[15,[25,[13]]],[[6,[7,2]]]],0,0,[[],9],[[],24],[[],16],0,[26,27],0,0,[15,[[6,[[20,[28]],2]]]],[[[12,[11]],29],30],[[9,29],30],[[16,29],30],[[15,29],30],[[3,29],30],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,31],[[3,32],3],0,[[[0,[4,33]],13,[20,[7]],32],[[6,[2]]]],[[4,13,[20,[7]],32],[[6,[2]]]],[[16,4,[20,[7]]],[[6,[2]]]],[[[25,[34]],13,[20,[7]],32],[[6,[35,2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,19],32],0,[36,3],[[[12,[11]]],20],0,0,0,[[8,37,[20,[[38,[34,34]]]],[20,[[39,[7]]]],7,9],[[6,[28,2]]]],[19,[[20,[32]]]],0,0,0,[[[12,[11]]],[[6,[[20,[28]],2]]]],0,0,0,0,[[[5,[4]]],36],[[[12,[[40,[4]]]]],36],[[[12,[11]]],36],0,0,0,[[]],[[]],[[]],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[24,19]],[[3,7],3],[[3,7,7],3],[[16,13],16],[[3,13],3],[[16,13],16],[[3,13],3],[[3,16],3],[[16,32],16],[[16,42],16],[[3,42],3],[[3,[39,[7]]],3],[[16,13],16],[[3,13],3],[[16,13],16],[[3,13],3],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[43],[44,44],[[]],0,0,0,0,0,[[43,[25,[13]],7],[[6,[2]]]],0,[43,[[6,[8,2]]]],[[43,29],30],[[8,29],30],[[44,29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[8,7],44],[[44,7],19],[[]],[[]],[[]],[43,32],[8,45],[43,7],[8,7],0,[[17,7],43],0,0,0,0,0,0,0,0,[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],41],[[],41],[[],41],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[46,47],[[48,[47]]]],[[]],[[]],[46,46],[[]],[[[48,[47]]],[[6,[2]]]],0,0,0,0,[[],46],0,[[[48,[[0,[49,47]]]],29],30],[[46,29],30],[[]],[[]],[[]],[[]],[[46,32],46],0,0,[[]],[[]],[[[48,[47]]],47],[47,[[48,[47]]]],[[],46],0,0,0,0,0,0,0,0,[[]],[[],6],[[],6],[[],6],[[],6],[[],41],[[],41],[[46,34],46],[[46,34],46],[[46,13],46],[[46,34],46],[46,46],[[46,34],46],[[46,34],46],[[[48,[47]],28],[[6,[2]]]],[[[48,[47]],28],[[6,[2]]]],0],"c":[95,96],"p":[[3,"Error",297],[4,"ArrowError",298],[3,"ReaderBuilder",8],[8,"Read",299],[6,"Reader",8],[4,"Result",300],[15,"usize"],[3,"StringRecords",171],[3,"NullRegex",8],[6,"ArrayRef",301],[8,"BufRead",299],[3,"BufReader",8],[15,"u8"],[15,"i8"],[3,"Decoder",8],[3,"Format",8],[3,"Reader",302],[3,"Reader",303],[15,"str"],[4,"Option",304],[8,"TimeZone",305],[8,"ArrowTimestampType",306],[3,"PrimitiveArray",307],[3,"InferredDataType",8],[15,"slice"],[3,"REGEX_SET",8],[3,"RegexSet",308],[3,"RecordBatch",309],[3,"Formatter",310],[6,"Result",310],[4,"DataType",311],[15,"bool"],[8,"Seek",299],[3,"String",312],[3,"Schema",313],[6,"SchemaRef",313],[3,"Fields",314],[3,"HashMap",315],[3,"Vec",316],[3,"BufReader",317],[3,"TypeId",318],[3,"Regex",319],[3,"RecordDecoder",171],[3,"StringRecord",171],[8,"Iterator",320],[3,"WriterBuilder",234],[8,"Write",299],[3,"Writer",234],[8,"Debug",310],[6,"Bounds",8]]},\
"arrow_data":{"doc":"Low-level array data abstractions for Apache Arrow Rust","t":"NDDGNEDNNMAAMMMMMMAMMAAAFMMMMMMMMMMAMMDDDLLLLLLMMMMMMMLLLLLLLLLLLMMMLLLLLLLFLLLLLLLLLFNDDGNEDNNLLLMLLLLLLLLLLLMMMLLLLLMLLLLMMLLFFLLMMLLLLLLLLLLLLLLLLLLLLLLLFLLLLFLLMMLLFLLLLLLMLLMLLMMLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMRRRRRRRRRFFAAFFFAAAAAAAAAAFFFFFFFRFFFFFFFFFFFFFDDFLLLLLMMMLMMLMMLLLLLLLLLLMMMLLMLLLMMMFLLLLLLNNENGGGNDNDMALLLLLLMMFFFFMLLMMMLMLMMAALLLLLLLLLLLLLLMALALMLMFAALLLLLLLLLLAAALFFFFFFFFFFFFFFFFFFFFFFFFF","n":["AlwaysNull","ArrayData","ArrayDataBuilder","ArrayDataRef","BitMap","BufferSpec","DataTypeLayout","FixedWidth","VariableWidth","alloc","bit_iterator","bit_mask","buffers","buffers","buffers","can_contain_null_mask","child_data","child_data","data","data_type","data_type","decimal","equal","ffi","layout","len","len","null_bit_buffer","null_count","nulls","nulls","offset","offset","phantom","ptr","transform","alignment","byte_width","BitIndexIterator","BitIterator","BitSliceIterator","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer","chunk_offset","current_chunk","current_chunk","current_offset","current_offset","end_offset","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","iter","iter","len","new","new","new","next","next","next","next_back","try_for_each_valid_idx","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","set_bits","AlwaysNull","ArrayData","ArrayDataBuilder","ArrayDataRef","BitMap","BufferSpec","DataTypeLayout","FixedWidth","VariableWidth","add_buffer","add_child_data","align_buffers","alloc","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffers","buffers","buffers","buffers","buffers","build","build_aligned","build_impl","build_unchecked","builder","can_contain_null_mask","check_bounds","check_run_ends","child_data","child_data","child_data","child_data","clone","clone_into","contains_nulls","count_nulls","data_type","data_type","data_type","data_type","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","get_array_memory_size","get_buffer_memory_size","get_single_valid_child_data","get_slice_memory_size","get_valid_child_data","into","into","into","into","into_buffers","into_builder","is_empty","is_null","is_valid","layout","len","len","len","len","new","new_binary","new_buffers","new_empty","new_empty","new_fixed_width","new_null","new_unchecked","null_bit_buffer","null_bit_buffer","null_count","null_count","null_count","nulls","nulls","nulls","nulls","offset","offset","offset","offset","phantom","ptr","ptr_eq","slice","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","typed_buffer","typed_offsets","validate","validate_child_data","validate_data","validate_each_offset","validate_full","validate_non_nullable","validate_nulls","validate_num_child_data","validate_offsets","validate_offsets_full","validate_utf8","validate_values","alignment","byte_width","DECIMAL128_MAX_PRECISION","DECIMAL128_MAX_SCALE","DECIMAL256_MAX_PRECISION","DECIMAL256_MAX_SCALE","DECIMAL_DEFAULT_SCALE","MAX_DECIMAL_BYTES_FOR_LARGER_EACH_PRECISION","MAX_DECIMAL_FOR_EACH_PRECISION","MIN_DECIMAL_BYTES_FOR_LARGER_EACH_PRECISION","MIN_DECIMAL_FOR_EACH_PRECISION","validate_decimal256_precision","validate_decimal_precision","boolean","dictionary","equal","equal_range","equal_values","fixed_binary","fixed_list","list","null","primitive","run","structure","union","utils","variable_size","boolean_equal","dictionary_equal","fixed_binary_equal","fixed_list_equal","lengths_equal","list_equal","null_equal","NULL_SLICES_SELECTIVITY_THRESHOLD","primitive_equal","run_equal","equal_child_values","struct_equal","equal_dense","equal_sparse","union_equal","base_equal","equal_bits","equal_len","equal_nulls","offset_value_equal","variable_sized_equal","ArrayPrivateData","FFI_ArrowArray","align_nulls","borrow","borrow","borrow_mut","borrow_mut","buffer","buffers","buffers","buffers_ptr","child","children","children","dictionary","dictionary","dictionary","drop","empty","fmt","from","from","into","into","is_empty","is_released","len","length","n_buffers","n_children","new","null_count","null_count","num_buffers","num_children","offset","offset","private_data","release","release_array","try_from","try_from","try_into","try_into","type_id","type_id","Array","Binary","Capacities","Dictionary","Extend","ExtendNullBits","ExtendNulls","List","MutableArrayData","Struct","_MutableArrayData","arrays","boolean","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffer1","buffer2","build_extend","build_extend_dictionary","build_extend_null_bits","build_extend_nulls","child_data","clone","clone_into","data","data_type","dictionary","extend","extend_null_bits","extend_nulls","extend_nulls","extend_values","fixed_binary","fixed_size_list","fmt","fmt","fmt","freeze","freeze","from","from","from","into","into","into","into_builder","is_empty","len","len","list","new","null","null_buffer","null_buffer","null_count","null_count","preallocate_offset_and_binary_buffer","primitive","structure","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","utils","variable_size","with_capacities","build_extend","extend_nulls","build_extend","extend_nulls","build_extend","extend_nulls","build_extend","extend_nulls","build_extend","extend_nulls","build_extend","build_extend_with_offset","extend_nulls","build_extend","extend_nulls","build_extend_dense","build_extend_sparse","extend_nulls_dense","extend_nulls_sparse","extend_offsets","get_last_offset","resize_for_bits","build_extend","extend_nulls","extend_offset_values"],"q":[[0,"arrow_data"],[36,"arrow_data::BufferSpec"],[38,"arrow_data::bit_iterator"],[85,"arrow_data::bit_mask"],[86,"arrow_data::data"],[219,"arrow_data::data::BufferSpec"],[221,"arrow_data::decimal"],[232,"arrow_data::equal"],[247,"arrow_data::equal::boolean"],[248,"arrow_data::equal::dictionary"],[249,"arrow_data::equal::fixed_binary"],[250,"arrow_data::equal::fixed_list"],[251,"arrow_data::equal::list"],[253,"arrow_data::equal::null"],[254,"arrow_data::equal::primitive"],[256,"arrow_data::equal::run"],[257,"arrow_data::equal::structure"],[259,"arrow_data::equal::union"],[262,"arrow_data::equal::utils"],[266,"arrow_data::equal::variable_size"],[268,"arrow_data::ffi"],[314,"arrow_data::transform"],[391,"arrow_data::transform::boolean"],[393,"arrow_data::transform::fixed_binary"],[395,"arrow_data::transform::fixed_size_list"],[397,"arrow_data::transform::list"],[399,"arrow_data::transform::null"],[401,"arrow_data::transform::primitive"],[404,"arrow_data::transform::structure"],[406,"arrow_data::transform::union"],[410,"arrow_data::transform::utils"],[413,"arrow_data::transform::variable_size"],[416,"arrow_schema::datatype"],[417,"core::fmt"],[418,"core::fmt"],[419,"core::option"],[420,"core::ops::function"],[421,"core::any"],[422,"arrow_buffer::buffer::immutable"],[423,"arrow_buffer::native"],[424,"alloc::vec"],[425,"arrow_schema::error"],[426,"arrow_buffer::buffer::null"],[427,"core::fmt"],[428,"num_traits"],[429,"core::ops::function"],[430,"num_integer"],[431,"arrow_schema::fields"],[432,"alloc::boxed"],[433,"core::ops::arith"],[434,"num_traits::ops::checked"],[435,"num_traits::cast"]],"d":["Buffer is always null. Unused currently in Rust …","An generic representation of Arrow array data which …","Builder for <code>ArrayData</code> type","","Buffer holds a bitmap.","Layout specification for a single data type buffer","Layout specification for a data type","Each element is a fixed width primitive, with the given …","Variable width, such as string data for utf8 data","","Types for iterating over packed bitmasks","Utils for working with packed bit masks","The buffers for this array data. Note that depending on …","A vector of buffer layout specifications, one for each …","","Can contain a null bitmask","The child(ren) of this array. Only non-empty for nested …","","Contains <code>ArrayData</code>, a generic representation of Arrow …","The data type for this array data","","","Module containing functionality to compute array equality. …","Contains declarations to bind to the C Data Interface.","Return the expected <code>DataTypeLayout</code> Arrays of this data …","The number of elements in this array data","","","","The null bitmap. A <code>None</code> value for this indicates all …","","The offset into this array data, in number of items","","","","","","","An iterator of <code>usize</code> whose index in a provided bitmask is …","Iterator over the bits within a packed bitmask","Iterator of contiguous ranges of set bits within a …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a new <code>BitIterator</code> from the provided <code>buffer</code>, and …","Create a new <code>BitSliceIterator</code> from the provided <code>buffer</code>, …","Create a new <code>BitIndexIterator</code> from the provide <code>buffer</code>, and …","","","","","Calls the provided closure for each index in the provided …","","","","","","","","","","Sets all bits on <code>write_data</code> in the range …","Buffer is always null. Unused currently in Rust …","An generic representation of Arrow array data which …","Builder for <code>ArrayData</code> type","","Buffer holds a bitmap.","Layout specification for a single data type buffer","Layout specification for a data type","Each element is a fixed width primitive, with the given …","Variable width, such as string data for utf8 data","","","Verifies that the buffers meet the minimum alignment …","","","","","","","","","","Returns the <code>buffer</code> as a slice of type <code>T</code> starting at …","Returns the <code>Buffer</code> storing data for this <code>ArrayData</code>","","The buffers for this array data. Note that depending on …","A vector of buffer layout specifications, one for each …","","Creates an array data, validating all inputs","Creates an array data, validating all inputs, and aligning …","Same as <code>Self::build_unchecked</code> but ignoring <code>force_validate</code> …","Creates an array data, without any validation","Returns a builder to construct a <code>ArrayData</code> instance of the …","Can contain a null bitmask","Validates that each value in self.buffers (typed as T) is …","Validates that each value in run_ends array is positive …","Returns a slice of children <code>ArrayData</code>. This will be non …","","The child(ren) of this array. Only non-empty for nested …","","","","","","Returns a reference to the <code>DataType</code> of this <code>ArrayData</code>","","The data type for this array data","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the total number of bytes of memory occupied …","Returns the total number of bytes of memory occupied by the","Ensures that this array data has a single child_data with …","Returns the total number of the bytes of memory occupied by","Ensures that <code>child_data[i]</code> has the expected type, calls …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maps 2 <code>MutableBuffer</code>s into a vector of Buffers whose size …","Converts this <code>ArrayData</code> into an <code>ArrayDataBuilder</code>","Returns whether this <code>ArrayData</code> is empty","Returns whether the element at index <code>i</code> is null","Returns whether the element at index <code>i</code> is not null","Return the expected <code>DataTypeLayout</code> Arrays of this data …","Returns the length (i.e., number of elements) of this …","","The number of elements in this array data","","","Describes a basic numeric array where each element has a …","creates 2 <code>MutableBuffer</code>s with a given <code>capacity</code> (in slots).","Returns a new empty ArrayData valid for <code>data_type</code>.","Describes arrays which have no data of their own (e.g. …","Describes a basic numeric array where each element has …","Returns a new <code>ArrayData</code> valid for <code>data_type</code> containing <code>len</code> …","Create a new ArrayData instance;","","","Returns the total number of nulls in this array","","","Returns a reference to the null buffer of this <code>ArrayData</code> …","","The null bitmap. A <code>None</code> value for this indicates all …","","Returns the offset of this <code>ArrayData</code>","","The offset into this array data, in number of items","","","","Returns true if this <code>ArrayData</code> is equal to <code>other</code>, using …","Creates a zero-copy slice of itself. This creates a new …","","","","","","","","","","Create a new ArrayData, validating that the provided …","","","","","Returns a reference to the data in <code>buffers[idx]</code> as a typed …","Returns a reference to the data in <code>buffer</code> as a typed slice …","“cheap” validation of an <code>ArrayData</code>. Ensures buffers are","Validates the layout of <code>child_data</code> ArrayData structures","Validate that the data contained within this <code>ArrayData</code> is …","Calls the <code>validate(item_index, range)</code> function for each of …","Performs a full recursive validation of this <code>ArrayData</code> and …","Verifies that <code>child</code> contains no nulls not present in <code>mask</code>","Validates the values stored within this <code>ArrayData</code> are valid","Returns <code>Err</code> if self.child_data does not have exactly …","Does a cheap sanity check that the <code>self.len</code> values in …","Ensures that all offsets in <code>buffers[0]</code> into <code>buffers[1]</code> are …","Ensures that all strings formed by the offsets in …","Validates the values stored within this <code>ArrayData</code> are valid","","","The maximum precision for DataType::Decimal128 values","The maximum scale for DataType::Decimal128 values","The maximum precision for DataType::Decimal256 values","The maximum scale for DataType::Decimal256 values","The default scale for DataType::Decimal128 and …","","<code>MAX_DECIMAL_FOR_EACH_PRECISION[p]</code> holds the maximum <code>i128</code> …","","<code>MIN_DECIMAL_FOR_EACH_PRECISION[p]</code> holds the minimum <code>i128</code> …","Validates that the specified <code>i256</code> of value can be properly …","Validates that the specified <code>i128</code> value can be properly …","","","Logically compares two ArrayData. Two arrays are logically …","","Compares the values of two ArrayData starting at <code>lhs_start</code> …","","","","","","","","","","","Returns true if the value data for the arrays is equal, …","","","","","","","","","The current implementation of comparison of run array …","Compares the values of two ArrayData starting at <code>lhs_start</code> …","","","","","","","","","","","","ABI-compatible struct for ArrowArray from C Data Interface …","Aligns the provided <code>nulls</code> to the provided <code>data_offset</code>","","","","","Returns the buffer at the provided index","","","","Returns the child at the provided index","","","Returns the dictionary if any","","","","create an empty <code>FFI_ArrowArray</code>, which can be used to …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","whether the array is empty","Whether the array has been released","the length of the array","","","","creates a new <code>FFI_ArrowArray</code> from existing data.","the null count of the array","","Returns the number of buffers","Returns the number of children","the offset of the array","","","","","","","","","","","Don’t preallocate inner buffers and rely on array growth …","Binary, Utf8 and LargeUtf8 data types Define","Define capacities of child data or data buffers.","Dictionary type","","","","List and LargeList data types Define","Struct to efficiently and interactively create an ArrayData…","Struct type","A mutable ArrayData that knows how to freeze itself into …","","","","","","","","","","","","Builds an extend that adds <code>offset</code> to the source primitive …","","","","","","","","","Extends this array with a chunk of its source arrays","","Extends this MutableArrayData with null elements, …","","","","","","","","Creates a ArrayData from the pushed regions up to this …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a ArrayDataBuilder from the pushed regions up to …","Returns true if len is 0","Returns the current length","","","returns a new MutableArrayData with capacity to <code>capacity</code> …","","","","Returns the current null count","","","","","","","","","","","","","","","","","","Similar to MutableArrayData::new, but lets users define …","","","","","","","","","","","","","","","","","","","","","","extends the <code>buffer</code> to be able to hold <code>len</code> bits, setting …","","",""],"i":[24,0,0,0,24,0,0,24,24,44,0,0,17,2,15,2,17,15,0,17,15,0,0,0,0,17,15,15,15,17,15,17,15,44,44,0,45,45,0,0,0,11,3,7,11,3,7,11,7,3,7,11,3,11,3,7,11,3,7,11,3,7,11,3,7,3,7,3,11,3,7,11,3,7,11,0,11,3,7,11,3,7,11,3,7,0,24,0,0,0,24,0,0,24,24,15,15,17,44,17,2,24,15,17,2,24,15,17,17,15,17,2,15,15,15,15,15,17,2,17,17,17,15,17,15,17,17,0,0,17,15,17,15,17,2,24,2,24,17,2,24,15,17,2,24,15,15,17,17,17,17,17,17,2,24,15,0,17,17,17,17,0,17,15,17,15,15,2,0,17,2,2,17,17,15,15,17,15,15,17,15,17,15,17,15,17,15,44,44,17,17,17,17,2,24,15,17,2,24,15,17,17,2,24,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,36,46,36,36,46,36,46,36,46,36,36,46,36,36,36,36,46,36,46,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,46,36,46,36,46,36,38,38,0,38,0,0,0,38,0,38,0,39,0,39,40,38,39,40,38,40,40,0,0,0,0,40,38,38,39,40,39,39,39,39,39,39,0,0,39,40,38,39,40,39,40,38,39,40,38,39,39,39,40,0,39,0,40,40,39,40,0,0,0,38,39,40,38,39,40,38,39,40,38,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[3,4],[[6,[5]]]],[[7,4],[[6,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[9,[8]],10,10],11],[[[9,[8]],10,10],3],[[[9,[8]],10,10],7],[11,12],[3,12],[7,12],[11,12],[[10,10,10,[12,[[9,[8]]]],13],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],[[[9,[8]],[9,[8]],10,10,10],10],0,0,0,0,0,0,0,0,0,[[15,16],15],[[15,17],15],[17],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[17,10],[[9,[18]]]],[17,[[9,[16]]]],[[15,[19,[16]]],15],0,0,0,[15,[[6,[17,20]]]],[15,[[6,[17,20]]]],[15,17],[15,17],[1,15],0,[[17,21],[[6,[20]]]],[17,[[6,[20]]]],[17,[[9,[17]]]],[[15,[19,[17]]],15],0,0,[17,17],[[]],[[[12,[22]],10,10],23],[[[12,[22]],10,10],10],[17,1],[[15,1],15],0,0,[[17,17],23],[[2,2],23],[[24,24],23],[[],23],[[],23],[[17,4],25],[[2,4],25],[[24,4],25],[[15,4],25],[[]],[[]],[[]],[17,15],[[]],[17,10],[17,10],[[17,1],[[6,[17,20]]]],[17,[[6,[10,20]]]],[[17,10,1],[[6,[17,20]]]],[[]],[[]],[[]],[[]],[[1,26,26],[[19,[16]]]],[17,15],[17,23],[[17,10],23],[[17,10],23],[1,2],[17,10],[[15,10],15],0,0,[1,15],[[],2],[[1,10],[[27,[26]]]],[1,17],[[],2],[[],2],[[1,10],17],[[1,10,[12,[10]],[12,[16]],10,[19,[16]],[19,[17]]],17],[[15,[12,[16]]],15],0,[17,10],[[15,10],15],0,[17,[[12,[22]]]],[[15,[12,[22]]],15],0,0,[17,10],[[15,10],15],0,0,0,0,[[17,17],23],[[17,10,10],17],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[1,10,[12,[16]],10,[19,[16]],[19,[17]]],[[6,[17,20]]]],[[],14],[[],14],[[],14],[[],14],[[17,10,10],[[6,[[9,[[0,[18,28]]]],20]]]],[17,[[6,[[9,[[0,[18,28]]]],20]]]],[17,[[6,[20]]]],[17,[[6,[20]]]],[17,[[6,[20]]]],[[17,10,29],[[6,[20]]]],[17,[[6,[20]]]],[[17,[12,[22]],17],[[6,[20]]]],[17,[[6,[20]]]],[[17,10],[[6,[20]]]],[[17,10],[[6,[20]]]],[[17,10],[[6,[20]]]],[17,[[6,[20]]]],[17,[[6,[20]]]],0,0,0,0,0,0,0,0,0,0,0,[[30,8],[[6,[20]]]],[[31,8],[[6,[20]]]],0,0,[[17,17],23],[[17,17,10,10,10],23],[[17,17,10,10,10],23],0,0,0,0,0,0,0,0,0,0,[[17,17,10,10,10],23],[[17,17,10,10,10],23],[[17,17,10,10,10],23],[[17,17,10,10,10],23],[[[9,[[0,[18,32]]]],[9,[[0,[18,32]]]]],23],[[17,17,10,10,10],23],[[17,17,10,10,10],23],0,[[17,17,10,10,10],23],[[17,17,10,10,10],23],[[17,17,10,10,10],23],[[17,17,10,10,10],23],[[17,17,[9,[33]],[9,[33]],[9,[34]],[9,[34]],35,35],23],[[17,17,10,10,10],23],[[17,17,10,10,10],23],[[17,17],23],[[[9,[8]],[9,[8]],10,10,10],23],[[[9,[8]],[9,[8]],10,10,10],23],[[17,17,10,10,10],23],[[[9,[8]],[9,[8]],[9,[[0,[18,32]]]],[9,[[0,[18,32]]]],10,10,10],23],[[17,17,10,10,10],23],0,0,[[10,[12,[22]]],[[12,[16]]]],[[]],[[]],[[]],[[]],[[36,10],8],0,0,0,[[36,10],36],0,0,[36,[[12,[36]]]],0,0,[36],[[],36],[[36,4],25],[[]],[[]],[[]],[[]],[36,23],[36,23],[36,10],0,0,0,[17,36],[36,10],0,[36,10],[36,10],[36,10],0,0,0,[36],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[17,[[37,[29]]]],[[17,10,10],[[12,[[37,[29]]]]]],[[17,23],[[37,[29]]]],[1,[[37,[29]]]],0,[38,38],[[]],0,0,0,[[39,10,10,10]],0,[[39,10]],0,0,0,0,[[39,4],25],[[40,4],25],[[38,4],25],[39,17],[[40,[12,[17]]],15],[[]],[[]],[[]],[[]],[[]],[[]],[39,15],[39,23],[39,10],0,0,[[[19,[17]],23,10],39],0,[40,26],0,[39,10],0,[[10,10],[[27,[26]]]],0,0,[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],0,0,0,[[[19,[17]],23,38],39],[17,[[37,[29]]]],[[40,10]],[17,[[37,[29]]]],[[40,10]],[17,[[37,[29]]]],[[40,10]],[17,[[37,[29]]]],[[40,10]],[17,[[37,[29]]]],[[40,10]],[17,[[37,[29]]]],[[17,[0,[18,41]]],[[37,[29]]]],[[40,10]],[17,[[37,[29]]]],[[40,10]],[17,[[37,[29]]]],[17,[[37,[29]]]],[[40,10]],[[40,10]],[[26,[0,[18,32,42]],[9,[[0,[18,32,42]]]]]],[26,18],[[26,10]],[17,[[37,[29]]]],[[40,10]],[[26,[9,[[0,[18,[43,[10]]]]]],[9,[8]],10,10]]],"c":[],"p":[[4,"DataType",416],[3,"DataTypeLayout",86],[3,"BitSliceIterator",38],[3,"Formatter",417],[3,"Error",417],[4,"Result",418],[3,"BitIndexIterator",38],[15,"u8"],[15,"slice"],[15,"usize"],[3,"BitIterator",38],[4,"Option",419],[8,"FnMut",420],[3,"TypeId",421],[3,"ArrayDataBuilder",86],[3,"Buffer",422],[3,"ArrayData",86],[8,"ArrowNativeType",423],[3,"Vec",424],[4,"ArrowError",425],[15,"i64"],[3,"NullBuffer",426],[15,"bool"],[4,"BufferSpec",86],[6,"Result",417],[3,"MutableBuffer",427],[15,"array"],[8,"Num",428],[8,"Fn",420],[3,"i256",429],[15,"i128"],[8,"Integer",430],[15,"i8"],[15,"i32"],[3,"UnionFields",431],[3,"FFI_ArrowArray",268],[3,"Box",432],[4,"Capacities",314],[3,"MutableArrayData",314],[3,"_MutableArrayData",314],[8,"Add",433],[8,"CheckedAdd",434],[8,"AsPrimitive",435],[6,"ArrayDataRef",86],[13,"FixedWidth",219],[3,"ArrayPrivateData",268]]},\
"arrow_file_to_stream":{"doc":"","t":"DLLLLLLLMLLLLLLLFLLLLLL","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","cast","command","command_for_update","file_name","fmt","from","from_arg_matches","from_arg_matches_mut","from_cast","group_id","into","main","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"arrow_file_to_stream"],[23,"clap_builder::builder::command"],[24,"core::fmt"],[25,"core::fmt"],[26,"clap_builder"],[27,"core::result"],[28,"clap_builder::util::id"],[29,"core::option"],[30,"arrow::error"],[31,"core::any"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2],"f":[0,[1,1],[1,1],[[]],[[]],[[]],[[],1],[[],1],0,[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[]],[[],[[9,[8]]]],[[]],[[],10],[[],7],[[],7],[[],11],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]],[[]]],"c":[],"p":[[3,"Command",23],[3,"Args",0],[3,"Formatter",24],[6,"Result",24],[3,"ArgMatches",25],[6,"Error",26],[4,"Result",27],[3,"Id",28],[4,"Option",29],[6,"Result",30],[3,"TypeId",31]]},\
"arrow_flight":{"doc":"A native Rust implementation of Apache Arrow Flight for …","t":"DDGDDDNCDDDDDDDDNDDDDDMMMMLLLLLLAMMMALLMAMAMAMMFFAALLLLLALLLLFMLMMMMMMMMMMFAMMMMALLLLLMMMLLMMALLDLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLDEDDDNNNLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLMLLMLLMMLMLLLLLLLLLLLLLLLLLLLLLLLLDDDRMMLLLLLLLLLLMLMMMMLLLLMLLLLLLLFMLLLLLLLMMLLLMMLFFMLLMMFLLLLLLLLLLLLLLLLLLNNNNENNNGNLLLLLLLLLLLLLLLLLLLNENNDMQQQQIDQQQMKKKKKKKMKKMMMDDDDDDDDDDDDDDDDMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMAMMAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMMMMMMMMLMMLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLQQQQIDQQQDLMLLLLLLLLLLLLKKKKLLLLLLLLLKKKMLLLLLKKLMLMLLLLMLLLLLLLLLLLRRRRRRRRRRRRDNDNDNDNDNDNDNDNDNDNDNDNDNRRRRRRRRRRRRRRRNNEDNDNDNDNDNDNDNDNDNDNDNDNDNDNDNRDNNNNNNNNNNNNNNNNNNNNEINNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNENNNNENENENEENENEENENNENNNNNNNNNENNNNNNNNNERDNNNENNNNENNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMKOLLLLLLMMMMMLALLLLMMMMMMMLLLLMMMLLLLLLLLAMMMLLLLLLAMLMMMMMMMMMMOMMMMMMMAMMMMMMLLMMMMMMMMLLLLLLLKLMLMLLEDDNNFLLLLLLLLLLLLLLLLMFLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLMLMLLLLLFLLMLLLLLLLLLLLLDDDDDDDDDDDDNNNNNNDDDDDDDDDDDDDDDDNNNNNNNNNNNNNNNNNNNENNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNENNNNENENENEENENEENENNENNNNNNNNNENNNNNNNNNDEEDNENNNNENNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLMMAAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLMLMMMMMMMMMMMMMLMMMLLLMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDMMMMMMMMAMMMMMMMMMAMMMMFMMMMMMMMMAMMMMMAMMAHDLLLLLMLLLLFLLLLLLLLHDLLLLLMMMMLLLFLLLLLLLLNNNDNHDDIDENNHLLKMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLMLLLLLMMLLLLLLLLLLLLLLLLLMLLLLLHHDLLLLLMMMMLLLFLLLLLMMMMMLLLLHDDDDLMMLLLLLLLLLLMLLLLLLMMMMMLLMLLLLLLLLLLMMMLLLLLLLLMMMMMLMMLLLLMMLLLLLLLLLLLLLMMLLLLHHHHHHHHQIFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKDDGMLLLLLLFLLLLLLLMLLLLLMLLMLMMLLLLLLLLLFFFFFFF","n":["Action","ActionType","ArrowResult","BasicAuth","Criteria","Empty","Err","FlightClient","FlightData","FlightDescriptor","FlightEndpoint","FlightInfo","HandshakeRequest","HandshakeResponse","IpcMessage","Location","Ok","PutResult","Result","SchemaAsIpc","SchemaResult","Ticket","app_metadata","app_metadata","body","body","borrow","borrow","borrow_mut","borrow_mut","cast","cast","client","cmd","data_body","data_header","decode","deref","deref","description","encode","endpoint","error","expression","flight_descriptor","flight_descriptor","flight_descriptor","flight_schema_as_encoded_data","flight_schema_as_flatbuffer","flight_service_client","flight_service_server","fmt","from","from","from_cast","from_cast","gen","into","into","into_request","into_request","limited_fmt","location","new","ordered","pair","password","path","payload","payload","protocol_version","protocol_version","schema","schema","schema_to_ipc_format","sql","ticket","ticket","total_bytes","total_records","trailers","try_from","try_from","try_from","try_into","try_into","type","type","type","type_id","type_id","uri","username","utils","vzip","vzip","FlightClient","add_header","borrow","borrow_mut","cast","do_action","do_exchange","do_get","do_put","fmt","from","from_cast","get_flight_info","get_schema","handshake","inner","inner","inner_mut","into","into_inner","into_request","list_actions","list_flights","make_request","metadata","metadata","metadata_mut","new","new_from_inner","try_from","try_into","type_id","vzip","DecodedFlightData","DecodedPayload","FlightDataDecoder","FlightRecordBatchStream","FlightStreamState","None","RecordBatch","Schema","app_metadata","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","dictionaries_by_field","done","extract_message","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","got_schema","headers","headers","inner","inner","into","into","into","into","into","into_inner","into_request","into_request","into_request","into_request","into_request","into_streaming_request","into_streaming_request","new","new","new_from_flight_data","new_none","new_record_batch","new_schema","payload","poll_next","poll_next","response","schema","schema","schema","state","trailers","trailers","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll_next","try_poll_next","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","with_headers","with_trailers","FlightDataEncoder","FlightDataEncoderBuilder","FlightIpcEncoder","GRPC_TARGET_MAX_FLIGHT_SIZE_BYTES","app_metadata","app_metadata","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","cast","cast","cast","data_gen","default","descriptor","descriptor","dictionary_tracker","done","encode_batch","encode_batch","encode_schema","encode_schema","encoder","fmt","from","from","from","from_cast","from_cast","from_cast","hydrate_dictionary","inner","into","into","into","into_request","into_request","into_request","into_streaming_request","max_flight_data_size","max_flight_data_size","new","new","new","options","options","poll_next","prepare_batch_for_flight","prepare_schema_for_flight","queue","queue_message","queue_messages","schema","schema","split_batch_for_grpc_response","try_from","try_from","try_from","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id","vzip","vzip","vzip","with_flight_descriptor","with_max_flight_data_size","with_metadata","with_options","with_schema","Arrow","DecodeError","Err","ExternalError","FlightError","NotYetImplemented","Ok","ProtocolError","Result","Tonic","borrow","borrow_mut","cast","fmt","fmt","from","from","from","from_cast","from_external_error","into","into_request","protocol","source","to_string","try_from","try_into","type_id","vzip","Cmd","DescriptorType","Path","Unknown","FlightServiceClient","inner","DoActionStream","DoExchangeStream","DoGetStream","DoPutStream","FlightService","FlightServiceServer","HandshakeStream","ListActionsStream","ListFlightsStream","accept_compression_encodings","do_action","do_exchange","do_get","do_put","get_flight_info","get_schema","handshake","inner","list_actions","list_flights","max_decoding_message_size","max_encoding_message_size","send_compression_encodings","Action","ActionType","BasicAuth","Criteria","Empty","FlightData","FlightDescriptor","FlightEndpoint","FlightInfo","HandshakeRequest","HandshakeResponse","Location","PutResult","Result","SchemaResult","Ticket","app_metadata","app_metadata","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","data_body","data_header","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","description","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","endpoint","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expression","flight_descriptor","flight_descriptor","flight_descriptor","flight_service_client","flight_service_server","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","location","new","new","new","new","new","new","new_cmd","new_path","ordered","password","path","payload","payload","protocol_version","protocol_version","schema","schema","set_type","ticket","ticket","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","total_bytes","total_records","try_decode_schema","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_with_schema","type","type","type","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uri","username","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_app_metadata","with_data_body","with_data_header","with_descriptor","with_descriptor","with_endpoint","with_location","with_ordered","with_ticket","with_total_bytes","with_total_records","Cmd","DescriptorType","Path","Unknown","as_str_name","borrow","borrow_mut","cast","clone","clone_into","cmp","default","eq","equivalent","equivalent","equivalent","fmt","from","from_cast","from_i32","from_ref","from_str_name","hash","into","into_request","is_valid","partial_cmp","to_owned","try_from","try_from","try_into","type_id","vzip","FlightServiceClient","accept_compressed","borrow","borrow_mut","cast","clone","clone_into","connect","do_action","do_exchange","do_get","do_put","fmt","from","from_cast","from_ref","get_flight_info","get_schema","handshake","inner","into","into_request","list_actions","list_flights","max_decoding_message_size","max_encoding_message_size","new","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","DoActionStream","DoExchangeStream","DoGetStream","DoPutStream","FlightService","FlightServiceServer","HandshakeStream","ListActionsStream","ListFlightsStream","_Inner","accept_compressed","accept_compression_encodings","borrow","borrow","borrow_mut","borrow_mut","call","call","cast","cast","clone","clone","clone_into","clone_into","do_action","do_exchange","do_get","do_put","fmt","fmt","from","from","from_arc","from_cast","from_cast","from_ref","from_ref","get_flight_info","get_schema","handshake","inner","into","into","into_make_service","into_request","into_request","list_actions","list_flights","max_decoding_message_size","max_decoding_message_size","max_encoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","send_compressed","send_compression_encodings","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_interceptor","ACTION_BEGIN_SAVEPOINT_REQUEST_TYPE_URL","ACTION_BEGIN_SAVEPOINT_RESULT_TYPE_URL","ACTION_BEGIN_TRANSACTION_REQUEST_TYPE_URL","ACTION_BEGIN_TRANSACTION_RESULT_TYPE_URL","ACTION_CANCEL_QUERY_REQUEST_TYPE_URL","ACTION_CANCEL_QUERY_RESULT_TYPE_URL","ACTION_CLOSE_PREPARED_STATEMENT_REQUEST_TYPE_URL","ACTION_CREATE_PREPARED_STATEMENT_REQUEST_TYPE_URL","ACTION_CREATE_PREPARED_STATEMENT_RESULT_TYPE_URL","ACTION_CREATE_PREPARED_SUBSTRAIT_PLAN_REQUEST_TYPE_URL","ACTION_END_SAVEPOINT_REQUEST_TYPE_URL","ACTION_END_TRANSACTION_REQUEST_TYPE_URL","ActionBeginSavepointRequest","ActionBeginSavepointRequest","ActionBeginSavepointResult","ActionBeginSavepointResult","ActionBeginTransactionRequest","ActionBeginTransactionRequest","ActionBeginTransactionResult","ActionBeginTransactionResult","ActionCancelQueryRequest","ActionCancelQueryRequest","ActionCancelQueryResult","ActionCancelQueryResult","ActionClosePreparedStatementRequest","ActionClosePreparedStatementRequest","ActionCreatePreparedStatementRequest","ActionCreatePreparedStatementRequest","ActionCreatePreparedStatementResult","ActionCreatePreparedStatementResult","ActionCreatePreparedSubstraitPlanRequest","ActionCreatePreparedSubstraitPlanRequest","ActionEndSavepointRequest","ActionEndSavepointRequest","ActionEndTransactionRequest","ActionEndTransactionRequest","Any","Basic","COMMAND_GET_CATALOGS_TYPE_URL","COMMAND_GET_CROSS_REFERENCE_TYPE_URL","COMMAND_GET_DB_SCHEMAS_TYPE_URL","COMMAND_GET_EXPORTED_KEYS_TYPE_URL","COMMAND_GET_IMPORTED_KEYS_TYPE_URL","COMMAND_GET_PRIMARY_KEYS_TYPE_URL","COMMAND_GET_SQL_INFO_TYPE_URL","COMMAND_GET_TABLES_TYPE_URL","COMMAND_GET_TABLE_TYPES_TYPE_URL","COMMAND_GET_XDBC_TYPE_INFO_TYPE_URL","COMMAND_PREPARED_STATEMENT_QUERY_TYPE_URL","COMMAND_PREPARED_STATEMENT_UPDATE_TYPE_URL","COMMAND_STATEMENT_QUERY_TYPE_URL","COMMAND_STATEMENT_SUBSTRAIT_PLAN_TYPE_URL","COMMAND_STATEMENT_UPDATE_TYPE_URL","Cascade","Char","Command","CommandGetCatalogs","CommandGetCatalogs","CommandGetCrossReference","CommandGetCrossReference","CommandGetDbSchemas","CommandGetDbSchemas","CommandGetExportedKeys","CommandGetExportedKeys","CommandGetImportedKeys","CommandGetImportedKeys","CommandGetPrimaryKeys","CommandGetPrimaryKeys","CommandGetSqlInfo","CommandGetSqlInfo","CommandGetTableTypes","CommandGetTableTypes","CommandGetTables","CommandGetTables","CommandGetXdbcTypeInfo","CommandGetXdbcTypeInfo","CommandPreparedStatementQuery","CommandPreparedStatementQuery","CommandPreparedStatementUpdate","CommandPreparedStatementUpdate","CommandStatementQuery","CommandStatementQuery","CommandStatementSubstraitPlan","CommandStatementSubstraitPlan","CommandStatementUpdate","CommandStatementUpdate","DO_PUT_UPDATE_RESULT_TYPE_URL","DoPutUpdateResult","DoPutUpdateResult","FlightSqlServerArrowVersion","FlightSqlServerCancel","FlightSqlServerName","FlightSqlServerReadOnly","FlightSqlServerSql","FlightSqlServerStatementTimeout","FlightSqlServerSubstrait","FlightSqlServerSubstraitMaxVersion","FlightSqlServerSubstraitMinVersion","FlightSqlServerTransaction","FlightSqlServerTransactionTimeout","FlightSqlServerVersion","Full","NoAction","None","None","NullabilityNoNulls","NullabilityNullable","NullabilityUnknown","Nullable","ProstMessageExt","Restrict","Savepoint","Searchable","SetDefault","SetNull","SqlAllTablesAreSelectable","SqlAnsi92SupportedLevel","SqlBatchUpdatesSupported","SqlCaseSensitivityCaseInsensitive","SqlCaseSensitivityLowercase","SqlCaseSensitivityUnknown","SqlCaseSensitivityUppercase","SqlCatalogAtStart","SqlCatalogTerm","SqlCatalogsSupportedActions","SqlConvertBigint","SqlConvertBinary","SqlConvertBit","SqlConvertChar","SqlConvertDate","SqlConvertDecimal","SqlConvertFloat","SqlConvertInteger","SqlConvertIntervalDayTime","SqlConvertIntervalYearMonth","SqlConvertLongvarbinary","SqlConvertLongvarchar","SqlConvertNumeric","SqlConvertReal","SqlConvertSmallint","SqlConvertTime","SqlConvertTimestamp","SqlConvertTinyint","SqlConvertVarbinary","SqlConvertVarchar","SqlCoreGrammar","SqlCorrelatedSubqueriesSupported","SqlDataDefinitionCausesTransactionCommit","SqlDataDefinitionTransactions","SqlDataDefinitionsInTransactionsIgnored","SqlDataManipulationTransactions","SqlDatetimeFunctions","SqlDbSchemaNameLength","SqlDdlCatalog","SqlDdlSchema","SqlDdlTable","SqlDefaultTransactionIsolation","SqlElementInIndexDefinitions","SqlElementInPrivilegeDefinitions","SqlElementInProcedureCalls","SqlExtendedGrammar","SqlExtraNameCharacters","SqlFullOuterJoins","SqlGroupByBeyondSelect","SqlGroupByUnrelated","SqlIdentifierCase","SqlIdentifierQuoteChar","SqlInfo","SqlJoinsUnsupported","SqlKeywords","SqlLimitedOuterJoins","SqlLocatorsUpdateCopy","SqlMaxBinaryLiteralLength","SqlMaxCatalogNameLength","SqlMaxCharLiteralLength","SqlMaxColumnNameLength","SqlMaxColumnsInGroupBy","SqlMaxColumnsInIndex","SqlMaxColumnsInOrderBy","SqlMaxColumnsInSelect","SqlMaxColumnsInTable","SqlMaxConnections","SqlMaxCursorNameLength","SqlMaxIndexLength","SqlMaxProcedureNameLength","SqlMaxRowSize","SqlMaxRowSizeIncludesBlobs","SqlMaxStatementLength","SqlMaxStatements","SqlMaxTableNameLength","SqlMaxTablesInSelect","SqlMaxUsernameLength","SqlMinimumGrammar","SqlNamedParametersSupported","SqlNullOrdering","SqlNullOrdering","SqlNullPlusNullIsNull","SqlNullsSortedAtEnd","SqlNullsSortedAtStart","SqlNullsSortedHigh","SqlNullsSortedLow","SqlNumericFunctions","SqlOuterJoinsSupportLevel","SqlOuterJoinsSupportLevel","SqlPositionedDelete","SqlPositionedUpdate","SqlProcedureTerm","SqlQuotedIdentifierCase","SqlResultSetConcurrencyReadOnly","SqlResultSetConcurrencyUnspecified","SqlResultSetConcurrencyUpdatable","SqlResultSetTypeForwardOnly","SqlResultSetTypeScrollInsensitive","SqlResultSetTypeScrollSensitive","SqlResultSetTypeUnspecified","SqlSavepointsSupported","SqlSchemaTerm","SqlSchemasSupportedActions","SqlSearchStringEscape","SqlSelectForUpdateSupported","SqlStoredFunctionsUsingCallSyntaxSupported","SqlStoredProceduresSupported","SqlStringFunctions","SqlSubqueriesInComparisons","SqlSubqueriesInExists","SqlSubqueriesInIns","SqlSubqueriesInQuantifieds","SqlSupportedCaseSensitivity","SqlSupportedConcurrenciesForResultSetForwardOnly","SqlSupportedConcurrenciesForResultSetScrollInsensitive","SqlSupportedConcurrenciesForResultSetScrollSensitive","SqlSupportedConcurrenciesForResultSetUnspecified","SqlSupportedElementActions","SqlSupportedGrammar","SqlSupportedGroupBy","SqlSupportedGroupBy","SqlSupportedPositionedCommands","SqlSupportedPositionedCommands","SqlSupportedResultSetConcurrency","SqlSupportedResultSetType","SqlSupportedResultSetTypes","SqlSupportedSubqueries","SqlSupportedSubqueries","SqlSupportedTransaction","SqlSupportedTransactions","SqlSupportedTransactionsIsolationLevels","SqlSupportedUnions","SqlSupportedUnions","SqlSupportsColumnAliasing","SqlSupportsConvert","SqlSupportsConvert","SqlSupportsDifferentTableCorrelationNames","SqlSupportsExpressionsInOrderBy","SqlSupportsIntegrityEnhancementFacility","SqlSupportsLikeEscapeClause","SqlSupportsNonNullableColumns","SqlSupportsOrderByUnrelated","SqlSupportsTableCorrelationNames","SqlSystemFunctions","SqlTransactionIsolationLevel","SqlTransactionNone","SqlTransactionReadCommitted","SqlTransactionReadUncommitted","SqlTransactionRepeatableRead","SqlTransactionSerializable","SqlTransactionUnspecified","SqlTransactionsSupported","SqlUnion","SqlUnionAll","SupportedSqlGrammar","TICKET_STATEMENT_QUERY_TYPE_URL","TicketStatementQuery","TicketStatementQuery","Transaction","Unknown","UpdateDeleteRules","XdbcBigint","XdbcBinary","XdbcBit","XdbcChar","XdbcDataType","XdbcDate","XdbcDatetime","XdbcDatetimeSubcode","XdbcDecimal","XdbcDouble","XdbcFloat","XdbcInteger","XdbcInterval","XdbcLongvarbinary","XdbcLongvarchar","XdbcNumeric","XdbcReal","XdbcSmallint","XdbcSubcodeDayToHour","XdbcSubcodeDayToMinute","XdbcSubcodeDayToSecond","XdbcSubcodeHourToMinute","XdbcSubcodeHourToSecond","XdbcSubcodeIntervalDay","XdbcSubcodeIntervalDayToHour","XdbcSubcodeIntervalDayToMinute","XdbcSubcodeIntervalDayToSecond","XdbcSubcodeIntervalHour","XdbcSubcodeIntervalHourToMinute","XdbcSubcodeIntervalHourToSecond","XdbcSubcodeIntervalMinute","XdbcSubcodeIntervalMinuteToSecond","XdbcSubcodeIntervalMonth","XdbcSubcodeIntervalSecond","XdbcSubcodeIntervalYear","XdbcSubcodeIntervalYearToMonth","XdbcSubcodeMinuteToSecond","XdbcSubcodeSecond","XdbcSubcodeTime","XdbcSubcodeTimeWithTimezone","XdbcSubcodeTimestamp","XdbcSubcodeTimestampWithTimezone","XdbcSubcodeUnknown","XdbcSubcodeYear","XdbcSubcodeYearToMonth","XdbcTime","XdbcTimestamp","XdbcTinyint","XdbcUnknownType","XdbcVarbinary","XdbcVarchar","XdbcWchar","XdbcWvarchar","action","action","as_any","as_item","borrow","borrow","borrow_mut","borrow_mut","cast","cast","catalog","catalog","catalog","catalog","catalog","clear","client","clone","clone","clone_into","clone_into","data_type","dataset_schema","db_schema","db_schema","db_schema","db_schema_filter_pattern","db_schema_filter_pattern","default","encoded_len","eq","eq","fk_catalog","fk_db_schema","fk_table","fmt","fmt","from","from","from_cast","from_cast","from_ref","from_ref","gen","include_schema","info","info","into","into","into_any","into_request","into_request","is","metadata","name","pack","parameter_schema","pk_catalog","pk_db_schema","pk_table","plan","plan","prepared_statement_handle","prepared_statement_handle","prepared_statement_handle","prepared_statement_handle","prost_message_ext","query","query","query","record_count","result","savepoint_id","savepoint_id","server","statement_handle","table","table","table","table_name_filter_pattern","table_types","to_owned","to_owned","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","try_from","try_from","try_from","try_into","try_into","type_id","type_id","type_url","type_url","type_url","unpack","value","vzip","vzip","ArrowFlightData","FlightSqlServiceClient","PreparedStatement","RecordBatch","Schema","arrow_data_from_flight_data","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","clone","clone","clone_into","clone_into","close","close","dataset_schema","dataset_schema","decode_error_to_arrow_error","do_action","do_get","do_put","execute","execute","execute_update","execute_update","flight_client","flight_sql_client","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","from_ref","from_ref","get_catalogs","get_cross_reference","get_db_schemas","get_exported_keys","get_flight_info_for_command","get_imported_keys","get_primary_keys","get_sql_info","get_table_types","get_tables","get_xdbc_type_info","handle","handshake","headers","inner","inner_mut","into","into","into","into_inner","into_request","into_request","into_request","new","new","parameter_binding","parameter_schema","parameter_schema","prepare","set_header","set_parameters","set_request_headers","set_token","status_to_arrow_error","to_owned","to_owned","token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ActionBeginSavepointRequest","ActionBeginSavepointResult","ActionBeginTransactionRequest","ActionBeginTransactionResult","ActionCancelQueryRequest","ActionCancelQueryResult","ActionClosePreparedStatementRequest","ActionCreatePreparedStatementRequest","ActionCreatePreparedStatementResult","ActionCreatePreparedSubstraitPlanRequest","ActionEndSavepointRequest","ActionEndTransactionRequest","Ansi92EntrySql","Ansi92FullSql","Ansi92IntermediateSql","Basic","Cascade","Char","CommandGetCatalogs","CommandGetCrossReference","CommandGetDbSchemas","CommandGetExportedKeys","CommandGetImportedKeys","CommandGetPrimaryKeys","CommandGetSqlInfo","CommandGetTableTypes","CommandGetTables","CommandGetXdbcTypeInfo","CommandPreparedStatementQuery","CommandPreparedStatementUpdate","CommandStatementQuery","CommandStatementSubstraitPlan","CommandStatementUpdate","DoPutUpdateResult","FlightSqlServerArrowVersion","FlightSqlServerCancel","FlightSqlServerName","FlightSqlServerReadOnly","FlightSqlServerSql","FlightSqlServerStatementTimeout","FlightSqlServerSubstrait","FlightSqlServerSubstraitMaxVersion","FlightSqlServerSubstraitMinVersion","FlightSqlServerTransaction","FlightSqlServerTransactionTimeout","FlightSqlServerVersion","Full","NoAction","None","None","NullabilityNoNulls","NullabilityNullable","NullabilityUnknown","Nullable","Restrict","Savepoint","Searchable","SetDefault","SetNull","SqlAllTablesAreSelectable","SqlAnsi92SupportedLevel","SqlBatchUpdatesSupported","SqlCaseSensitivityCaseInsensitive","SqlCaseSensitivityLowercase","SqlCaseSensitivityUnknown","SqlCaseSensitivityUppercase","SqlCatalogAtStart","SqlCatalogTerm","SqlCatalogsSupportedActions","SqlConvertBigint","SqlConvertBinary","SqlConvertBit","SqlConvertChar","SqlConvertDate","SqlConvertDecimal","SqlConvertFloat","SqlConvertInteger","SqlConvertIntervalDayTime","SqlConvertIntervalYearMonth","SqlConvertLongvarbinary","SqlConvertLongvarchar","SqlConvertNumeric","SqlConvertReal","SqlConvertSmallint","SqlConvertTime","SqlConvertTimestamp","SqlConvertTinyint","SqlConvertVarbinary","SqlConvertVarchar","SqlCoreGrammar","SqlCorrelatedSubqueriesSupported","SqlDataDefinitionCausesTransactionCommit","SqlDataDefinitionTransactions","SqlDataDefinitionsInTransactionsIgnored","SqlDataManipulationTransactions","SqlDatetimeFunctions","SqlDbSchemaNameLength","SqlDdlCatalog","SqlDdlSchema","SqlDdlTable","SqlDefaultTransactionIsolation","SqlElementInIndexDefinitions","SqlElementInPrivilegeDefinitions","SqlElementInProcedureCalls","SqlExtendedGrammar","SqlExtraNameCharacters","SqlFullOuterJoins","SqlGroupByBeyondSelect","SqlGroupByUnrelated","SqlIdentifierCase","SqlIdentifierQuoteChar","SqlInfo","SqlJoinsUnsupported","SqlKeywords","SqlLimitedOuterJoins","SqlLocatorsUpdateCopy","SqlMaxBinaryLiteralLength","SqlMaxCatalogNameLength","SqlMaxCharLiteralLength","SqlMaxColumnNameLength","SqlMaxColumnsInGroupBy","SqlMaxColumnsInIndex","SqlMaxColumnsInOrderBy","SqlMaxColumnsInSelect","SqlMaxColumnsInTable","SqlMaxConnections","SqlMaxCursorNameLength","SqlMaxIndexLength","SqlMaxProcedureNameLength","SqlMaxRowSize","SqlMaxRowSizeIncludesBlobs","SqlMaxStatementLength","SqlMaxStatements","SqlMaxTableNameLength","SqlMaxTablesInSelect","SqlMaxUsernameLength","SqlMinimumGrammar","SqlNamedParametersSupported","SqlNullOrdering","SqlNullOrdering","SqlNullPlusNullIsNull","SqlNullsSortedAtEnd","SqlNullsSortedAtStart","SqlNullsSortedHigh","SqlNullsSortedLow","SqlNumericFunctions","SqlOuterJoinsSupportLevel","SqlOuterJoinsSupportLevel","SqlPositionedDelete","SqlPositionedUpdate","SqlProcedureTerm","SqlQuotedIdentifierCase","SqlResultSetConcurrencyReadOnly","SqlResultSetConcurrencyUnspecified","SqlResultSetConcurrencyUpdatable","SqlResultSetTypeForwardOnly","SqlResultSetTypeScrollInsensitive","SqlResultSetTypeScrollSensitive","SqlResultSetTypeUnspecified","SqlSavepointsSupported","SqlSchemaTerm","SqlSchemasSupportedActions","SqlSearchStringEscape","SqlSelectForUpdateSupported","SqlStoredFunctionsUsingCallSyntaxSupported","SqlStoredProceduresSupported","SqlStringFunctions","SqlSubqueriesInComparisons","SqlSubqueriesInExists","SqlSubqueriesInIns","SqlSubqueriesInQuantifieds","SqlSupportedCaseSensitivity","SqlSupportedConcurrenciesForResultSetForwardOnly","SqlSupportedConcurrenciesForResultSetScrollInsensitive","SqlSupportedConcurrenciesForResultSetScrollSensitive","SqlSupportedConcurrenciesForResultSetUnspecified","SqlSupportedElementActions","SqlSupportedGrammar","SqlSupportedGroupBy","SqlSupportedGroupBy","SqlSupportedPositionedCommands","SqlSupportedPositionedCommands","SqlSupportedResultSetConcurrency","SqlSupportedResultSetType","SqlSupportedResultSetTypes","SqlSupportedSubqueries","SqlSupportedSubqueries","SqlSupportedTransaction","SqlSupportedTransactions","SqlSupportedTransactionsIsolationLevels","SqlSupportedUnions","SqlSupportedUnions","SqlSupportsColumnAliasing","SqlSupportsConvert","SqlSupportsConvert","SqlSupportsDifferentTableCorrelationNames","SqlSupportsExpressionsInOrderBy","SqlSupportsIntegrityEnhancementFacility","SqlSupportsLikeEscapeClause","SqlSupportsNonNullableColumns","SqlSupportsOrderByUnrelated","SqlSupportsTableCorrelationNames","SqlSystemFunctions","SqlTransactionIsolationLevel","SqlTransactionNone","SqlTransactionReadCommitted","SqlTransactionReadUncommitted","SqlTransactionRepeatableRead","SqlTransactionSerializable","SqlTransactionUnspecified","SqlTransactionsSupported","SqlUnion","SqlUnionAll","SubstraitPlan","SupportedAnsi92SqlGrammarLevel","SupportedSqlGrammar","TicketStatementQuery","Transaction","UpdateDeleteRules","XdbcBigint","XdbcBinary","XdbcBit","XdbcChar","XdbcDataType","XdbcDate","XdbcDatetime","XdbcDatetimeSubcode","XdbcDecimal","XdbcDouble","XdbcFloat","XdbcInteger","XdbcInterval","XdbcLongvarbinary","XdbcLongvarchar","XdbcNumeric","XdbcReal","XdbcSmallint","XdbcSubcodeDayToHour","XdbcSubcodeDayToMinute","XdbcSubcodeDayToSecond","XdbcSubcodeHourToMinute","XdbcSubcodeHourToSecond","XdbcSubcodeIntervalDay","XdbcSubcodeIntervalDayToHour","XdbcSubcodeIntervalDayToMinute","XdbcSubcodeIntervalDayToSecond","XdbcSubcodeIntervalHour","XdbcSubcodeIntervalHourToMinute","XdbcSubcodeIntervalHourToSecond","XdbcSubcodeIntervalMinute","XdbcSubcodeIntervalMinuteToSecond","XdbcSubcodeIntervalMonth","XdbcSubcodeIntervalSecond","XdbcSubcodeIntervalYear","XdbcSubcodeIntervalYearToMonth","XdbcSubcodeMinuteToSecond","XdbcSubcodeSecond","XdbcSubcodeTime","XdbcSubcodeTimeWithTimezone","XdbcSubcodeTimestamp","XdbcSubcodeTimestampWithTimezone","XdbcSubcodeUnknown","XdbcSubcodeYear","XdbcSubcodeYearToMonth","XdbcTime","XdbcTimestamp","XdbcTinyint","XdbcUnknownType","XdbcVarbinary","XdbcVarchar","XdbcWchar","XdbcWvarchar","action","action","action","action","action_cancel_query_result","action_end_savepoint_request","action_end_transaction_request","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_str_name","as_u32","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","catalog","catalog","catalog","catalog","catalog","catalog","catalog","catalog","catalog","catalog","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","data_type","data_type","dataset_schema","db_schema","db_schema","db_schema","db_schema","db_schema","db_schema","db_schema_filter_pattern","db_schema_filter_pattern","db_schema_filter_pattern","db_schema_filter_pattern","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fk_catalog","fk_catalog","fk_db_schema","fk_db_schema","fk_table","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","from_str_name","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","include_schema","info","info","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_builder","into_builder","into_builder","into_builder","into_builder","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","is_valid","name","parameter_schema","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pk_catalog","pk_catalog","pk_db_schema","pk_db_schema","pk_table","plan","plan","plan","prepared_statement_handle","prepared_statement_handle","prepared_statement_handle","prepared_statement_handle","query","query","query","record_count","result","result","savepoint_id","savepoint_id","set_action","set_action","set_result","statement_handle","table","table","table","table_name_filter_pattern","table_name_filter_pattern","table_types","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","transaction_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","type_url","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CancelResult","Cancelled","Cancelling","NotCancellable","Unspecified","as_str_name","borrow","borrow_mut","cast","clone","clone_into","cmp","default","eq","equivalent","equivalent","equivalent","fmt","from","from_cast","from_i32","from_ref","from_str_name","hash","into","into_request","is_valid","partial_cmp","to_owned","try_from","try_into","type_id","vzip","EndSavepoint","Release","Rollback","Unspecified","as_str_name","borrow","borrow_mut","cast","clone","clone_into","cmp","default","eq","equivalent","equivalent","equivalent","fmt","from","from_cast","from_i32","from_ref","from_str_name","hash","into","into_request","is_valid","partial_cmp","to_owned","try_from","try_into","type_id","vzip","Commit","EndTransaction","Rollback","Unspecified","as_str_name","borrow","borrow_mut","cast","clone","clone_into","cmp","default","eq","equivalent","equivalent","equivalent","fmt","from","from_cast","from_i32","from_ref","from_str_name","hash","into","into_request","is_valid","partial_cmp","to_owned","try_from","try_into","type_id","vzip","GetCatalogsBuilder","GetDbSchemasBuilder","GetTablesBuilder","SqlInfoData","SqlInfoDataBuilder","XdbcTypeInfo","XdbcTypeInfoData","XdbcTypeInfoDataBuilder","auto_increment","batch","batch","case_sensitive","catalog_filter","catalog_filter","catalog_name","catalog_name","catalogs","catalogs","column_size","create_params","data_type","datetime_subcode","db_schema_filter_pattern","db_schema_filter_pattern","db_schema_name","db_schema_name","db_schemas","fixed_prec_scale","infos","infos","interval_precision","lexsort_to_indices","literal_prefix","literal_suffix","local_type_name","maximum_scale","minimum_scale","nullable","num_prec_radix","searchable","sql_data_type","sql_info","table_name","table_name_filter_pattern","table_schema","table_type","table_types_filter","tables","type_name","unsigned_attribute","xdbc_info","GET_CATALOG_SCHEMA","GetCatalogsBuilder","append","borrow","borrow_mut","build","cast","catalogs","default","from","from","from_cast","get_catalogs_schema","into","into_request","new","schema","try_from","try_into","type_id","vzip","GET_DB_SCHEMAS_SCHEMA","GetDbSchemasBuilder","append","borrow","borrow_mut","build","cast","catalog_filter","catalog_name","db_schema_filter_pattern","db_schema_name","from","from","from_cast","get_db_schemas_schema","into","into_request","new","schema","try_from","try_into","type_id","vzip","BigInt","Bitmask","Bool","GetSqlInfoBuilder","ListMap","SQL_INFO_SCHEMA","SqlInfoData","SqlInfoDataBuilder","SqlInfoName","SqlInfoUnionBuilder","SqlInfoValue","String","StringList","UNION_TYPE","append","append_value","as_u32","batch","bigint_values","bool_values","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","cast","cast","cast","cast","cast","clone","clone","clone_into","clone_into","default","eq","eq","finish","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_ref","from_ref","info","infos","infos","int32_bitmask_values","int32_to_int32_list_map_values","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","new","new","offsets","record_batch","schema","schema","schema","schema","string_list_values","string_values","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_ids","vzip","vzip","vzip","vzip","vzip","GET_TABLES_SCHEMA_WITHOUT_TABLE_SCHEMA","GET_TABLES_SCHEMA_WITH_TABLE_SCHEMA","GetTablesBuilder","append","borrow","borrow_mut","build","cast","catalog_filter","catalog_name","db_schema_filter_pattern","db_schema_name","from","from","from_cast","get_tables_schema","include_schema","into","into_request","new","schema","table_name","table_name_filter_pattern","table_schema","table_type","table_types_filter","try_from","try_into","type_id","vzip","GET_XDBC_INFO_SCHEMA","GetXdbcTypeInfoBuilder","XdbcTypeInfo","XdbcTypeInfoData","XdbcTypeInfoDataBuilder","append","auto_increment","batch","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","case_sensitive","cast","cast","cast","cast","clone","clone_into","column_size","create_params","data_type","data_type","datetime_subcode","default","default","fixed_prec_scale","fmt","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_ref","infos","infos","interval_precision","into","into","into","into","into_request","into_request","into_request","into_request","literal_prefix","literal_suffix","local_type_name","maximum_scale","minimum_scale","new","nullable","num_prec_radix","record_batch","schema","schema","schema","searchable","sql_data_type","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","unsigned_attribute","vzip","vzip","vzip","vzip","BEGIN_SAVEPOINT","BEGIN_TRANSACTION","CANCEL_QUERY","CLOSE_PREPARED_STATEMENT","CREATE_PREPARED_STATEMENT","CREATE_PREPARED_SUBSTRAIT_PLAN","END_SAVEPOINT","END_TRANSACTION","FlightService","FlightSqlService","arrow_error_to_status","decode_error_to_status","do_action_begin_savepoint","do_action_begin_transaction","do_action_cancel_query","do_action_close_prepared_statement","do_action_create_prepared_statement","do_action_create_prepared_substrait_plan","do_action_end_savepoint","do_action_end_transaction","do_action_fallback","do_exchange_fallback","do_get_catalogs","do_get_cross_reference","do_get_exported_keys","do_get_fallback","do_get_imported_keys","do_get_prepared_statement","do_get_primary_keys","do_get_schemas","do_get_sql_info","do_get_statement","do_get_table_types","do_get_tables","do_get_xdbc_type_info","do_handshake","do_put_fallback","do_put_prepared_statement_query","do_put_prepared_statement_update","do_put_statement_update","do_put_substrait_plan","get_flight_info_catalogs","get_flight_info_cross_reference","get_flight_info_exported_keys","get_flight_info_imported_keys","get_flight_info_prepared_statement","get_flight_info_primary_keys","get_flight_info_schemas","get_flight_info_sql_info","get_flight_info_statement","get_flight_info_substrait_plan","get_flight_info_table_types","get_flight_info_tables","get_flight_info_xdbc_type_info","list_custom_actions","register_sql_info","ExtractTrailersStream","LazyTrailers","SharedTrailers","alloc","borrow","borrow","borrow_mut","borrow_mut","cast","cast","extract_lazy_trailers","fmt","fmt","from","from","from_cast","from_cast","get","inner","into","into","into_request","into_request","into_streaming_request","phantom","poll_discover","poll_next","ptr","size_hint","trailers","trailers","try_from","try_from","try_into","try_into","try_poll_next","type_id","type_id","vzip","vzip","batches_to_flight_data","flight_data_from_arrow_batch","flight_data_from_arrow_schema","flight_data_to_arrow_batch","flight_data_to_batches","flight_schema_from_arrow_schema","ipc_message_from_arrow_schema"],"q":[[0,"arrow_flight"],[96,"arrow_flight::client"],[129,"arrow_flight::decode"],[229,"arrow_flight::encode"],[306,"arrow_flight::error"],[335,"arrow_flight::flight_descriptor"],[339,"arrow_flight::flight_service_client"],[341,"arrow_flight::flight_service_server"],[364,"arrow_flight::gen"],[772,"arrow_flight::gen::flight_descriptor"],[805,"arrow_flight::gen::flight_service_client"],[840,"arrow_flight::gen::flight_service_server"],[908,"arrow_flight::sql"],[1342,"arrow_flight::sql::client"],[1434,"arrow_flight::sql::gen"],[3070,"arrow_flight::sql::gen::action_cancel_query_result"],[3103,"arrow_flight::sql::gen::action_end_savepoint_request"],[3135,"arrow_flight::sql::gen::action_end_transaction_request"],[3167,"arrow_flight::sql::metadata"],[3218,"arrow_flight::sql::metadata::catalogs"],[3239,"arrow_flight::sql::metadata::db_schemas"],[3262,"arrow_flight::sql::metadata::sql_info"],[3378,"arrow_flight::sql::metadata::tables"],[3408,"arrow_flight::sql::metadata::xdbc_info"],[3495,"arrow_flight::sql::server"],[3551,"arrow_flight::trailers"],[3591,"arrow_flight::utils"],[3598,"arrow_schema::schema"],[3599,"arrow_ipc::writer"],[3600,"arrow_ipc::writer"],[3601,"core::fmt"],[3602,"arrow_schema::error"],[3603,"core::result"],[3604,"core::any"],[3605,"bytes::bytes"],[3606,"futures_core::stream"],[3607,"futures_core::stream"],[3608,"core::convert"],[3609,"tonic::transport::channel"],[3610,"tonic::metadata::map"],[3611,"core::option"],[3612,"arrow_array::record_batch"],[3613,"arrow_schema::schema"],[3614,"core::task::wake"],[3615,"core::task::poll"],[3616,"arrow_array::array"],[3617,"core::iter::traits::collect"],[3618,"alloc::vec"],[3619,"tonic::status"],[3620,"core::error"],[3621,"alloc::boxed"],[3622,"alloc::string"],[3623,"core::future::future"],[3624,"tonic::codec::decode"],[3625,"core::cmp"],[3626,"core::hash"],[3627,"tonic::body"],[3628,"tonic::client::service"],[3629,"tonic::codec::compression"],[3630,"core::clone"],[3631,"tonic::transport::channel::endpoint"],[3632,"core::convert"],[3633,"tonic::request"],[3634,"tonic::request"],[3635,"tower_service"],[3636,"tonic::service::interceptor"],[3637,"tonic::service::interceptor"],[3638,"http_body"],[3639,"alloc::sync"],[3640,"axum::routing::into_make_service"],[3641,"prost::error"],[3642,"arrow_array::array::primitive_array"],[3643,"core::convert"],[3644,"alloc::collections::btree::map"],[3645,"std::collections::hash::map"],[3646,"arrow_schema::datatype"]],"d":["An opaque action specific for the service.","Describes an available action, including both the name …","","A message for doing simple auth.","A service specific expression that can be used to return a …","","Contains the error value","","A batch of Arrow data as part of a stream of batches.","The name or tag for a Flight. May be used as a way to …","A particular stream or split associated with a flight.","The access coordinates for retrieval of a dataset. With a …","The request that a client provides to a server on …","","IpcMessage represents a <code>Schema</code> in the format expected in …","A location where a Flight service will accept retrieval of …","Contains the success value","The response message associated with the submission of a …","An opaque result returned after executing an action.","SchemaAsIpc represents a pairing of a <code>Schema</code> with …","Wrap the result of a getSchema call","An opaque identifier that the service can use to retrieve …","Application-defined metadata.","","","","","","","","","","Mid Level <code>FlightClient</code>","Opaque value used to express a command. Should only be …","The actual batch of Arrow data. Preferably handled with …","Header for message data as described in …","Decoder to create <code>RecordBatch</code> streams from <code>FlightData</code> …","","","","Encoder to create <code>FlightData</code> streams from <code>RecordBatch</code> …","A list of endpoints associated with the flight. To consume …","Common error types","","Defines a <code>Flight</code> for generation or retrieval.","The descriptor associated with this info.","The descriptor of the data. This is only relevant when a …","","","Low Level tonic <code>FlightServiceClient</code>.","Low Level tonic <code>FlightServiceServer</code> and <code>FlightService</code>.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Limits the output of value to limit…","A list of URIs where this ticket can be redeemed via …","","FlightEndpoints are in the same order as the data.","","","List of strings identifying a particular dataset. Should …","Arbitrary auth/handshake info.","Arbitrary auth/handshake info.","A defined protocol version","A defined protocol version","The schema of the dataset in its IPC form: 4 bytes - an …","The schema of the dataset in its IPC form: 4 bytes - an …","","Support for execute SQL queries using Apache Arrow Flight …","Token used to retrieve this stream.","","","Set these to -1 if unknown.","Helper to extract HTTP/gRPC trailers from a tonic stream.","","","","","","","","","","","","","Utilities to assist with reading and writing Arrow data as …","","","A “Mid level” Apache Arrow Flight client.","Add the specified header with value to all subsequent …","","","","Make a <code>DoAction</code> call to the server and returning a <code>Stream</code> …","Make a <code>DoExchange</code> call to the server with the provided …","Make a <code>DoGet</code> call to the server with the provided ticket, …","Make a <code>DoPut</code> call to the server with the provided <code>Stream</code> …","","Returns the argument unchanged.","","Make a <code>GetFlightInfo</code> call to the server with the provided …","Make a <code>GetSchema</code> call to the server with the provided …","Perform an Arrow Flight handshake with the server, sending …","Return a reference to the underlying tonic …","The inner client","Return a mutable reference to the underlying tonic …","Calls <code>U::from(self)</code>.","Consume this client and return the underlying tonic …","","Make a <code>ListActions</code> call to the server and returning a …","Make a <code>ListFlights</code> call to the server with the provided …","return a Request, adding any configured metadata","Return a reference to gRPC metadata included with each …","Optional grpc header metadata to include with each request","Return a reference to gRPC metadata included with each …","Creates a client client with the provided <code>Channel</code>","Creates a new higher level client with the provided lower …","","","","","FlightData and the decoded payload (Schema, RecordBatch), …","The result of decoding <code>FlightData</code>","Wrapper around a stream of <code>FlightData</code> that handles the …","Decodes a Stream of <code>FlightData</code> back into <code>RecordBatch</code>es. …","tracks the state needed to reconstruct <code>RecordBatch</code>es from a","None (no data was sent in the corresponding FlightData)","A decoded Record batch.","A decoded Schema message","return the metadata field of the inner flight data","","","","","","","","","","","","","","","","","Seen the end of the inner stream?","Extracts flight data from the next message, updating …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Has a message defining the schema been received yet?","Headers attached to this stream.","Optional grpc header metadata.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume self and return the wrapped <code>FlightDataDecoder</code>","","","","","","","","Create a new wrapper around the stream of <code>FlightData</code>","Create a new <code>FlightRecordBatchStream</code> from a decoded stream","Create a new <code>FlightRecordBatchStream</code> from a stream of …","","","","","Returns the result of decoding the next <code>FlightData</code> message …","Returns the next <code>RecordBatch</code> available in this stream, or …","Underlying data stream","Returns the current schema for this stream","Return schema for the stream, if it has been received","","Decoding state","Trailers attached to this stream.","Optional grpc trailer metadata.","","","","","","","","","","","","","","","","","","","","","","","Record response headers.","Record response trailers.","Stream that encodes a stream of record batches to flight …","Creates a <code>Stream</code> of <code>FlightData</code>s from a <code>Stream</code> of <code>Result</code>&lt;…","The data needed to encode a stream of flight data, holding …","Default target size for encoded <code>FlightData</code>.","optional metadata to add to schema FlightData","Metadata to add to the schema message","","","","","","","Return a <code>Stream</code> of <code>FlightData</code>, consuming self. More …","","","","","","cleared after the first FlightData message is sent","Optional flight descriptor, if known before data.","","Is this stream done (inner is empty or errored)","Encodes batch into one or more <code>FlightData</code> messages in …","Convert a <code>RecordBatch</code> to a Vec of <code>FlightData</code> representing …","Encodes schema as a <code>FlightData</code> in self.queue. Updates …","Encode a schema as a FlightData","do the encoding / tracking of dictionaries","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Hydrates a dictionary to its underlying type","Input stream","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Target maximum size of flight data (see details on …","The maximum approximate target message size in bytes (see …","","","","","Ipc writer options","","Prepares a RecordBatch for transport over the Arrow Flight …","Prepare an arrow Schema for transport over the Arrow …","data queued up to send but not yet sent","Place the <code>FlightData</code> in the queue to send","Place the <code>FlightData</code> in the queue to send","schema, set after the first batch","Optional schema, if known before data.","Split <code>RecordBatch</code> so it hopefully fits into a gRPC …","","","","","","","","","","","","","","Specify a flight descriptor in the first FlightData …","Set the (approximate) maximum size, in bytes, of the …","Specify application specific metadata included in the …","Set the <code>IpcWriteOptions</code> used to encode the <code>RecordBatch</code>es …","Specify a schema for the RecordBatches being sent. If a …","Underlying arrow error","An error occurred during decoding","Contains the error value","External error that can provide source of error by calling …","Errors for the Apache Arrow Flight crate","Returned when functionality is not yet available.","Contains the success value","Some unexpected message was received","","Error from the underlying tonic library","","","","","","Returns the argument unchanged.","","","","Wraps an external error in an <code>ArrowError</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","An opaque command to generate a dataset.","Describes what type of descriptor is defined.","A named path that identifies a dataset. A path is composed …","Protobuf pattern, not used.","A flight service is an endpoint for retrieving or storing …","","Server streaming response type for the DoAction method.","Server streaming response type for the DoExchange method.","Server streaming response type for the DoGet method.","Server streaming response type for the DoPut method.","Generated trait containing gRPC methods that should be …","A flight service is an endpoint for retrieving or storing …","Server streaming response type for the Handshake method.","Server streaming response type for the ListActions method.","Server streaming response type for the ListFlights method.","","Flight services can support an arbitrary number of simple …","Open a bidirectional data channel for a given descriptor. …","Retrieve a single stream associated with a particular …","Push a stream to the flight service associated with a …","For a given FlightDescriptor, get information about how …","For a given FlightDescriptor, get the Schema as described …","Handshake between client and server. Depending on the …","","A flight service exposes all of the available action types …","Get a list of available streams given a particular …","","","","An opaque action specific for the service.","Describes an available action, including both the name …","A message for doing simple auth.","A service specific expression that can be used to return a …","","A batch of Arrow data as part of a stream of batches.","The name or tag for a Flight. May be used as a way to …","A particular stream or split associated with a flight.","The access coordinates for retrieval of a dataset. With a …","The request that a client provides to a server on …","","A location where a Flight service will accept retrieval of …","The response message associated with the submission of a …","An opaque result returned after executing an action.","Wrap the result of a getSchema call","An opaque identifier that the service can use to retrieve …","Application-defined metadata.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Opaque value used to express a command. Should only be …","The actual batch of Arrow data. Preferably handled with …","Header for message data as described in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A list of endpoints associated with the flight. To consume …","","","","","","","","","","","","","","","","","","Nested message and enum types in <code>FlightDescriptor</code>.","The descriptor associated with this info.","The descriptor of the data. This is only relevant when a …","Generated client implementations.","Generated server implementations.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A list of URIs where this ticket can be redeemed via …","Create a new Action with type and body","Create a new Result with the specified body","Create a new, empty <code>FlightInfo</code>, describing where to fetch …","Create a new, empty <code>FlightEndpoint</code> that represents a …","Create a new <code>Ticket</code>","Create a new <code>FlightData</code>.","Create a new opaque command <code>CMD</code> <code>FlightDescriptor</code> to …","Create a new named path <code>PATH</code> <code>FlightDescriptor</code> that …","FlightEndpoints are in the same order as the data.","","List of strings identifying a particular dataset. Should …","Arbitrary auth/handshake info.","Arbitrary auth/handshake info.","A defined protocol version","A defined protocol version","The schema of the dataset in its IPC form: 4 bytes - an …","The schema of the dataset in its IPC form: 4 bytes - an …","Sets <code>type</code> to the provided enum value.","Token used to retrieve this stream.","","","","","","","","","","","","","","","","","","","","","","","","","Set these to -1 if unknown.","Try and convert the data in this  <code>FlightInfo</code> into a <code>Schema</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specify the schema for the response.","Returns the enum value of <code>type</code>, or the default if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add optional application specific metadata to the message","Add a data body. See <code>IpcDataGenerator</code> to create this data.","Add a data header","Add a <code>FlightDescriptor</code> describing what this data is","Add a <code>FlightDescriptor</code> describing the data","Add specific a endpoint for fetching the data","Add a location <code>uri</code> to this endpoint. Note each endpoint can","Specify if the response is ordered across endpoints","Set the <code>Ticket</code> used to retrieve data from the endpoint","Set the number of bytes in the result, if known","Set the number of records in the result, if known","An opaque command to generate a dataset.","Describes what type of descriptor is defined.","A named path that identifies a dataset. A path is composed …","Protobuf pattern, not used.","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","Returns the argument unchanged.","","Converts an <code>i32</code> to a <code>DescriptorType</code>, or <code>None</code> if <code>value</code> is …","","Creates an enum from field names used in the ProtoBuf …","","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if <code>value</code> is a variant of <code>DescriptorType</code>.","","","","","","","","A flight service is an endpoint for retrieving or storing …","Enable decompressing responses.","","","","","","Attempt to create a new client by connecting to a given …","Flight services can support an arbitrary number of simple …","Open a bidirectional data channel for a given descriptor. …","Retrieve a single stream associated with a particular …","Push a stream to the flight service associated with a …","","Returns the argument unchanged.","","","For a given FlightDescriptor, get information about how …","For a given FlightDescriptor, get the Schema as described …","Handshake between client and server. Depending on the …","","Calls <code>U::from(self)</code>.","","A flight service exposes all of the available action types …","Get a list of available streams given a particular …","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","Compress requests with the given encoding.","","","","","","","","Server streaming response type for the DoAction method.","Server streaming response type for the DoExchange method.","Server streaming response type for the DoGet method.","Server streaming response type for the DoPut method.","Generated trait containing gRPC methods that should be …","A flight service is an endpoint for retrieving or storing …","Server streaming response type for the Handshake method.","Server streaming response type for the ListActions method.","Server streaming response type for the ListFlights method.","","Enable decompressing requests with the given encoding.","","","","","","","","","","","","","","Flight services can support an arbitrary number of simple …","Open a bidirectional data channel for a given descriptor. …","Retrieve a single stream associated with a particular …","Push a stream to the flight service associated with a …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","For a given FlightDescriptor, get information about how …","For a given FlightDescriptor, get the Schema as described …","Handshake between client and server. Depending on the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","A flight service exposes all of the available action types …","Get a list of available streams given a particular …","Limits the maximum size of a decoded message.","","Limits the maximum size of an encoded message.","","","","","Compress responses with the given encoding, if the client …","","","","","","","","","","","","","","","","","","","","","","","","","Request message for the “BeginSavepoint” action. …","","The result of a “BeginSavepoint” action.","","Request message for the “BeginTransaction” action. …","","The result of a “BeginTransaction” action.","","Request message for the “CancelQuery” action.","","The result of cancelling a query.","","Request message for the “ClosePreparedStatement” …","","Request message for the “CreatePreparedStatement” …","","Wrap the result of a “CreatePreparedStatement” or “…","","Request message for the “CreatePreparedSubstraitPlan” …","","Request message for the “EndSavepoint” action.","","Request message for the “EndTransaction” action.","","An implementation of the protobuf <code>Any</code> message type","Indicates that the column can be used In a WHERE clause …","","","","","","","","","","","","","","","","","Indicates that the column can be used in a WHERE clause if …","Helper to convert to/from protobuf <code>Any</code> message to a …","Represents a request to retrieve the list of catalogs on a …","","Represents a request to retrieve a description of the …","","Represents a request to retrieve the list of database …","","Represents a request to retrieve a description of the …","","Represents a request to retrieve the foreign keys of a …","","Represents a request to retrieve the primary keys of a …","","Represents a metadata request. Used in the command member …","","Represents a request to retrieve the list of table types …","","Represents a request to retrieve the list of tables, and …","","Represents a request to retrieve information about data …","","Represents an instance of executing a prepared statement. …","","Represents a SQL update query. Used in the command member …","","Represents a SQL query. Used in the command member of …","","Represents a Substrait plan. Used in the command member of …","","Represents a SQL update query. Used in the command member …","","","Returned from the RPC call DoPut when a …","","Retrieves a UTF-8 string with the Arrow format version of …","Retrieves a boolean value indicating whether the Flight …","Retrieves a UTF-8 string with the name of the Flight SQL …","Retrieves a boolean value indicating whether the Flight …","Retrieves a boolean value indicating whether the Flight …","Retrieves an int32 indicating the timeout (in …","Retrieves a boolean value indicating whether the Flight …","Retrieves a string value indicating the maximum supported …","Retrieves a string value indicating the minimum supported …","Retrieves an int32 indicating whether the Flight SQL …","Retrieves an int32 indicating the timeout (in …","Retrieves a UTF-8 string with the native version of the …","Indicates that the column can be used in a WHERE clause …","","Unknown/not indicated/no support","Indicates that column can not be used in a WHERE clause.","Indicates that the fields does not allow the use of null …","Indicates that the fields allow the use of null values.","Indicates that nullability of the fields can not be …","","ProstMessageExt are useful utility methods for …","","Transactions and savepoints","","","","Retrieves a boolean value indicating whether all tables …","Retrieves the supported ANSI92 SQL grammar level.","Retrieves a boolean value indicating whether this database …","","","","","Retrieves a boolean value indicating whether a catalog …","Retrieves a UTF-8 string with the preferred term for “…","Retrieves the supported actions for a SQL schema.","","","","","","","","","","","","","","","","","","","","","","Retrieves a boolean value indicating whether correlated …","Retrieves a boolean value indicating whether a data …","","Retrieves a boolean value indicating whether a data …","","Retrieves a UTF-8 string list with values of the supported …","Retrieves a int64 value representing the maximum number of …","Retrieves a boolean value indicating whether the Flight …","Retrieves a boolean value indicating whether the Flight …","Indicates whether the Flight SQL Server supports CREATE …","Retrieves this database’s default transaction isolation …","","","","","Retrieves a UTF-8 string with all the “extra” …","","","","Retrieves a int32 ordinal representing the case …","Retrieves a UTF-8 string with the supported character(s) …","Options for CommandGetSqlInfo.","","Retrieves a UTF-8 string list with values of the supported …","","Retrieves a boolean value indicating whether updates made …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the the maximum …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value the maximum number of characters …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a boolean indicating whether the return value …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","","Retrieves a boolean value indicating whether named …","","Retrieves the null ordering.","Retrieves a boolean value indicating whether …","","","","","Retrieves a UTF-8 string list with values of the supported …","","Retrieves the support level for SQL OUTER JOINs.","","","Retrieves a UTF-8 string with the preferred term for “…","Retrieves a int32 describing the case sensitivity of …","","","","","","","","Retrieves a boolean value indicating whether this database …","Retrieves a UTF-8 string with the preferred term for “…","Retrieves the supported actions for a SQL schema.","Retrieves the UTF-8 string that can be used to escape …","Retrieves a boolean value indicating whether SELECT FOR …","Retrieves a boolean value indicating whether invoking …","Retrieves a boolean value indicating whether stored …","Retrieves a UTF-8 string list with values of the supported …","","","","","","Returns an int32 bitmask value concurrency types supported …","Returns an int32 bitmask value concurrency types supported …","Returns an int32 bitmask value concurrency types supported …","Returns an int32 bitmask value concurrency types supported …","","Retrieves the supported SQL grammar level as per the ODBC …","","Retrieves the supported GROUP BY commands;","","Retrieves the supported SQL positioned commands.","","","Retrieves an int32 bitmask value representing the …","","Retrieves the supported SQL subqueries.","The level of support for Flight SQL transaction RPCs.","","Retrieves the supported transactions isolation levels.","","Retrieves the supported SQL UNIONs.","Retrieves a boolean value indicating whether column …","","Retrieves a map where the key is the type to convert from …","Retrieves a boolean value indicating whether, when table …","Retrieves a boolean value indicating whether expressions …","Retrieves a boolean value indicating whether the SQL …","Retrieves a boolean value indicating whether specifying a …","Retrieves a boolean value indicating whether columns may …","Retrieves a boolean value indicating whether using a …","Retrieves a boolean value indicating whether, when table …","Retrieves a UTF-8 string list with values of the supported …","","","","","","","","Retrieves a boolean value indicating whether transactions …","","","","","Represents a ticket resulting from GetFlightInfo with a …","","Transactions, but not savepoints. A savepoint is a mark …","Any message that is not any FlightSQL command.","","","","","","The JDBC/ODBC-defined type of any object. All the values …","","","Detailed subtype information for XDBC_TYPE_DATETIME and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether to commit/rollback the given transaction.","Whether to rollback/release the given savepoint.","Convert this Message to <code>Any</code>","Macro to coerce a token to an item, specifically to build …","","","","","","","Specifies the Catalog to search for the tables. An empty …","Specifies the Catalog to search for the tables. An empty …","Specifies the catalog to search for the table. An empty …","Specifies the catalog to search for the foreign key table. …","Specifies the catalog to search for the primary key table. …","","A FlightSQL Client <code>FlightSqlServiceClient</code>","","","","","Specifies the data type to search for the info.","If a result set generating query was provided, …","Specifies the schema to search for the table. An empty …","Specifies the schema to search for the foreign key table. …","Specifies the schema to search for the primary key table. …","Specifies a filter pattern for schemas to search for. When …","Specifies a filter pattern for schemas to search for. When …","","","","","The catalog name where the foreign table is. An empty …","The schema name where the foreign table is. An empty …","The foreign table name. It cannot be null.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Specifies if the Arrow schema should be returned for found …","Values are modelled after ODBC’s SQLGetInfo() function. …","The result of the GetFlightInfo RPC that initiated the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the command to <code>Any</code>.","","","","Builders and function for building responses to FlightSQL …","Name for the savepoint.","","If the query provided contained parameters, …","The catalog name where the parent table is. An empty …","The Schema name where the parent table is. An empty string …","The parent table name. It cannot be null.","The serialized substrait.Plan to create a prepared …","A serialized substrait.Plan","Opaque handle for the prepared statement on the server.","Opaque handle for the prepared statement on the server.","Opaque handle for the prepared statement on the server.","Opaque handle for the prepared statement on the server.","","The valid SQL string to create a prepared statement for.","The SQL syntax.","The SQL syntax.","The number of records updated. A return value of -1 …","","Opaque handle for the savepoint on the server.","Opaque handle for the savepoint on the server.","Helper trait <code>FlightSqlService</code> for implementing a …","Unique identifier for the instance of the statement to …","Specifies the table to get the primary keys for.","Specifies the foreign key table to get the foreign keys …","Specifies the primary key table to get the foreign keys …","Specifies a filter pattern for tables to search for. When …","Specifies a filter of table types which must match. The …","","","Create/execute the prepared statement as part of this …","Create/execute the prepared statement as part of this …","The transaction to which a savepoint belongs.","Opaque handle for the transaction on the server.","Opaque handle for the transaction on the server.","Include the query as part of this transaction (if unset, …","Include the query as part of this transaction (if unset, …","Include the query as part of this transaction (if unset, …","","","","","","","","type_url for this Message","Get the URL for the command.","A URL/resource name that uniquely identifies the type of …","","Must be a valid serialized protocol buffer of the above …","","","","A FlightSQLServiceClient is an endpoint for retrieving or …","A PreparedStatement","","","Extract <code>Schema</code> or <code>RecordBatch</code>es from the <code>FlightData</code> wire …","","","","","","","","","","","","","","Explicitly shut down and clean up the client.","Close the prepared statement, so that this …","Retrieve the ResultSet schema from the query.","","","DoAction allows a flight client to do a specific action …","Given a flight ticket, request to be sent the stream. …","Push a stream to the flight service associated with a …","Execute a query on the server.","Executes the prepared statement query on the server.","Execute a update query on the server, and return the …","Executes the prepared statement update query on the server.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Request a list of catalogs as tabular FlightInfo results","Retrieves a description of the foreign key columns in the …","Request a list of database schemas as tabular FlightInfo …","Retrieves a description about the foreign key columns that …","","Retrieves the foreign key columns for the given table.","Request the primary keys for a table.","Request a list of SQL information.","Request a list of table types.","Request a list of tables.","Request XDBC SQL information.","","Perform a <code>handshake</code> with the server, passing credentials …","","Return a reference to the underlying <code>FlightServiceClient</code>","Return a mutable reference to the underlying …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume this client and return the underlying …","","","","Creates a new FlightSql client that connects to a server …","","","Retrieve the parameter schema from the query.","","Create a prepared statement object.","Set header value.","Set a RecordBatch that contains the parameters that will …","","Set auth token to the given value.","","","","","","","","","","","","","","","","","Request message for the “BeginSavepoint” action. …","The result of a “BeginSavepoint” action.","Request message for the “BeginTransaction” action. …","The result of a “BeginTransaction” action.","Request message for the “CancelQuery” action.","The result of cancelling a query.","Request message for the “ClosePreparedStatement” …","Request message for the “CreatePreparedStatement” …","Wrap the result of a “CreatePreparedStatement” or “…","Request message for the “CreatePreparedSubstraitPlan” …","Request message for the “EndSavepoint” action.","Request message for the “EndTransaction” action.","","","","Indicates that the column can be used In a WHERE clause …","","Indicates that the column can be used in a WHERE clause if …","Represents a request to retrieve the list of catalogs on a …","Represents a request to retrieve a description of the …","Represents a request to retrieve the list of database …","Represents a request to retrieve a description of the …","Represents a request to retrieve the foreign keys of a …","Represents a request to retrieve the primary keys of a …","Represents a metadata request. Used in the command member …","Represents a request to retrieve the list of table types …","Represents a request to retrieve the list of tables, and …","Represents a request to retrieve information about data …","Represents an instance of executing a prepared statement. …","Represents a SQL update query. Used in the command member …","Represents a SQL query. Used in the command member of …","Represents a Substrait plan. Used in the command member of …","Represents a SQL update query. Used in the command member …","Returned from the RPC call DoPut when a …","Retrieves a UTF-8 string with the Arrow format version of …","Retrieves a boolean value indicating whether the Flight …","Retrieves a UTF-8 string with the name of the Flight SQL …","Retrieves a boolean value indicating whether the Flight …","Retrieves a boolean value indicating whether the Flight …","Retrieves an int32 indicating the timeout (in …","Retrieves a boolean value indicating whether the Flight …","Retrieves a string value indicating the maximum supported …","Retrieves a string value indicating the minimum supported …","Retrieves an int32 indicating whether the Flight SQL …","Retrieves an int32 indicating the timeout (in …","Retrieves a UTF-8 string with the native version of the …","Indicates that the column can be used in a WHERE clause …","","Unknown/not indicated/no support","Indicates that column can not be used in a WHERE clause.","Indicates that the fields does not allow the use of null …","Indicates that the fields allow the use of null values.","Indicates that nullability of the fields can not be …","","","Transactions and savepoints","","","","Retrieves a boolean value indicating whether all tables …","Retrieves the supported ANSI92 SQL grammar level.","Retrieves a boolean value indicating whether this database …","","","","","Retrieves a boolean value indicating whether a catalog …","Retrieves a UTF-8 string with the preferred term for “…","Retrieves the supported actions for a SQL schema.","","","","","","","","","","","","","","","","","","","","","","Retrieves a boolean value indicating whether correlated …","Retrieves a boolean value indicating whether a data …","","Retrieves a boolean value indicating whether a data …","","Retrieves a UTF-8 string list with values of the supported …","Retrieves a int64 value representing the maximum number of …","Retrieves a boolean value indicating whether the Flight …","Retrieves a boolean value indicating whether the Flight …","Indicates whether the Flight SQL Server supports CREATE …","Retrieves this database’s default transaction isolation …","","","","","Retrieves a UTF-8 string with all the “extra” …","","","","Retrieves a int32 ordinal representing the case …","Retrieves a UTF-8 string with the supported character(s) …","Options for CommandGetSqlInfo.","","Retrieves a UTF-8 string list with values of the supported …","","Retrieves a boolean value indicating whether updates made …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the the maximum …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value the maximum number of characters …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a boolean indicating whether the return value …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","Retrieves a int64 value representing the maximum number of …","","Retrieves a boolean value indicating whether named …","","Retrieves the null ordering.","Retrieves a boolean value indicating whether …","","","","","Retrieves a UTF-8 string list with values of the supported …","","Retrieves the support level for SQL OUTER JOINs.","","","Retrieves a UTF-8 string with the preferred term for “…","Retrieves a int32 describing the case sensitivity of …","","","","","","","","Retrieves a boolean value indicating whether this database …","Retrieves a UTF-8 string with the preferred term for “…","Retrieves the supported actions for a SQL schema.","Retrieves the UTF-8 string that can be used to escape …","Retrieves a boolean value indicating whether SELECT FOR …","Retrieves a boolean value indicating whether invoking …","Retrieves a boolean value indicating whether stored …","Retrieves a UTF-8 string list with values of the supported …","","","","","","Returns an int32 bitmask value concurrency types supported …","Returns an int32 bitmask value concurrency types supported …","Returns an int32 bitmask value concurrency types supported …","Returns an int32 bitmask value concurrency types supported …","","Retrieves the supported SQL grammar level as per the ODBC …","","Retrieves the supported GROUP BY commands;","","Retrieves the supported SQL positioned commands.","","","Retrieves an int32 bitmask value representing the …","","Retrieves the supported SQL subqueries.","The level of support for Flight SQL transaction RPCs.","","Retrieves the supported transactions isolation levels.","","Retrieves the supported SQL UNIONs.","Retrieves a boolean value indicating whether column …","","Retrieves a map where the key is the type to convert from …","Retrieves a boolean value indicating whether, when table …","Retrieves a boolean value indicating whether expressions …","Retrieves a boolean value indicating whether the SQL …","Retrieves a boolean value indicating whether specifying a …","Retrieves a boolean value indicating whether columns may …","Retrieves a boolean value indicating whether using a …","Retrieves a boolean value indicating whether, when table …","Retrieves a UTF-8 string list with values of the supported …","","","","","","","","Retrieves a boolean value indicating whether transactions …","","","An embedded message describing a Substrait plan to execute.","","","Represents a ticket resulting from GetFlightInfo with a …","Transactions, but not savepoints. A savepoint is a mark …","","","","","","The JDBC/ODBC-defined type of any object. All the values …","","","Detailed subtype information for XDBC_TYPE_DATETIME and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the enum value of <code>action</code>, or the default if the …","Returns the enum value of <code>action</code>, or the default if the …","Whether to commit/rollback the given transaction.","Whether to rollback/release the given savepoint.","Nested message and enum types in <code>ActionCancelQueryResult</code>.","Nested message and enum types in <code>ActionEndSavepointRequest</code>.","Nested message and enum types in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>catalog</code>, or the default value if …","Returns the value of <code>catalog</code>, or the default value if …","Returns the value of <code>catalog</code>, or the default value if …","Returns the value of <code>catalog</code>, or the default value if …","Returns the value of <code>catalog</code>, or the default value if …","Specifies the Catalog to search for the tables. An empty …","Specifies the Catalog to search for the tables. An empty …","Specifies the catalog to search for the table. An empty …","Specifies the catalog to search for the foreign key table. …","Specifies the catalog to search for the primary key table. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>data_type</code>, or the default value if …","Specifies the data type to search for the info.","If a result set generating query was provided, …","Returns the value of <code>db_schema</code>, or the default value if …","Returns the value of <code>db_schema</code>, or the default value if …","Returns the value of <code>db_schema</code>, or the default value if …","Specifies the schema to search for the table. An empty …","Specifies the schema to search for the foreign key table. …","Specifies the schema to search for the primary key table. …","Returns the value of <code>db_schema_filter_pattern</code>, or the …","Returns the value of <code>db_schema_filter_pattern</code>, or the …","Specifies a filter pattern for schemas to search for. When …","Specifies a filter pattern for schemas to search for. When …eturns the value of <code>fk_catalog</code>, or the default value if …","The catalog name where the foreign table is. An empty …","Returns the value of <code>fk_db_schema</code>, or the default value if …","The schema name where the foreign table is. An empty …","The foreign table name. It cannot be null.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an <code>i32</code> to a <code>SqlInfo</code>, or <code>None</code> if <code>value</code> is not a …","Converts an <code>i32</code> to a <code>SqlSupportedTransaction</code>, or <code>None</code> if …","Converts an <code>i32</code> to a <code>SqlSupportedCaseSensitivity</code>, or <code>None</code> …","Converts an <code>i32</code> to a <code>SqlNullOrdering</code>, or <code>None</code> if <code>value</code> is …","Converts an <code>i32</code> to a <code>SupportedSqlGrammar</code>, or <code>None</code> if <code>value</code> …","Converts an <code>i32</code> to a <code>SupportedAnsi92SqlGrammarLevel</code>, or …","Converts an <code>i32</code> to a <code>SqlOuterJoinsSupportLevel</code>, or <code>None</code> if …","Converts an <code>i32</code> to a <code>SqlSupportedGroupBy</code>, or <code>None</code> if <code>value</code> …","Converts an <code>i32</code> to a <code>SqlSupportedElementActions</code>, or <code>None</code> …","Converts an <code>i32</code> to a <code>SqlSupportedPositionedCommands</code>, or …","Converts an <code>i32</code> to a <code>SqlSupportedSubqueries</code>, or <code>None</code> if …","Converts an <code>i32</code> to a <code>SqlSupportedUnions</code>, or <code>None</code> if <code>value</code> …","Converts an <code>i32</code> to a <code>SqlTransactionIsolationLevel</code>, or <code>None</code> …","Converts an <code>i32</code> to a <code>SqlSupportedTransactions</code>, or <code>None</code> if …","Converts an <code>i32</code> to a <code>SqlSupportedResultSetType</code>, or <code>None</code> if …","Converts an <code>i32</code> to a <code>SqlSupportedResultSetConcurrency</code>, or …","Converts an <code>i32</code> to a <code>SqlSupportsConvert</code>, or <code>None</code> if <code>value</code> …","Converts an <code>i32</code> to a <code>XdbcDataType</code>, or <code>None</code> if <code>value</code> is not …","Converts an <code>i32</code> to a <code>XdbcDatetimeSubcode</code>, or <code>None</code> if <code>value</code> …","Converts an <code>i32</code> to a <code>Nullable</code>, or <code>None</code> if <code>value</code> is not a …","Converts an <code>i32</code> to a <code>Searchable</code>, or <code>None</code> if <code>value</code> is not a …","Converts an <code>i32</code> to a <code>UpdateDeleteRules</code>, or <code>None</code> if <code>value</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","Creates an enum from field names used in the ProtoBuf …","","","","","","","","","","","","","","","","","","","","","","","Specifies if the Arrow schema should be returned for found …","Values are modelled after ODBC’s SQLGetInfo() function. …","The result of the GetFlightInfo RPC that initiated the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a builder suitable for constructing a response","Create a builder suitable for constructing a response","Create a builder suitable for constructing a response","Create a builder suitable for constructing a response","Create a builder suitable for constructing a response","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>SqlInfo</code>.","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of <code>SqlNullOrdering</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>SupportedSqlGrammar</code>.","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of <code>SqlSupportedGroupBy</code>.","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of <code>SqlSupportedUnions</code>.","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of …","Returns <code>true</code> if <code>value</code> is a variant of <code>SqlSupportsConvert</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>XdbcDataType</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>XdbcDatetimeSubcode</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Nullable</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>Searchable</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>UpdateDeleteRules</code>.","Name for the savepoint.","If the query provided contained parameters, …","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>pk_catalog</code>, or the default value if …","The catalog name where the parent table is. An empty …","Returns the value of <code>pk_db_schema</code>, or the default value if …","The Schema name where the parent table is. An empty string …","The parent table name. It cannot be null.","The serialized substrait.Plan to create a prepared …","The serialized substrait.Plan to create a prepared …","A serialized substrait.Plan","Opaque handle for the prepared statement on the server.","Opaque handle for the prepared statement on the server.","Opaque handle for the prepared statement on the server.","Opaque handle for the prepared statement on the server.","The valid SQL string to create a prepared statement for.","The SQL syntax.","The SQL syntax.","The number of records updated. A return value of -1 …","Returns the enum value of <code>result</code>, or the default if the …","","Opaque handle for the savepoint on the server.","Opaque handle for the savepoint on the server.","Sets <code>action</code> to the provided enum value.","Sets <code>action</code> to the provided enum value.","Sets <code>result</code> to the provided enum value.","Unique identifier for the instance of the statement to …","Specifies the table to get the primary keys for.","Specifies the foreign key table to get the foreign keys …","Specifies the primary key table to get the foreign keys …","Returns the value of <code>table_name_filter_pattern</code>, or the …","Specifies a filter pattern for tables to search for. When …","Specifies a filter of table types which must match. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the value of <code>transaction_id</code>, or the default value …","Returns the value of <code>transaction_id</code>, or the default value …","Returns the value of <code>transaction_id</code>, or the default value …","Returns the value of <code>transaction_id</code>, or the default value …","Returns the value of <code>transaction_id</code>, or the default value …","Create/execute the prepared statement as part of this …","Create/execute the prepared statement as part of this …","The transaction to which a savepoint belongs.","Opaque handle for the transaction on the server.","Opaque handle for the transaction on the server.","Include the query as part of this transaction (if unset, …","Include the query as part of this transaction (if unset, …","Include the query as part of this transaction (if unset, …he Substrait release, e.g. “0.12.0”. This information …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The cancellation request is complete. Subsequent requests …","The cancellation request is in progress. The client may …","The query is not cancellable. The client should not retry …","The cancellation status is unknown. Servers should avoid …","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","Returns the argument unchanged.","","Converts an <code>i32</code> to a <code>CancelResult</code>, or <code>None</code> if <code>value</code> is not …","","Creates an enum from field names used in the ProtoBuf …","","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if <code>value</code> is a variant of <code>CancelResult</code>.","","","","","","","","Release the savepoint.","Roll back to a savepoint.","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","Returns the argument unchanged.","","Converts an <code>i32</code> to a <code>EndSavepoint</code>, or <code>None</code> if <code>value</code> is not …","","Creates an enum from field names used in the ProtoBuf …","","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if <code>value</code> is a variant of <code>EndSavepoint</code>.","","","","","","","Commit the transaction.","","Roll back the transaction.","","String value of the enum field names used in the ProtoBuf …","","","","","","","","","","","","","Returns the argument unchanged.","","Converts an <code>i32</code> to a <code>EndTransaction</code>, or <code>None</code> if <code>value</code> is …","","Creates an enum from field names used in the ProtoBuf …","","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if <code>value</code> is a variant of <code>EndTransaction</code>.","","","","","","","A builder for a <code>CommandGetCatalogs</code> response.","A builder for a <code>CommandGetDbSchemas</code> response.","A builder for a <code>CommandGetTables</code> response.","A builder for <code>SqlInfoData</code> which is used to create …","Helper to create <code>CommandGetSqlInfo</code> responses.","Data structure representing type information for xdbc …","Helper to create <code>CommandGetXdbcTypeInfo</code> responses.","","","","","","","","","","","","","","","","","","","","<code>GetDbSchemasBuilder</code> for building responses to …","","","Use BTreeMap to ensure the values are sorted by value as …","","Helper function to sort all the columns in an array","","","","","","","","","","Helpers for building responses to <code>CommandGetSqlInfo</code> …","","","","","","<code>GetTablesBuilder</code> for building responses to <code>CommandGetTables</code>…","","","Helpers for <code>CommandGetXdbcTypeInfo</code> metadata requests.","The schema for GetCatalogs","A builder for a <code>CommandGetCatalogs</code> response.","Append a row","","","builds a <code>RecordBatch</code> with the correct schema for a …","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Create a new instance of <code>GetCatalogsBuilder</code>","Returns the schema that will result from <code>CommandGetCatalogs</code>","","","","","The schema for GetDbSchemas","A builder for a <code>CommandGetDbSchemas</code> response.","Append a row","","","builds a <code>RecordBatch</code> with the correct schema for a …","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Create a new instance of <code>GetDbSchemasBuilder</code>","Return the schema of the RecordBatch that will be returned …","","","","","","","","A builder for a <code>CommandGetSqlInfo</code> response.","","","A builder for <code>SqlInfoData</code> which is used to create …","Helper to create <code>CommandGetSqlInfo</code> responses.","Something that can be converted into u32 (the …","Handles creating the dense <code>UnionArray</code> described by …","Represents a dynamic value","","","<code>DataType</code> for the output union array","register the specific sql metadata item","Append the specified value to this builder","","","","","","","","","","","","","","","Builds a <code>RecordBatch</code> with the correct schema for a …","Encode the contents of this list according to the …","","","","","","","","","","","","","Complete the construction and build the <code>UnionArray</code>","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","requested <code>SqlInfo</code>s. If empty means return all infos.","","Use BTreeMap to ensure the values are sorted by value as …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Return a  <code>RecordBatch</code> containing only the requested <code>u32</code>, …","Returns the DataType created by this builder","Return the schema of the RecordBatch that will be returned …","Return the schema of the RecordBatch that will be returned …","Return the <code>Schema</code> for a GetSchema RPC call with …","","","","","","","","","","","","","","","","","","","","","","","","","","The schema for GetTables without <code>table_schema</code> column","The schema for GetTables with <code>table_schema</code> column","A builder for a <code>CommandGetTables</code> response.","Append a row","","","builds a <code>RecordBatch</code> for <code>CommandGetTables</code>","","","","","","","Returns the argument unchanged.","","","Should the “schema” column be included","Calls <code>U::from(self)</code>.","","Create a new instance of <code>GetTablesBuilder</code>","Return the schema of the RecordBatch that will be returned …","","","","","","","","","","The schema for GetXdbcTypeInfo","A builder for a <code>CommandGetXdbcTypeInfo</code> response.","Data structure representing type information for xdbc …","Helper to create <code>CommandGetXdbcTypeInfo</code> responses.","","Append a new row","","","","","","","","","","","Create helper structure for handling xdbc metadata …","Builds a <code>RecordBatch</code> with the correct schema for a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Create a new instance of <code>XdbcTypeInfoDataBuilder</code>.","","","Return the raw (not encoded) RecordBatch that will be …","Return the schema of the RecordBatch that will be returned …","Return the <code>Schema</code> for a GetSchema RPC call with …","Return the schema of the RecordBatch that will be returned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When impl FlightSqlService, you can always set …","Implements FlightSqlService to handle the flight sql …","","","Begin a savepoint","Begin a transaction","Cancel a query","Close a prepared statement.","Create a prepared statement from given SQL statement.","Create a prepared substrait plan.","End a savepoint","End a transaction","Implementors may override to handle additional calls to …","do_exchange Implementors may override to handle additional …","Get a FlightDataStream containing the list of catalogs.","Get a FlightDataStream containing the data related to the …","Get a FlightDataStream containing the data related to the …","Implementors may override to handle additional calls to …","Get a FlightDataStream containing the data related to the …","Get a FlightDataStream containing the prepared statement …","Get a FlightDataStream containing the data related to the …","Get a FlightDataStream containing the list of schemas.","Get a FlightDataStream containing the list of SqlInfo …","Get a FlightDataStream containing the query results.","Get a FlightDataStream containing the data related to the …","Get a FlightDataStream containing the list of tables.","Get a FlightDataStream containing the data related to the …","Accept authentication and return a token …","Implementors may override to handle additional calls to …","Bind parameters to given prepared statement.","Execute an update SQL prepared statement.","Execute an update SQL statement.","Execute a substrait plan","Get a FlightInfo for listing catalogs.","Get a FlightInfo to extract information about cross …","Get a FlightInfo to extract information about exported …","Get a FlightInfo to extract information about imported …","Get a FlightInfo for executing an already created prepared …","Get a FlightInfo to extract information about primary and …","Get a FlightInfo for listing schemas.","Get a FlightInfo for retrieving other information (See …","Get a FlightInfo for executing a SQL query.","Get a FlightInfo for executing a substrait plan.","Get a FlightInfo to extract information about the table …","Get a FlightInfo for listing tables.","Get a FlightInfo to extract information about the …","Add custom actions to list_actions() result","Register a new SqlInfo result, making it available when …","Stream that stores the gRPC trailers into <code>LazyTrailers</code>.","gRPC trailers that are extracted by <code>ExtractTrailersStream</code>.","","","","","","","","","Extract <code>LazyTrailers</code> from <code>Streaming</code> tonic response.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","gRPC trailers that are known at the end of a stream.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Convert <code>RecordBatch</code>es to wire protocol <code>FlightData</code>s","Convert a <code>RecordBatch</code> to a vector of <code>FlightData</code> …","Convert a <code>Schema</code> to <code>FlightData</code> by converting to an IPC …","Convert <code>FlightData</code> (with supplied schema and dictionaries) …","Convert a slice of wire protocol <code>FlightData</code>s into a vector …","Convert a <code>Schema</code> to <code>SchemaResult</code> by converting to an IPC …","Convert a <code>Schema</code> to bytes in the format expected in …"],"i":[0,0,0,0,0,0,178,0,0,0,0,0,0,0,0,0,178,0,0,0,0,0,35,25,18,64,1,2,1,2,1,2,0,26,35,35,0,1,2,31,0,27,0,61,0,27,35,0,0,0,0,2,1,2,1,2,0,1,2,1,2,0,66,1,27,1,63,26,59,62,59,62,65,27,0,0,66,24,27,27,0,1,2,2,1,2,31,18,26,1,2,67,63,0,1,2,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,38,38,38,33,34,23,37,33,38,34,23,37,33,38,34,23,37,33,38,37,34,34,34,23,37,33,38,34,23,37,33,38,34,23,37,33,38,23,23,23,23,33,34,23,37,33,38,23,34,23,37,33,38,34,23,34,23,23,33,33,33,33,34,23,34,34,23,37,34,23,23,34,23,37,33,38,34,23,37,33,38,34,23,34,23,37,33,38,34,23,37,33,38,23,23,0,0,0,0,47,46,47,48,46,47,48,46,46,47,48,46,48,46,47,46,48,47,47,48,47,48,47,46,47,48,46,47,48,46,0,47,47,48,46,47,48,46,47,47,46,47,48,46,48,46,47,0,0,47,47,47,47,46,0,47,48,46,47,48,46,47,47,48,46,47,48,46,46,46,46,46,46,52,52,17,52,0,52,17,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,68,0,68,68,0,30,89,89,89,89,0,0,89,89,89,90,89,89,89,89,89,89,89,90,89,89,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,25,18,64,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,26,35,35,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,31,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,27,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,61,0,27,35,0,0,59,62,63,60,31,61,18,64,65,26,26,27,27,66,66,67,67,24,24,35,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,35,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,66,18,64,27,66,24,35,26,26,27,63,26,59,62,59,62,65,27,26,66,24,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,26,27,66,67,24,35,27,27,27,59,62,63,60,31,61,18,64,65,65,26,27,66,67,24,35,25,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,27,26,31,18,26,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,67,63,59,62,63,60,31,61,18,64,65,26,27,66,67,24,35,25,35,35,35,27,35,27,66,27,66,27,27,68,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,89,89,89,89,0,0,89,89,89,0,90,90,92,90,92,90,90,90,92,90,92,90,92,90,89,89,89,89,92,90,92,90,90,92,90,92,90,89,89,89,90,92,90,90,92,90,89,89,90,90,90,90,90,90,90,90,90,92,90,92,90,92,90,92,90,92,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,153,0,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,0,96,107,107,107,107,107,107,107,107,107,107,107,107,153,154,134,153,152,152,152,0,0,154,134,0,154,154,107,107,107,135,135,135,135,107,107,107,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,137,107,107,146,107,146,107,107,107,107,107,107,141,141,141,137,107,139,140,140,107,107,0,139,107,139,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,137,107,0,107,107,136,136,136,136,107,0,107,142,142,107,107,148,148,148,147,147,147,147,107,107,107,107,107,107,107,107,143,143,143,143,0,107,107,107,107,0,107,0,107,0,107,0,0,107,0,107,0,0,107,0,107,107,0,107,107,107,107,107,107,107,107,107,0,145,145,145,145,145,146,107,144,144,0,0,0,96,134,96,0,150,150,150,150,0,150,150,0,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,150,150,150,150,150,150,150,150,110,112,97,0,96,95,96,95,96,95,103,108,106,104,105,95,0,96,95,96,95,109,119,106,104,105,103,108,95,95,96,95,102,102,102,96,95,96,95,96,95,96,95,0,108,114,132,96,95,96,96,95,95,0,122,95,119,102,102,102,118,126,119,120,128,130,0,117,125,129,131,133,124,112,0,127,106,104,105,108,108,96,95,117,118,122,123,110,125,126,129,96,96,95,96,95,96,95,97,96,95,95,95,96,95,0,0,0,98,98,0,98,99,100,98,99,100,98,99,100,99,100,99,100,99,100,100,100,0,99,99,99,99,100,99,100,99,100,99,100,98,99,100,98,99,100,99,100,99,99,99,99,99,99,99,99,99,99,99,100,99,99,99,99,98,99,100,99,98,99,100,99,100,100,100,100,99,99,100,99,99,0,99,100,99,98,99,100,98,99,100,98,99,100,98,99,100,0,0,0,0,0,0,0,0,0,0,0,0,138,138,138,153,154,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,107,107,107,107,107,107,107,107,107,107,107,153,154,134,153,152,152,152,0,154,134,0,154,154,107,107,107,135,135,135,135,107,107,107,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,137,107,107,146,107,146,107,107,107,107,107,107,141,141,141,137,107,139,140,140,107,107,0,139,107,139,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,137,107,0,107,107,136,136,136,136,107,0,107,142,142,107,107,148,148,148,147,147,147,147,107,107,107,107,107,107,107,107,143,143,143,143,0,107,107,107,107,0,107,0,107,0,107,0,0,107,0,107,0,0,107,0,107,107,0,107,107,107,107,107,107,107,107,107,0,145,145,145,145,145,146,107,144,144,0,0,0,0,134,0,150,150,150,150,0,150,150,0,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,150,150,150,150,150,150,150,150,110,112,110,112,0,0,0,114,109,115,103,108,116,106,104,105,102,117,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,107,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,103,108,106,104,105,103,108,106,104,105,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,109,109,119,106,104,105,106,104,105,103,108,103,108,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,107,107,107,134,134,134,135,135,135,136,136,136,137,137,137,138,138,138,139,139,139,140,140,140,141,141,141,142,142,142,143,143,143,144,144,144,145,145,145,146,146,146,147,147,147,148,148,148,149,149,149,150,150,150,151,151,151,152,152,152,153,153,153,154,154,154,102,102,102,102,102,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,108,114,132,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,122,119,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,102,102,102,102,102,156,118,126,119,120,128,130,117,125,129,131,133,133,124,112,110,112,133,127,106,104,105,108,108,108,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,117,118,125,126,129,117,118,122,123,110,125,126,129,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,114,109,115,103,108,116,106,104,105,102,117,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,156,114,109,115,103,108,116,106,104,105,102,117,156,118,119,120,121,122,123,124,110,112,125,126,127,128,129,130,131,132,133,107,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,0,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,0,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,111,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,0,0,0,0,0,0,0,0,176,157,159,176,162,163,162,163,0,161,176,176,176,176,162,163,162,163,0,176,175,167,176,0,176,176,176,176,176,176,176,176,176,0,163,163,163,163,163,0,176,176,0,0,0,161,161,161,161,161,161,161,161,161,161,0,161,161,161,161,161,161,161,161,0,0,162,162,162,162,162,162,162,162,162,162,162,162,0,162,162,162,162,162,162,162,162,169,169,169,0,169,0,0,0,0,0,0,169,169,0,167,170,168,157,170,170,170,157,158,169,167,170,157,158,169,167,158,167,170,157,158,169,167,169,167,169,167,167,169,167,170,169,167,170,157,158,169,169,169,169,169,169,169,169,169,169,167,170,157,158,169,167,169,167,158,158,167,170,170,170,157,158,169,167,170,157,158,169,167,170,167,170,157,170,157,158,167,170,170,169,167,170,157,158,169,167,170,157,158,169,167,170,157,158,169,167,170,170,157,158,169,167,0,0,0,163,163,163,163,163,163,163,163,163,163,163,163,0,163,163,163,163,163,163,163,163,163,163,163,163,163,163,0,0,0,0,0,175,176,159,159,175,160,176,159,175,160,176,175,160,176,159,175,160,176,176,176,176,176,160,176,176,175,176,176,176,159,175,160,176,159,175,160,176,176,175,160,176,159,175,160,176,159,175,160,176,176,176,176,176,176,175,176,176,159,159,175,160,176,176,176,159,175,160,176,159,175,160,176,159,175,160,176,176,176,159,175,160,176,0,0,0,0,0,0,0,0,179,0,0,0,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,0,0,0,180,177,45,177,45,177,45,0,177,45,177,45,177,45,45,177,177,45,177,45,177,180,177,177,180,177,177,45,177,45,177,45,177,177,45,177,45,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[1],[2],0,0,0,0,0,0,0,0,[[3,4],5],[[3,4],2],0,0,[[2,6],7],[[]],[[]],[[]],[[]],0,[[]],[[]],[[],8],[[],8],[[6,[10,[9]],11],7],0,[[3,4],1],0,0,0,0,0,0,0,0,0,0,[1,[[13,[2,12]]]],0,0,0,0,0,0,[[],13],[1,[[13,[2,12]]]],[[],13],[[],13],[[],13],0,0,0,[[],14],[[],14],0,0,0,[[]],[[]],0,[[15,16,16],17],[[]],[[]],[[]],[[15,18],[[17,[[20,[[17,[19]]]]]]]],[[15,[0,[21,22]]],[[17,[23]]]],[[15,24],[[17,[23]]]],[[15,[0,[21,22]]],[[17,[[20,[[17,[25]]]]]]]],[[15,6],7],[[]],[[]],[[15,26],[[17,[27]]]],[[15,26],[[17,[3]]]],[[15,[28,[19]]],[[17,[19]]]],[15,[[30,[29]]]],0,[15,[[30,[29]]]],[[]],[15,[[30,[29]]]],[[],8],[15,[[17,[[20,[[17,[31]]]]]]]],[[15,[28,[19]]],[[17,[[20,[[17,[27]]]]]]]],[15,8],[15,32],0,[15,32],[29,15],[[[30,[29]]],15],[[],13],[[],13],[[],14],[[]],0,0,0,0,0,0,0,0,[33,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[34,35],[[17,[[36,[33]]]]]],[[34,6],7],[[23,6],7],[[37,6],7],[[33,6],7],[[38,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,39],[23,32],0,0,0,[[]],[[]],[[]],[[]],[[]],[23,34],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[0,[21,22]]],34],[34,23],[[[0,[21,22]]],23],[35,33],[[35,40],33],[[35,41],33],0,[[[42,[34]],43],[[44,[36]]]],[[[42,[23]],43],[[44,[[36,[[17,[40]]]]]]]],0,[34,[[36,[41]]]],[23,[[36,[41]]]],0,0,[23,[[36,[32]]]],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[42,43],[[44,[[36,[13]]]]]],[[42,43],[[44,[[36,[13]]]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[]],[[]],[[23,32],23],[[23,45],23],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[46,[0,[21,22]]],47],[[]],[[]],[[]],0,[[],46],0,0,0,0,[[47,40],17],[[48,40],17],[[47,41],41],[[48,3],35],0,[[46,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[49,[[17,[49]]]],0,[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],0,0,[[[20,[[17,[40]]]],[36,[41]],11,4,19,[36,[26]]],47],[4,48],[[],46],0,0,[[[42,[47]],43],[[44,[36]]]],[[40,41],[[17,[40]]]],[3,3],0,[[47,35]],[[47,50]],0,0,[[40,11],[[51,[40]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[42,43],[[44,[[36,[13]]]]]],[[],14],[[],14],[[],14],[[]],[[]],[[]],[[46,[36,[26]]],46],[[46,11],46],[[46,19],46],[[46,4],46],[[46,41],46],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[52,6],7],[[52,6],7],[[]],[12,52],[53,52],[[]],[[[55,[54]]],52],[[]],[[],8],[[[28,[56]]],52],[52,[[36,[54]]]],[[],56],[[],13],[[],13],[[],14],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[18]]],[[42,[[55,[57]]]]]],[[[8,[[58,[35]]]]],[[42,[[55,[57]]]]]],[[[8,[24]]],[[42,[[55,[57]]]]]],[[[8,[[58,[35]]]]],[[42,[[55,[57]]]]]],[[[8,[26]]],[[42,[[55,[57]]]]]],[[[8,[26]]],[[42,[[55,[57]]]]]],[[[8,[[58,[59]]]]],[[42,[[55,[57]]]]]],0,[[[8,[60]]],[[42,[[55,[57]]]]]],[[[8,[61]]],[[42,[[55,[57]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[59],[62],[63],[60],[31],[61],[18],[64],[65],[26],[27],[66],[67],[24],[35],[25],[59,59],[62,62],[63,63],[60,60],[31,31],[61,61],[18,18],[64,64],[65,65],[26,26],[27,27],[66,66],[67,67],[24,24],[35,35],[25,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],59],[[],62],[[],63],[[],60],[[],31],[[],61],[[],18],[[],64],[[],65],[[],26],[[],27],[[],66],[[],67],[[],24],[[],35],[[],25],0,[59,11],[62,11],[63,11],[60,11],[31,11],[61,11],[18,11],[64,11],[65,11],[26,11],[27,11],[66,11],[67,11],[24,11],[35,11],[25,11],0,[[59,59],39],[[62,62],39],[[63,63],39],[[60,60],39],[[31,31],39],[[61,61],39],[[18,18],39],[[64,64],39],[[65,65],39],[[26,26],39],[[27,27],39],[[66,66],39],[[67,67],39],[[24,24],39],[[35,35],39],[[25,25],39],0,0,0,0,0,0,[[59,6],7],[[62,6],7],[[63,6],7],[[60,6],7],[[31,6],7],[[61,6],7],[[18,6],7],[[64,6],7],[[65,6],7],[[26,6],7],[[26,6],7],[[27,6],7],[[27,6],7],[[66,6],7],[[66,6],7],[[67,6],7],[[67,6],7],[[24,6],7],[[24,6],7],[[35,6],7],[[35,6],7],[[25,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,35],[1,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[[28,[56]],[28,[19]]],18],[[[28,[19]]],64],[[],27],[[],66],[[[28,[19]]],24],[[],35],[[[28,[19]]],26],[[[51,[56]]],26],0,0,0,0,0,0,0,0,0,[[26,68]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],56],[[],56],[[],56],[[],56],[[],56],[[],56],0,0,[27,[[13,[3,12]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[1,[[13,[65,12]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[27,3],[[13,[27,12]]]],[26,68],0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[35,[28,[19]]],35],[[35,[28,[19]]],35],[[35,[28,[19]]],35],[[27,26],27],[[35,26],35],[[27,66],27],[[66,[28,[56]]],66],[[27,39],27],[[66,24],66],[[27,69],27],[[27,69],27],0,0,0,0,[68,16],[[]],[[]],[[]],[68,68],[[]],[[68,68],70],[[],68],[[68,68],39],[[],39],[[],39],[[],39],[[68,6],7],[[]],[[]],[71,[[36,[68]]]],[[]],[16,[[36,[68]]]],[[68,72]],[[]],[[],8],[71,39],[[68,68],[[36,[70]]]],[[]],[71,[[13,[68,12]]]],[[],13],[[],13],[[],14],[[]],0,[[[30,[[74,[73]]]],75],[[30,[[74,[73]]]]]],[[]],[[]],[[]],[[[30,[76]]],[[30,[76]]]],[[]],[[[78,[77]]],[[13,[[30,[29]],79]]]],[[[30,[[74,[73]]]],[80,[18]]],[[13,[[81,[[58,[64]]]],53]]]],[[[30,[[74,[73]]]],82],[[13,[[81,[[58,[35]]]],53]]]],[[[30,[[74,[73]]]],[80,[24]]],[[13,[[81,[[58,[35]]]],53]]]],[[[30,[[74,[73]]]],82],[[13,[[81,[[58,[25]]]],53]]]],[[[30,[83]],6],7],[[]],[[]],[[]],[[[30,[[74,[73]]]],[80,[26]]],[[13,[[81,[27]],53]]]],[[[30,[[74,[73]]]],[80,[26]]],[[13,[[81,[65]],53]]]],[[[30,[[74,[73]]]],82],[[13,[[81,[[58,[62]]]],53]]]],0,[[]],[[],8],[[[30,[[74,[73]]]],[80,[60]]],[[13,[[81,[[58,[31]]]],53]]]],[[[30,[[74,[73]]]],[80,[61]]],[[13,[[81,[[58,[27]]]],53]]]],[[[30,[[74,[73]]]],11],[[30,[[74,[73]]]]]],[[[30,[[74,[73]]]],11],[[30,[[74,[73]]]]]],[[[74,[73]]],[[30,[[74,[73]]]]]],[[[30,[[74,[73]]]],75],[[30,[[74,[73]]]]]],[[]],[[],13],[[],13],[[],14],[[]],[[[85,[[84,[73]]]],[74,[73]],86],[[30,[[87,[[85,[[84,[73]]]],[74,[73]],86]]]]]],[[[74,[73]],88],[[30,[[74,[73]]]]]],0,0,0,0,0,0,0,0,0,0,[[[90,[89]],75],[[90,[89]]]],0,[[]],[[]],[[]],[[]],[[[90,[89]],[84,[[0,[91,22]]]]]],[84],[[]],[[]],[[[92,[89]]],[[92,[89]]]],[[[90,[89]]],[[90,[89]]]],[[]],[[]],[[[8,[18]]],[[42,[[55,[57]]]]]],[[[8,[[58,[35]]]]],[[42,[[55,[57]]]]]],[[[8,[24]]],[[42,[[55,[57]]]]]],[[[8,[[58,[35]]]]],[[42,[[55,[57]]]]]],[[[92,[83]],6],7],[[[90,[[0,[83,89]]]],6],7],[[]],[[]],[[[93,[89]]],[[90,[89]]]],[[]],[[]],[[]],[[]],[[[8,[26]]],[[42,[[55,[57]]]]]],[[[8,[26]]],[[42,[[55,[57]]]]]],[[[8,[[58,[59]]]]],[[42,[[55,[57]]]]]],0,[[]],[[]],[[],94],[[],8],[[],8],[[[8,[60]]],[[42,[[55,[57]]]]]],[[[8,[61]]],[[42,[[55,[57]]]]]],[[[90,[89]],11],[[90,[89]]]],0,[[[90,[89]],11],[[90,[89]]]],0,[89,[[90,[89]]]],[43,[[44,[13]]]],[[[90,[89]],43],[[44,[13]]]],[[[90,[89]],75],[[90,[89]]]],0,[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[]],[[]],[[89,86],[[87,[[90,[89]],86]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],95],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[95],0,[96,96],[95,95],[[]],[[]],0,0,0,0,0,0,0,[[],95],[95,11],[[96,96],39],[[95,95],39],0,0,0,[[96,6],7],[[95,6],7],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[96,95],[[],8],[[],8],[95,39],0,0,[97,[[13,[95,12]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],13],[95,[[13,[96]]]],[[],13],[[],13],[[],13],[[],14],[[],14],[[],16],[96,16],0,[95,[[13,[[36,[97]],12]]]],0,[[]],[[]],0,0,0,0,0,[[35,41],[[13,[98,12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[99,[76]]],[[99,[76]]]],[[[100,[76]]],[[100,[76]]]],[[]],[[]],[[[99,[29]]],[[13,[12]]]],[[[100,[29]]],[[13,[12]]]],[[[100,[29]]],[[13,[3,12]]]],0,[101,12],[[[99,[29]],[80,[18]]],[[13,[[58,[64]],12]]]],[[[99,[29]],[80,[24]]],[[13,[[58,[35]],12]]]],[[[99,[29]],82],[[13,[[58,[25]],12]]]],[[[99,[29]],56,[36,[19]]],[[13,[27,12]]]],[[[100,[29]]],[[13,[27,12]]]],[[[99,[29]],56,[36,[19]]],[[13,[69,12]]]],[[[100,[29]]],[[13,[69,12]]]],0,0,[[[99,[83]],6],7],[[[100,[83]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[99,[29]]],[[13,[27,12]]]],[[[99,[29]],102],[[13,[27,12]]]],[[[99,[29]],103],[[13,[27,12]]]],[[[99,[29]],104],[[13,[27,12]]]],[[[99,[29]],97],[[13,[27,12]]]],[[[99,[29]],105],[[13,[27,12]]]],[[[99,[29]],106],[[13,[27,12]]]],[[[99,[29]],[51,[107]]],[[13,[27,12]]]],[[[99,[29]]],[[13,[27,12]]]],[[[99,[29]],108],[[13,[27,12]]]],[[[99,[29]],109],[[13,[27,12]]]],0,[[[99,[29]],16,16],[[13,[19,12]]]],0,[[[99,[29]]],[[30,[29]]]],[[[99,[29]]],[[30,[29]]]],[[]],[[]],[[]],[[[99,[29]]],[[30,[29]]]],[[],8],[[],8],[[],8],[29,[[99,[29]]]],[[[99,[29]],[28,[19]],3,3],[[100,[29]]]],0,[[[100,[29]]],[[13,[3,12]]]],0,[[[99,[29]],56,[36,[19]]],[[13,[[100,[29]],12]]]],[[[99,[29]],[28,[56]],[28,[56]]]],[[[100,[29]],40],[[13,[12]]]],[[[99,[29]],8],[[13,[8,12]]]],[[[99,[29]],56]],[53,12],[[]],[[]],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[110,111],[112,113],0,0,0,0,0,[114,95],[109,95],[115,95],[103,95],[108,95],[116,95],[106,95],[104,95],[105,95],[102,95],[117,95],[118,95],[119,95],[120,95],[121,95],[122,95],[123,95],[124,95],[110,95],[112,95],[125,95],[126,95],[127,95],[128,95],[129,95],[130,95],[131,95],[132,95],[133,95],[107,16],[134,16],[135,16],[136,16],[137,16],[138,16],[139,16],[140,16],[141,16],[142,16],[143,16],[144,16],[145,16],[146,16],[147,16],[148,16],[149,16],[150,16],[151,16],[152,16],[153,16],[154,16],[107,155],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[103,16],[108,16],[106,16],[104,16],[105,16],0,0,0,0,0,[114],[109],[115],[103],[108],[116],[106],[104],[105],[102],[117],[156],[118],[119],[120],[121],[122],[123],[124],[110],[112],[125],[126],[127],[128],[129],[130],[131],[132],[133],[114,114],[109,109],[115,115],[103,103],[108,108],[116,116],[106,106],[104,104],[105,105],[102,102],[117,117],[156,156],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[110,110],[112,112],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[107,107],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[107,107],70],[[134,134],70],[[135,135],70],[[136,136],70],[[137,137],70],[[138,138],70],[[139,139],70],[[140,140],70],[[141,141],70],[[142,142],70],[[143,143],70],[[144,144],70],[[145,145],70],[[146,146],70],[[147,147],70],[[148,148],70],[[149,149],70],[[150,150],70],[[151,151],70],[[152,152],70],[[153,153],70],[[154,154],70],[109,71],0,0,[106,16],[104,16],[105,16],0,0,0,[103,16],[108,16],0,0,[[],114],[[],109],[[],115],[[],103],[[],108],[[],116],[[],106],[[],104],[[],105],[[],102],[[],117],[[],156],[[],118],[[],119],[[],120],[[],121],[[],122],[[],123],[[],124],[[],110],[[],112],[[],125],[[],126],[[],127],[[],128],[[],129],[[],130],[[],131],[[],132],[[],133],[[],107],[[],134],[[],135],[[],136],[[],137],[[],138],[[],139],[[],140],[[],141],[[],142],[[],143],[[],144],[[],145],[[],146],[[],147],[[],148],[[],149],[[],150],[[],151],[[],152],[[],153],[[],154],[114,11],[109,11],[115,11],[103,11],[108,11],[116,11],[106,11],[104,11],[105,11],[102,11],[117,11],[156,11],[118,11],[119,11],[120,11],[121,11],[122,11],[123,11],[124,11],[110,11],[112,11],[125,11],[126,11],[127,11],[128,11],[129,11],[130,11],[131,11],[132,11],[133,11],[[114,114],39],[[109,109],39],[[115,115],39],[[103,103],39],[[108,108],39],[[116,116],39],[[106,106],39],[[104,104],39],[[105,105],39],[[102,102],39],[[117,117],39],[[156,156],39],[[118,118],39],[[119,119],39],[[120,120],39],[[121,121],39],[[122,122],39],[[123,123],39],[[124,124],39],[[110,110],39],[[112,112],39],[[125,125],39],[[126,126],39],[[127,127],39],[[128,128],39],[[129,129],39],[[130,130],39],[[131,131],39],[[132,132],39],[[133,133],39],[[107,107],39],[[134,134],39],[[135,135],39],[[136,136],39],[[137,137],39],[[138,138],39],[[139,139],39],[[140,140],39],[[141,141],39],[[142,142],39],[[143,143],39],[[144,144],39],[[145,145],39],[[146,146],39],[[147,147],39],[[148,148],39],[[149,149],39],[[150,150],39],[[151,151],39],[[152,152],39],[[153,153],39],[[154,154],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[102,16],0,[102,16],0,0,[[114,6],7],[[109,6],7],[[115,6],7],[[103,6],7],[[108,6],7],[[116,6],7],[[106,6],7],[[104,6],7],[[105,6],7],[[102,6],7],[[117,6],7],[[156,6],7],[[118,6],7],[[119,6],7],[[120,6],7],[[121,6],7],[[122,6],7],[[123,6],7],[[124,6],7],[[110,6],7],[[112,6],7],[[125,6],7],[[126,6],7],[[127,6],7],[[128,6],7],[[129,6],7],[[130,6],7],[[131,6],7],[[132,6],7],[[133,6],7],[[107,6],7],[[134,6],7],[[135,6],7],[[136,6],7],[[137,6],7],[[138,6],7],[[139,6],7],[[140,6],7],[[141,6],7],[[142,6],7],[[143,6],7],[[144,6],7],[[145,6],7],[[146,6],7],[[147,6],7],[[148,6],7],[[149,6],7],[[150,6],7],[[151,6],7],[[152,6],7],[[153,6],7],[[154,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,[[36,[107]]]],[71,[[36,[134]]]],[71,[[36,[135]]]],[71,[[36,[136]]]],[71,[[36,[137]]]],[71,[[36,[138]]]],[71,[[36,[139]]]],[71,[[36,[140]]]],[71,[[36,[141]]]],[71,[[36,[142]]]],[71,[[36,[143]]]],[71,[[36,[144]]]],[71,[[36,[145]]]],[71,[[36,[146]]]],[71,[[36,[147]]]],[71,[[36,[148]]]],[71,[[36,[149]]]],[71,[[36,[150]]]],[71,[[36,[151]]]],[71,[[36,[152]]]],[71,[[36,[153]]]],[71,[[36,[154]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,[[36,[107]]]],[16,[[36,[134]]]],[16,[[36,[135]]]],[16,[[36,[136]]]],[16,[[36,[137]]]],[16,[[36,[138]]]],[16,[[36,[139]]]],[16,[[36,[140]]]],[16,[[36,[141]]]],[16,[[36,[142]]]],[16,[[36,[143]]]],[16,[[36,[144]]]],[16,[[36,[145]]]],[16,[[36,[146]]]],[16,[[36,[147]]]],[16,[[36,[148]]]],[16,[[36,[149]]]],[16,[[36,[150]]]],[16,[[36,[151]]]],[16,[[36,[152]]]],[16,[[36,[153]]]],[16,[[36,[154]]]],[[107,72]],[[134,72]],[[135,72]],[[136,72]],[[137,72]],[[138,72]],[[139,72]],[[140,72]],[[141,72]],[[142,72]],[[143,72]],[[144,72]],[[145,72]],[[146,72]],[[147,72]],[[148,72]],[[149,72]],[[150,72]],[[151,72]],[[152,72]],[[153,72]],[[154,72]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[114,157],158],[[109,159],160],[115,161],[103,162],[108,163],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],[71,39],0,0,[[107,107],[[36,[70]]]],[[134,134],[[36,[70]]]],[[135,135],[[36,[70]]]],[[136,136],[[36,[70]]]],[[137,137],[[36,[70]]]],[[138,138],[[36,[70]]]],[[139,139],[[36,[70]]]],[[140,140],[[36,[70]]]],[[141,141],[[36,[70]]]],[[142,142],[[36,[70]]]],[[143,143],[[36,[70]]]],[[144,144],[[36,[70]]]],[[145,145],[[36,[70]]]],[[146,146],[[36,[70]]]],[[147,147],[[36,[70]]]],[[148,148],[[36,[70]]]],[[149,149],[[36,[70]]]],[[150,150],[[36,[70]]]],[[151,151],[[36,[70]]]],[[152,152],[[36,[70]]]],[[153,153],[[36,[70]]]],[[154,154],[[36,[70]]]],[102,16],0,[102,16],0,0,0,0,0,0,0,0,0,0,0,0,0,[133,164],0,0,0,[[110,111]],[[112,113]],[[133,164]],0,0,0,0,[108,16],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[117,[[10,[9]]]],[118,[[10,[9]]]],[125,[[10,[9]]]],[126,[[10,[9]]]],[129,[[10,[9]]]],0,0,0,0,0,0,0,0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[164,16],[[]],[[]],[[]],[164,164],[[]],[[164,164],70],[[],164],[[164,164],39],[[],39],[[],39],[[],39],[[164,6],7],[[]],[[]],[71,[[36,[164]]]],[[]],[16,[[36,[164]]]],[[164,72]],[[]],[[],8],[71,39],[[164,164],[[36,[70]]]],[[]],[[],13],[[],13],[[],14],[[]],0,0,0,0,[113,16],[[]],[[]],[[]],[113,113],[[]],[[113,113],70],[[],113],[[113,113],39],[[],39],[[],39],[[],39],[[113,6],7],[[]],[[]],[71,[[36,[113]]]],[[]],[16,[[36,[113]]]],[[113,72]],[[]],[[],8],[71,39],[[113,113],[[36,[70]]]],[[]],[[],13],[[],13],[[],14],[[]],0,0,0,0,[111,16],[[]],[[]],[[]],[111,111],[[]],[[111,111],70],[[],111],[[111,111],39],[[],39],[[],39],[[],39],[[111,6],7],[[]],[[]],[71,[[36,[111]]]],[[]],[16,[[36,[111]]]],[[111,72]],[[]],[[],8],[71,39],[[111,111],[[36,[70]]]],[[]],[[],13],[[],13],[[],14],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[10,[49]]],165],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[161,[28,[56]]]],[[]],[[]],[161,[[17,[40]]]],[[]],0,[[],161],[[]],[115,161],[[]],[[],41],[[]],[[],8],[[],161],[161,41],[[],13],[[],13],[[],14],[[]],0,0,[[162,[166,[16]],[166,[16]]]],[[]],[[]],[162,[[17,[40]]]],[[]],0,0,0,0,[103,162],[[]],[[]],[[],41],[[]],[[],8],[[[36,[[28,[56]]]],[36,[[28,[56]]]]],162],[162,41],[[],13],[[],13],[[],14],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[167,168,[28,[169]]]],[[170,169],17],[[],155],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[158,[[17,[40]]]],[167,[[17,[157]]]],[[]],[[]],[[]],[[]],[[]],[169,169],[167,167],[[]],[[]],[[],167],[[169,169],39],[[167,167],39],[170,171],[[169,6],7],[[167,6],7],[[]],[[]],[[]],[[[172,[71,[51,[71]]]]],169],[[[173,[71,[51,[71]]]]],169],[69,169],[[]],[[[173,[71,[51,[71]]]]],169],[71,169],[39,169],[16,169],[[[10,[16]]],169],[[[51,[56]]],169],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],170],[[],167],0,[[157,50],[[17,[40]]]],[[],174],[157,41],[158,41],[[],3],0,0,[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],0,[[]],[[]],[[]],[[]],[[]],0,0,0,[[163,[166,[16]],[166,[16]],[166,[16]],[166,[16]],3],17],[[]],[[]],[163,[[17,[40]]]],[[]],0,0,0,0,[108,163],[[]],[[]],[39,41],[163,39],[[]],[[],8],[[[36,[[28,[56]]]],[36,[[28,[56]]]],[36,[[28,[56]]]],50,39],163],[163,41],0,0,0,0,0,[[],13],[[],13],[[],14],[[]],0,0,0,0,0,[[175,176]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[175,[[17,[159]]]],[160,[[17,[40]]]],0,[[]],[[]],[[]],[[]],[176,176],[[]],0,0,0,0,0,[[],175],[[],176],0,[[176,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,[[],175],0,0,[[159,[28,[[36,[71]]]]],[[17,[40]]]],[159,41],[175,41],[160,41],0,0,[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[12,53],[101,53],[[122,[8,[18]]],[[42,[[55,[57]]]]]],[[121,[8,[18]]],[[42,[[55,[57]]]]]],[[132,[8,[18]]],[[42,[[55,[57]]]]]],[[120,[8,[18]]],[[42,[[55,[57]]]]]],[[117,[8,[18]]],[[42,[[55,[57]]]]]],[[118,[8,[18]]],[[42,[[55,[57]]]]]],[[112,[8,[18]]],[[42,[[55,[57]]]]]],[[110,[8,[18]]],[[42,[[55,[57]]]]]],[[[8,[18]]],[[42,[[55,[57]]]]]],[[[8,[[58,[35]]]]],[[42,[[55,[57]]]]]],[[115,[8,[24]]],[[42,[[55,[57]]]]]],[[102,[8,[24]]],[[42,[[55,[57]]]]]],[[104,[8,[24]]],[[42,[[55,[57]]]]]],[[[8,[24]],95],[[42,[[55,[57]]]]]],[[105,[8,[24]]],[[42,[[55,[57]]]]]],[[128,[8,[24]]],[[42,[[55,[57]]]]]],[[106,[8,[24]]],[[42,[[55,[57]]]]]],[[103,[8,[24]]],[[42,[[55,[57]]]]]],[[114,[8,[24]]],[[42,[[55,[57]]]]]],[[127,[8,[24]]],[[42,[[55,[57]]]]]],[[116,[8,[24]]],[[42,[[55,[57]]]]]],[[108,[8,[24]]],[[42,[[55,[57]]]]]],[[109,[8,[24]]],[[42,[[55,[57]]]]]],[[[8,[[58,[59]]]]],[[42,[[55,[57]]]]]],[[[8,[[58,[35]]]],95],[[42,[[55,[57]]]]]],[[128,[8,[[58,[35]]]]],[[42,[[55,[57]]]]]],[[130,[8,[[58,[35]]]]],[[42,[[55,[57]]]]]],[[129,[8,[[58,[35]]]]],[[42,[[55,[57]]]]]],[[126,[8,[[58,[35]]]]],[[42,[[55,[57]]]]]],[[115,[8,[26]]],[[42,[[55,[57]]]]]],[[102,[8,[26]]],[[42,[[55,[57]]]]]],[[104,[8,[26]]],[[42,[[55,[57]]]]]],[[105,[8,[26]]],[[42,[[55,[57]]]]]],[[128,[8,[26]]],[[42,[[55,[57]]]]]],[[106,[8,[26]]],[[42,[[55,[57]]]]]],[[103,[8,[26]]],[[42,[[55,[57]]]]]],[[114,[8,[26]]],[[42,[[55,[57]]]]]],[[125,[8,[26]]],[[42,[[55,[57]]]]]],[[126,[8,[26]]],[[42,[[55,[57]]]]]],[[116,[8,[26]]],[[42,[[55,[57]]]]]],[[108,[8,[26]]],[[42,[[55,[57]]]]]],[[109,[8,[26]]],[[42,[[55,[57]]]]]],[[],[[42,[[55,[57]]]]]],[[71,107],[[42,[[55,[57]]]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[58],[[[177,[83]],6],7],[[45,6],7],[[]],[[]],[[]],[[]],[45,[[36,[32]]]],0,[[]],[[]],[[],8],[[],8],[[],8],0,[[42,43],[[44,[[36,[13]]]]]],[[[42,[177]],43],[[44,[36]]]],0,[177],0,0,[[],13],[[],13],[[],13],[[],13],[[42,43],[[44,[[36,[13]]]]]],[[],14],[[],14],[[]],[[]],[[3,[51,[40]]],[[13,[[51,[35]],12]]]],[[40,4]],[[3,4],35],[[35,41,[173,[69,49]]],[[13,[40,12]]]],[[[10,[35]]],[[13,[[51,[40]],12]]]],[[3,4],[[13,[65,12]]]],[[3,4],[[13,[19,12]]]]],"c":[171,3592,3593,3596,3597],"p":[[3,"SchemaAsIpc",0],[3,"IpcMessage",0],[3,"Schema",3598],[3,"IpcWriteOptions",3599],[3,"EncodedData",3599],[3,"Formatter",3600],[6,"Result",3600],[3,"Request",3601],[15,"u8"],[15,"slice"],[15,"usize"],[4,"ArrowError",3602],[4,"Result",3603],[3,"TypeId",3604],[3,"FlightClient",96],[15,"str"],[6,"Result",306],[3,"Action",364],[3,"Bytes",3605],[6,"BoxStream",3606],[8,"Stream",3606],[8,"Send",3607],[3,"FlightRecordBatchStream",129],[3,"Ticket",364],[3,"PutResult",364],[3,"FlightDescriptor",364],[3,"FlightInfo",364],[8,"Into",3608],[3,"Channel",3609],[3,"FlightServiceClient",805],[3,"ActionType",364],[3,"MetadataMap",3610],[3,"DecodedFlightData",129],[3,"FlightDataDecoder",129],[3,"FlightData",364],[4,"Option",3611],[3,"FlightStreamState",129],[4,"DecodedPayload",129],[15,"bool"],[3,"RecordBatch",3612],[6,"SchemaRef",3598],[3,"Pin",3613],[3,"Context",3614],[4,"Poll",3615],[3,"LazyTrailers",3551],[3,"FlightDataEncoderBuilder",229],[3,"FlightDataEncoder",229],[3,"FlightIpcEncoder",229],[6,"ArrayRef",3616],[8,"IntoIterator",3617],[3,"Vec",3618],[4,"FlightError",306],[3,"Status",3619],[8,"Error",3620],[3,"Box",3621],[3,"String",3622],[8,"Future",3623],[3,"Streaming",3624],[3,"HandshakeRequest",364],[3,"Empty",364],[3,"Criteria",364],[3,"HandshakeResponse",364],[3,"BasicAuth",364],[3,"Result",364],[3,"SchemaResult",364],[3,"FlightEndpoint",364],[3,"Location",364],[4,"DescriptorType",772],[15,"i64"],[4,"Ordering",3625],[15,"i32"],[8,"Hasher",3626],[6,"BoxBody",3627],[8,"GrpcService",3628],[4,"CompressionEncoding",3629],[8,"Clone",3630],[3,"Endpoint",3631],[8,"TryInto",3608],[3,"Error",3632],[8,"IntoRequest",3601],[3,"Response",3633],[8,"IntoStreamingRequest",3601],[8,"Debug",3600],[3,"Request",3634],[8,"Service",3635],[8,"Interceptor",3636],[3,"InterceptedService",3636],[3,"Uri",3637],[8,"FlightService",840],[3,"FlightServiceServer",840],[8,"Body",3638],[3,"_Inner",840],[3,"Arc",3639],[3,"IntoMakeService",3640],[3,"Any",908],[4,"Command",908],[8,"ProstMessageExt",908],[4,"ArrowFlightData",1342],[3,"FlightSqlServiceClient",1342],[3,"PreparedStatement",1342],[3,"DecodeError",3641],[3,"CommandGetCrossReference",1434],[3,"CommandGetDbSchemas",1434],[3,"CommandGetExportedKeys",1434],[3,"CommandGetImportedKeys",1434],[3,"CommandGetPrimaryKeys",1434],[4,"SqlInfo",1434],[3,"CommandGetTables",1434],[3,"CommandGetXdbcTypeInfo",1434],[3,"ActionEndTransactionRequest",1434],[4,"EndTransaction",3135],[3,"ActionEndSavepointRequest",1434],[4,"EndSavepoint",3103],[3,"CommandGetSqlInfo",1434],[3,"CommandGetCatalogs",1434],[3,"CommandGetTableTypes",1434],[3,"ActionCreatePreparedStatementRequest",1434],[3,"ActionCreatePreparedSubstraitPlanRequest",1434],[3,"ActionCreatePreparedStatementResult",1434],[3,"ActionClosePreparedStatementRequest",1434],[3,"ActionBeginTransactionRequest",1434],[3,"ActionBeginSavepointRequest",1434],[3,"ActionBeginTransactionResult",1434],[3,"ActionBeginSavepointResult",1434],[3,"CommandStatementQuery",1434],[3,"CommandStatementSubstraitPlan",1434],[3,"TicketStatementQuery",1434],[3,"CommandPreparedStatementQuery",1434],[3,"CommandStatementUpdate",1434],[3,"CommandPreparedStatementUpdate",1434],[3,"DoPutUpdateResult",1434],[3,"ActionCancelQueryRequest",1434],[3,"ActionCancelQueryResult",1434],[4,"SqlSupportedTransaction",1434],[4,"SqlSupportedCaseSensitivity",1434],[4,"SqlNullOrdering",1434],[4,"SupportedSqlGrammar",1434],[4,"SupportedAnsi92SqlGrammarLevel",1434],[4,"SqlOuterJoinsSupportLevel",1434],[4,"SqlSupportedGroupBy",1434],[4,"SqlSupportedElementActions",1434],[4,"SqlSupportedPositionedCommands",1434],[4,"SqlSupportedSubqueries",1434],[4,"SqlSupportedUnions",1434],[4,"SqlTransactionIsolationLevel",1434],[4,"SqlSupportedTransactions",1434],[4,"SqlSupportedResultSetType",1434],[4,"SqlSupportedResultSetConcurrency",1434],[4,"SqlSupportsConvert",1434],[4,"XdbcDataType",1434],[4,"XdbcDatetimeSubcode",1434],[4,"Nullable",1434],[4,"Searchable",1434],[4,"UpdateDeleteRules",1434],[15,"u32"],[3,"SubstraitPlan",1434],[3,"SqlInfoData",3262],[3,"GetSqlInfoBuilder",3262],[3,"XdbcTypeInfoData",3408],[3,"GetXdbcTypeInfoBuilder",3408],[3,"GetCatalogsBuilder",3218],[3,"GetDbSchemasBuilder",3239],[3,"GetTablesBuilder",3378],[4,"CancelResult",3070],[6,"UInt32Array",3642],[8,"AsRef",3608],[3,"SqlInfoDataBuilder",3262],[8,"SqlInfoName",3262],[4,"SqlInfoValue",3262],[3,"SqlInfoUnionBuilder",3262],[3,"UnionArray",3643],[3,"BTreeMap",3644],[3,"HashMap",3645],[4,"DataType",3646],[3,"XdbcTypeInfoDataBuilder",3408],[3,"XdbcTypeInfo",3408],[3,"ExtractTrailersStream",3551],[6,"ArrowResult",0],[8,"FlightSqlService",3495],[6,"SharedTrailers",3551]]},\
"arrow_integration_test":{"doc":"Support for the Apache Arrow JSON test data format","t":"DDDDDDDDFMMLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMMFMMFFALLLLLLLLMMFLLLAFFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLMMMMMMMMMFAMFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLFFFFDLLLLLLFLMFFLLLML","n":["ArrowJson","ArrowJsonBatch","ArrowJsonColumn","ArrowJsonDictionaryBatch","ArrowJsonField","ArrowJsonFieldDictionary","ArrowJsonSchema","DictionaryIndexType","array_from_json","batches","bit_width","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","children","children","clone","clone","clone","clone_into","clone_into","clone_into","columns","count","count","create_null_buf","data","data","data_type_from_json","data_type_to_json","datatype","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dictionaries","dictionary","dictionary_array_from_json","equals_field","equals_reader","equals_schema","field","field_from_json","field_to_json","field_type","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_batch","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get_record_batches","id","id","index_type","into","into","into","into","into","into","into","into","is_ordered","is_signed","metadata","metadata","name","name","name","nullable","offset","record_batch_from_json","schema","schema","schema_from_json","schema_to_json","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_arrow_field","to_arrow_schema","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validity","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","data_type_from_json","data_type_to_json","field_from_json","field_to_json","MetadataKeyValue","borrow","borrow_mut","cast","deserialize","from","from_cast","from_metadata","into","key","schema_from_json","schema_to_json","try_from","try_into","type_id","value","vzip"],"q":[[0,"arrow_integration_test"],[171,"arrow_integration_test::datatype"],[173,"arrow_integration_test::field"],[175,"arrow_integration_test::schema"],[192,"arrow_schema::field"],[193,"std::collections::hash::map"],[194,"core::option"],[195,"arrow_array::array"],[196,"arrow::error"],[197,"arrow_buffer::buffer::immutable"],[198,"serde_json::value"],[199,"arrow_schema::datatype"],[200,"serde::de"],[201,"core::result"],[202,"arrow_array::record_batch"],[203,"arrow_schema::schema"],[204,"core::fmt"],[205,"core::fmt"],[206,"serde::ser"],[207,"core::any"],[208,"alloc::string"]],"d":["A struct that represents an Arrow file with a schema and …","A struct that partially reads the Arrow JSON record batch","A struct that partially reads the Arrow JSON column/array","A struct that partially reads the Arrow JSON dictionary …","Fields are left as JSON <code>Value</code> as they vary by <code>DataType</code>","","A struct that partially reads the Arrow JSON schema.","","Construct an Arrow array from a partially typed JSON column","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A helper to create a null buffer from a <code>Vec&lt;bool&gt;</code>","","","Parse a data type from a JSON representation.","Generate a JSON representation of the data type.","","","","","","","","","","","","","Compare the Arrow JSON field with the Arrow <code>Field</code>","Compare the Arrow JSON with a record batch reader","Compare the Arrow JSON schema with the Arrow <code>Schema</code>","","Parse a <code>Field</code> definition from a JSON representation.","Generate a JSON representation of the <code>Field</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Parse a <code>Schema</code> definition from a JSON representation.","Generate a JSON representation of the <code>Schema</code>.","","","","","","","","","Convert to an Arrow Field TODO: convert to use an Into","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a data type from a JSON representation.","Generate a JSON representation of the data type.","Parse a <code>Field</code> definition from a JSON representation.","Generate a JSON representation of the <code>Field</code>.","","","","","","Returns the argument unchanged.","","Parse a <code>metadata</code> definition from a JSON representation. …","Calls <code>U::from(self)</code>.","","Parse a <code>Schema</code> definition from a JSON representation.","Generate a JSON representation of the <code>Schema</code>.","","","","",""],"i":[0,0,0,0,0,0,0,0,0,14,19,14,16,17,18,19,9,4,2,14,16,17,18,19,9,4,2,14,16,17,18,19,9,4,2,17,2,9,4,2,9,4,2,9,9,2,0,4,2,0,0,0,14,16,17,18,19,9,4,2,14,17,0,17,14,16,0,0,0,17,16,14,16,17,18,19,9,4,2,14,16,17,17,17,18,19,9,4,2,9,14,16,17,18,19,9,4,2,14,18,4,18,14,16,17,18,19,9,4,2,18,19,16,17,17,19,2,17,2,0,0,14,0,0,14,16,17,18,19,9,4,2,17,16,9,4,2,14,16,17,18,19,9,4,2,14,16,17,18,19,9,4,2,14,16,17,18,19,9,4,2,2,2,14,16,17,18,19,9,4,2,0,0,0,0,0,30,30,30,30,30,30,0,30,30,0,0,30,30,30,30,30],"f":[0,0,0,0,0,0,0,0,[[1,2,[6,[[5,[3,4]]]]],[[8,[7]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[9,9],[4,4],[2,2],[[]],[[]],[[]],0,0,0,[2,10],0,0,[11,[[8,[12]]]],[12,11],0,[13,[[15,[14]]]],[13,[[15,[16]]]],[13,[[15,[17]]]],[13,[[15,[18]]]],[13,[[15,[19]]]],[13,[[15,[9]]]],[13,[[15,[4]]]],[13,[[15,[2]]]],0,0,[[1,2,12,12,4,[6,[[5,[3,4]]]]],[[8,[7]]]],[[17,1],20],[[14,21],[[8,[20]]]],[[16,22],20],0,[11,[[8,[1]]]],[1,11],0,0,[[14,23],24],[[16,23],24],[[17,23],24],[[18,23],24],[[19,23],24],[[9,23],24],[[4,23],24],[[2,23],24],[[]],[[]],[25,17],[1,17],[[]],[[]],[[]],[[]],[[]],[[]],[26,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,[[8,[[27,[26]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[22,9,[6,[[5,[3,4]]]]],[[8,[26]]]],0,0,[11,[[8,[22]]]],[22,11],[[14,28],15],[[16,28],15],[[17,28],15],[[18,28],15],[[19,28],15],[[9,28],15],[[4,28],15],[[2,28],15],[17,[[8,[1]]]],[16,[[8,[22]]]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,[[8,[12]]]],[12,11],[11,[[8,[1]]]],[1,11],0,[[]],[[]],[[]],[13,[[15,[30]]]],[[]],[[]],[11,[[8,[[5,[31,31]]]]]],[[]],0,[11,[[8,[22]]]],[22,11],[[],15],[[],15],[[],29],0,[[]]],"c":[],"p":[[3,"Field",192],[3,"ArrowJsonColumn",0],[15,"i64"],[3,"ArrowJsonDictionaryBatch",0],[3,"HashMap",193],[4,"Option",194],[6,"ArrayRef",195],[6,"Result",196],[3,"ArrowJsonBatch",0],[3,"Buffer",197],[4,"Value",198],[4,"DataType",199],[8,"Deserializer",200],[3,"ArrowJson",0],[4,"Result",201],[3,"ArrowJsonSchema",0],[3,"ArrowJsonField",0],[3,"ArrowJsonFieldDictionary",0],[3,"DictionaryIndexType",0],[15,"bool"],[8,"RecordBatchReader",202],[3,"Schema",203],[3,"Formatter",204],[6,"Result",204],[6,"FieldRef",192],[3,"RecordBatch",202],[3,"Vec",205],[8,"Serializer",206],[3,"TypeId",207],[3,"MetadataKeyValue",175],[3,"String",208]]},\
"arrow_integration_testing":{"doc":"Common code used in the integration test binaries","t":"RRDMMLLLAALLLLFFMLLLLAAAGNGNGFMFGNGNGFMFFFFFFNGNGFFNGNGAFAFADNGDNGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMFLLLLLLLMLLNGDDNGGLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLFFFMFMLLLLLLLLMLLNGDNGGLLLLLLLLLLLLLLLLLLLLFLLLLL","n":["AUTH_PASSWORD","AUTH_USERNAME","ArrowFile","_dictionaries","batches","borrow","borrow_mut","cast","flight_client_scenarios","flight_server_scenarios","from","from_cast","into","into_request","read_gzip_json","read_json_file","schema","try_from","try_into","type_id","vzip","auth_basic_proto","integration_test","middleware","Client","Err","Error","Ok","Result","authenticate","inner","run_scenario","Client","Err","Error","Ok","Result","consume_flight_location","inner","receive_batch_flight_data","receive_schema_flight_data","run_scenario","send_batch","upload_data","verify_data","Err","Error","Ok","Result","middleware_interceptor","run_scenario","Err","Error","Ok","Result","auth_basic_proto","endpoint","integration_test","listen_on","middleware","AuthBasicProtoScenarioImpl","Err","Error","GrpcServerCallContext","Ok","Result","TonicStream","borrow","borrow","borrow_mut","borrow_mut","cast","cast","check_auth","clone","clone_into","do_action","do_exchange","do_get","do_put","from","from","from_cast","from_cast","from_ref","get_flight_info","get_schema","handshake","into","into","into_request","into_request","is_valid","list_actions","list_flights","password","peer_identity","peer_identity","peer_identity","scenario_setup","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","username","vzip","vzip","Err","Error","FlightServiceImpl","IntegrationDataset","Ok","Result","TonicStream","borrow","borrow","borrow_mut","borrow_mut","cast","cast","chunks","clone","clone","clone_into","clone_into","default","dictionary_from_message","do_action","do_exchange","do_get","do_put","endpoint_from_path","fmt","from","from","from_cast","from_cast","from_ref","from_ref","get_flight_info","get_schema","handshake","into","into","into_request","into_request","list_actions","list_flights","record_batch_from_message","save_uploaded_chunks","scenario_setup","schema","send_app_metadata","server_location","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","uploaded_chunks","vzip","vzip","Err","Error","MiddlewareScenarioImpl","Ok","Result","TonicStream","borrow","borrow_mut","cast","clone","clone_into","default","do_action","do_exchange","do_get","do_put","from","from_cast","from_ref","get_flight_info","get_schema","handshake","into","into_request","list_actions","list_flights","scenario_setup","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"arrow_integration_testing"],[21,"arrow_integration_testing::flight_client_scenarios"],[24,"arrow_integration_testing::flight_client_scenarios::auth_basic_proto"],[32,"arrow_integration_testing::flight_client_scenarios::integration_test"],[45,"arrow_integration_testing::flight_client_scenarios::middleware"],[51,"arrow_integration_testing::flight_server_scenarios"],[60,"arrow_integration_testing::flight_server_scenarios::auth_basic_proto"],[110,"arrow_integration_testing::flight_server_scenarios::integration_test"],[168,"arrow_integration_testing::flight_server_scenarios::middleware"],[200,"tonic::request"],[201,"arrow_integration_test"],[202,"arrow::error"],[203,"core::result"],[204,"core::any"],[205,"tonic::transport::channel"],[206,"arrow_flight::gen::flight_service_client"],[207,"alloc::string"],[208,"core::error"],[209,"alloc::boxed"],[210,"arrow_flight::gen"],[211,"arrow_flight::gen"],[212,"arrow_flight::gen"],[213,"arrow_schema::schema"],[214,"arrow_array::array"],[215,"std::collections::hash::map"],[216,"core::option"],[217,"arrow_schema::schema"],[218,"arrow_ipc::writer"],[219,"arrow_flight::gen"],[220,"tonic::status"],[221,"core::convert"],[222,"arrow_flight::gen"],[223,"tonic::metadata::map"],[224,"arrow_flight::gen"],[225,"core::pin"],[226,"arrow_flight::gen"],[227,"arrow_buffer::buffer::immutable"],[228,"core::fmt"],[229,"core::fmt"],[230,"alloc::sync"],[231,"arrow_flight::gen"]],"d":["The expected password for the basic auth integration test.","The expected username for the basic auth integration test.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Read gzipped JSON test file","","","","","","","","","","","Contains the error value","","Contains the success value","","","","","","Contains the error value","","Contains the success value","","","","","","","","","","Contains the error value","","Contains the success value","","","","Contains the error value","","Contains the success value","","","","","","","","Contains the error value","","","Contains the success value","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Contains the error value","","","Contains the success value","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,4,4,4,4,4,0,0,4,4,4,4,0,0,4,4,4,4,4,0,0,0,0,54,0,54,0,0,55,0,0,56,0,56,0,0,57,0,0,0,0,0,0,58,0,58,0,0,0,59,0,59,0,0,0,0,0,0,0,60,0,0,60,0,0,37,35,37,35,37,35,35,35,35,35,35,35,35,37,35,37,35,35,35,35,35,37,35,37,35,35,35,35,35,37,37,35,0,35,37,35,37,35,37,35,35,37,35,61,0,0,0,61,0,0,44,45,44,45,44,45,44,44,45,44,45,45,0,45,45,45,45,45,44,44,45,44,45,44,45,45,45,45,44,45,44,45,45,45,0,0,0,44,0,45,44,45,44,45,44,45,44,45,45,44,45,62,0,0,62,0,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,53,53,53,53,53],"f":[0,0,0,0,0,[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[],1],[[2,2],3],[2,[[5,[4]]]],0,[[],6],[[],6],[[],7],[[]],0,0,0,0,0,0,0,0,[[[9,[8]],2,2],[[6,[10,[12,[11]]]]]],0,[[2,13],[[6,[[12,[11]]]]]],0,0,0,0,0,[[14,15,[17,[16]]],[[6,[[12,[11]]]]]],0,[[[19,[18]],20,[23,[21,22]]],[[24,[18]]]],[[[19,[18]]],[[24,[25]]]],[[2,13,2],[[6,[[12,[11]]]]]],[[[26,[18]],[17,[27]],16,28],[[6,[[12,[11]]]]]],[[[9,[8]],20,29,[30,[16]]],[[6,[[12,[11]]]]]],[[[9,[8]],29,[17,[16]]],[[6,[[12,[11]]]]]],0,0,0,0,[1,[[6,[1,31]]]],[[2,13],[[6,[[12,[11]]]]]],0,0,0,0,0,[[2,[32,[10]]],33],0,[13,[[6,[34,[12,[11]]]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[35,36],[[6,[37,31]]]],[35,35],[[]],[[35,[1,[38]]],[[40,[[12,[39]]]]]],[[35,[1,[[19,[18]]]]],[[40,[[12,[39]]]]]],[[35,[1,[15]]],[[40,[[12,[39]]]]]],[[35,[1,[[19,[18]]]]],[[40,[[12,[39]]]]]],[[]],[[]],[[]],[[]],[[]],[[35,[1,[29]]],[[40,[[12,[39]]]]]],[[35,[1,[29]]],[[40,[[12,[39]]]]]],[[35,[1,[[19,[41]]]]],[[40,[[12,[39]]]]]],[[]],[[]],[[],1],[[],1],[[35,[24,[10]]],[[6,[37,31]]]],[[35,[1,[42]]],[[40,[[12,[39]]]]]],[[35,[1,[43]]],[[40,[[12,[39]]]]]],0,[37,2],0,0,[13,[[6,[[12,[11]]]]]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[44,44],[45,45],[[]],[[]],[[],45],[[46,47,20,[23,[21,22]]],[[6,[31]]]],[[45,[1,[38]]],[[40,[[12,[39]]]]]],[[45,[1,[[19,[18]]]]],[[40,[[12,[39]]]]]],[[45,[1,[15]]],[[40,[[12,[39]]]]]],[[45,[1,[[19,[18]]]]],[[40,[[12,[39]]]]]],[[45,2],33],[[44,48],49],[[]],[[]],[[]],[[]],[[]],[[]],[[45,[1,[29]]],[[40,[[12,[39]]]]]],[[45,[1,[29]]],[[40,[[12,[39]]]]]],[[45,[1,[[19,[41]]]]],[[40,[[12,[39]]]]]],[[]],[[]],[[],1],[[],1],[[45,[1,[42]]],[[40,[[12,[39]]]]]],[[45,[1,[43]]],[[40,[[12,[39]]]]]],[[46,47,20,[23,[21,22]]],[[6,[16,31]]]],[[[51,[[50,[[23,[10,44]]]]]],[51,[25]],[19,[18]],[26,[[6,[52,31]]]],25,10],[[6,[31]]]],[13,[[6,[[12,[11]]]]]],0,[[[26,[[6,[52,31]]]],[17,[27]]],[[6,[31]]]],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],0,[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[53,53],[[]],[[],53],[[53,[1,[38]]],[[40,[[12,[39]]]]]],[[53,[1,[[19,[18]]]]],[[40,[[12,[39]]]]]],[[53,[1,[15]]],[[40,[[12,[39]]]]]],[[53,[1,[[19,[18]]]]],[[40,[[12,[39]]]]]],[[]],[[]],[[]],[[53,[1,[29]]],[[40,[[12,[39]]]]]],[[53,[1,[29]]],[[40,[[12,[39]]]]]],[[53,[1,[[19,[41]]]]],[[40,[[12,[39]]]]]],[[]],[[],1],[[53,[1,[42]]],[[40,[[12,[39]]]]]],[[53,[1,[43]]],[[40,[[12,[39]]]]]],[13,[[6,[[12,[11]]]]]],[[]],[[],6],[[],6],[[],7],[[]]],"c":[],"p":[[3,"Request",200],[15,"str"],[3,"ArrowJson",201],[3,"ArrowFile",0],[6,"Result",202],[4,"Result",203],[3,"TypeId",204],[3,"Channel",205],[3,"FlightServiceClient",206],[3,"String",207],[8,"Error",208],[3,"Box",209],[15,"u16"],[3,"Location",210],[3,"Ticket",210],[3,"RecordBatch",211],[15,"slice"],[3,"FlightData",210],[3,"Streaming",212],[6,"SchemaRef",213],[15,"i64"],[6,"ArrayRef",214],[3,"HashMap",215],[4,"Option",216],[3,"Schema",213],[3,"Sender",217],[15,"u8"],[3,"IpcWriteOptions",218],[3,"FlightDescriptor",210],[3,"Vec",219],[3,"Status",220],[8,"Into",221],[3,"FlightEndpoint",210],[4,"SocketAddr",222],[3,"AuthBasicProtoScenarioImpl",60],[3,"MetadataMap",223],[3,"GrpcServerCallContext",60],[3,"Action",210],[8,"Future",224],[3,"Pin",225],[3,"HandshakeRequest",210],[3,"Empty",210],[3,"Criteria",210],[3,"IntegrationDataset",110],[3,"FlightServiceImpl",110],[3,"Message",226],[3,"Buffer",227],[3,"Formatter",228],[6,"Result",228],[3,"Mutex",229],[3,"Arc",230],[3,"PutResult",210],[3,"MiddlewareScenarioImpl",168],[6,"Result",24],[6,"Client",24],[6,"Result",32],[6,"Client",32],[6,"Result",45],[6,"Result",51],[6,"Result",60],[6,"Result",110],[6,"Result",168]]},\
"arrow_ipc":{"doc":"Support for the Arrow IPC Format","t":"RRAAAAAERRNNLLLLLLFLFLFLFLLLLLLLFLLLLLDLLFLMFLLFFFLFFFLLFFMLMAAAAADDDDESSSSSMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLMLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFFLLLMLLLFFFMLLLLLLLLLLLLLLLLLLMSDDDDEDDSDDESSSRRRSSSRRRSSSRRRDSDDDDDESDSDDESSSSSSSSSSSSSSSSSSMMMMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLMLLLLLLMLLLLLLLLFFFLLLLLLLLLLFFFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMSDSDDEDSDDEDSSSSSDSDDEDDSDDESSDDDEDDSDDESSSSSSSSSSRRRRRRRRRRSSSSSSSSSSRRRRRRRRRRSSSSSSSSSSRRRRRRRRRRDDDDDEDSDDEDSDDEDSDDESDSDDEDSDDEDDDDEDSDDEDSDDEDSDDEDSDDESSSSSDSDDEDSSDSDDEDDSDDESSDDDESDSDDEDSDDEDDSDDEDDSDSDDDEDSDDESSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLMLMLLMLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMMLLLLLLLLLLLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFFFMMMMMMMMMMMMMMMMMMMMMMMMMMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMMMMLMLLLLLLLLLLSSSRRSSRRSSRRSSDDSDDEDDDDDSDDEDSDDEDESSSSSSSSSSSSSSSSSSSSSMMMMLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLLMMMMLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLMLLLMMMLMLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLFFFLLLLLLLMFFFLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLDDDDDDEESSSSSSSMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFFFLLLMLMFFFMMLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDDDMLLLLLLMLLLMFFFFMLMMMMMMLLLLLLLLLLLLLLLLLLLLMLLLLMLMMFFFMMLLLLMMLLLMLLLLLLLLLLLLMDDDDDDLMMMMLLLLLLLLLLLLFLLLLLLLLLLMMMLLLMMMLLMLLMMLLLLLLLLLLLLLLFFLLLLFLLLLLLLLLFMMLFLMMLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLFFFFMFLMMMMM","n":["ARROW_MAGIC","CONTINUATION_MARKER","compression","convert","gen","reader","writer","CompressionCodec","LENGTH_NO_COMPRESSED_DATA","LENGTH_OF_PREFIX_DATA","Lz4Frame","Zstd","borrow","borrow_mut","cast","clone","clone_into","compress","compress_lz4","compress_to_vec","compress_zstd","decompress","decompress_lz4","decompress_to_buffer","decompress_zstd","eq","equivalent","equivalent","fmt","from","from_cast","into","read_uncompressed_size","to_owned","try_from","try_from","try_into","type_id","FBFieldType","borrow","borrow_mut","build_field","cast","children","fb_to_schema","from","from_cast","get_data_type","get_fb_dictionary","get_fb_field_type","into","metadata_to_fb","schema_to_fb","schema_to_fb_offset","try_from","try_into","try_schema_from_flatbuffer_bytes","try_schema_from_ipc_buffer","type_","type_id","type_type","File","Message","Schema","SparseTensor","Tensor","Block","Footer","FooterArgs","FooterBuilder","FooterOffset","VT_CUSTOM_METADATA","VT_DICTIONARIES","VT_RECORDBATCHES","VT_SCHEMA","VT_VERSION","_tab","add_custom_metadata","add_dictionaries","add_recordBatches","add_schema","add_version","bodyLength","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","clone","clone","clone_into","clone_into","create","custom_metadata","custom_metadata","default","default","dictionaries","dictionaries","eq","eq","fbb_","finish","finish_footer_buffer","finish_size_prefixed_footer_buffer","fmt","fmt","follow","follow","follow","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","init_from_table","into","into","into","into","into","metaDataLength","new","new","offset","push","recordBatches","recordBatches","root_as_footer","root_as_footer_unchecked","root_as_footer_with_opts","run_verifier","run_verifier","schema","schema","set_bodyLength","set_metaDataLength","set_offset","size_prefixed_root_as_footer","size_prefixed_root_as_footer_unchecked","size_prefixed_root_as_footer_with_opts","start_","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","version","BUFFER","BodyCompression","BodyCompressionArgs","BodyCompressionBuilder","BodyCompressionMethod","BodyCompressionOffset","CompressionType","DictionaryBatch","DictionaryBatch","DictionaryBatchArgs","DictionaryBatchBuilder","DictionaryBatchOffset","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX_BODY_COMPRESSION_METHOD","ENUM_MAX_COMPRESSION_TYPE","ENUM_MAX_MESSAGE_HEADER","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN_BODY_COMPRESSION_METHOD","ENUM_MIN_COMPRESSION_TYPE","ENUM_MIN_MESSAGE_HEADER","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES_BODY_COMPRESSION_METHOD","ENUM_VALUES_COMPRESSION_TYPE","ENUM_VALUES_MESSAGE_HEADER","FieldNode","LZ4_FRAME","Message","MessageArgs","MessageBuilder","MessageHeader","MessageHeaderUnionTableOffset","MessageOffset","NONE","RecordBatch","RecordBatch","RecordBatchArgs","RecordBatchBuilder","RecordBatchOffset","Schema","SparseTensor","Tensor","VT_BODYLENGTH","VT_BUFFERS","VT_CODEC","VT_COMPRESSION","VT_CUSTOM_METADATA","VT_DATA","VT_HEADER","VT_HEADER_TYPE","VT_ID","VT_ISDELTA","VT_LENGTH","VT_METHOD","VT_NODES","VT_VERSION","ZSTD","_tab","_tab","_tab","_tab","add_bodyLength","add_buffers","add_codec","add_compression","add_custom_metadata","add_data","add_header","add_header_type","add_id","add_isDelta","add_length","add_method","add_nodes","add_version","bodyLength","bodyLength","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffers","buffers","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","codec","codec","compression","compression","create","create","create","create","custom_metadata","custom_metadata","data","data","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fbb_","fbb_","fbb_","fbb_","finish","finish","finish","finish","finish_message_buffer","finish_size_prefixed_message_buffer","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","follow","follow","follow","follow","follow","follow","follow","follow","follow","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_little_endian","from_little_endian","from_little_endian","hash","hash","hash","header","header","header_as_dictionary_batch","header_as_record_batch","header_as_schema","header_as_sparse_tensor","header_as_tensor","header_type","header_type","id","id","init_from_table","init_from_table","init_from_table","init_from_table","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","isDelta","isDelta","length","length","length","method","method","new","new","new","new","new","nodes","nodes","null_count","partial_cmp","partial_cmp","partial_cmp","push","push","push","push","root_as_message","root_as_message_unchecked","root_as_message_with_opts","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","set_length","set_null_count","size_prefixed_root_as_message","size_prefixed_root_as_message_unchecked","size_prefixed_root_as_message_with_opts","start_","start_","start_","start_","to_little_endian","to_little_endian","to_little_endian","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_name","variant_name","variant_name","version","version","Big","Binary","Binary","BinaryArgs","BinaryBuilder","BinaryOffset","Bool","Bool","BoolArgs","BoolBuilder","BoolOffset","Buffer","COMPRESSED_BODY","DAY","DAY_TIME","DICTIONARY_REPLACEMENT","DOUBLE","Date","Date","DateArgs","DateBuilder","DateOffset","DateUnit","Decimal","Decimal","DecimalArgs","DecimalBuilder","DecimalOffset","Dense","DenseArray","DictionaryEncoding","DictionaryEncodingArgs","DictionaryEncodingBuilder","DictionaryEncodingOffset","DictionaryKind","Duration","Duration","DurationArgs","DurationBuilder","DurationOffset","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX","ENUM_MAX_DATE_UNIT","ENUM_MAX_DICTIONARY_KIND","ENUM_MAX_ENDIANNESS","ENUM_MAX_FEATURE","ENUM_MAX_INTERVAL_UNIT","ENUM_MAX_METADATA_VERSION","ENUM_MAX_PRECISION","ENUM_MAX_TIME_UNIT","ENUM_MAX_TYPE","ENUM_MAX_UNION_MODE","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN","ENUM_MIN_DATE_UNIT","ENUM_MIN_DICTIONARY_KIND","ENUM_MIN_ENDIANNESS","ENUM_MIN_FEATURE","ENUM_MIN_INTERVAL_UNIT","ENUM_MIN_METADATA_VERSION","ENUM_MIN_PRECISION","ENUM_MIN_TIME_UNIT","ENUM_MIN_TYPE","ENUM_MIN_UNION_MODE","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES_DATE_UNIT","ENUM_VALUES_DICTIONARY_KIND","ENUM_VALUES_ENDIANNESS","ENUM_VALUES_FEATURE","ENUM_VALUES_INTERVAL_UNIT","ENUM_VALUES_METADATA_VERSION","ENUM_VALUES_PRECISION","ENUM_VALUES_TIME_UNIT","ENUM_VALUES_TYPE","ENUM_VALUES_UNION_MODE","Endianness","Feature","Field","FieldArgs","FieldBuilder","FieldOffset","FixedSizeBinary","FixedSizeBinary","FixedSizeBinaryArgs","FixedSizeBinaryBuilder","FixedSizeBinaryOffset","FixedSizeList","FixedSizeList","FixedSizeListArgs","FixedSizeListBuilder","FixedSizeListOffset","FloatingPoint","FloatingPoint","FloatingPointArgs","FloatingPointBuilder","FloatingPointOffset","HALF","Int","Int","IntArgs","IntBuilder","IntOffset","Interval","Interval","IntervalArgs","IntervalBuilder","IntervalOffset","IntervalUnit","KeyValue","KeyValueArgs","KeyValueBuilder","KeyValueOffset","LargeBinary","LargeBinary","LargeBinaryArgs","LargeBinaryBuilder","LargeBinaryOffset","LargeList","LargeList","LargeListArgs","LargeListBuilder","LargeListOffset","LargeUtf8","LargeUtf8","LargeUtf8Args","LargeUtf8Builder","LargeUtf8Offset","List","List","ListArgs","ListBuilder","ListOffset","Little","MICROSECOND","MILLISECOND","MILLISECOND","MONTH_DAY_NANO","Map","Map","MapArgs","MapBuilder","MapOffset","MetadataVersion","NANOSECOND","NONE","Null","Null","NullArgs","NullBuilder","NullOffset","Precision","RunEndEncoded","RunEndEncoded","RunEndEncodedArgs","RunEndEncodedBuilder","RunEndEncodedOffset","SECOND","SINGLE","Schema","SchemaArgs","SchemaBuilder","SchemaOffset","Sparse","Struct_","Struct_","Struct_Args","Struct_Builder","Struct_Offset","Time","Time","TimeArgs","TimeBuilder","TimeOffset","TimeUnit","Timestamp","Timestamp","TimestampArgs","TimestampBuilder","TimestampOffset","Type","TypeUnionTableOffset","UNUSED","Union","Union","UnionArgs","UnionBuilder","UnionMode","UnionOffset","Utf8","Utf8","Utf8Args","Utf8Builder","Utf8Offset","V1","V2","V3","V4","V5","VT_BITWIDTH","VT_BITWIDTH","VT_BITWIDTH","VT_BYTEWIDTH","VT_CHILDREN","VT_CUSTOM_METADATA","VT_CUSTOM_METADATA","VT_DICTIONARY","VT_DICTIONARYKIND","VT_ENDIANNESS","VT_FEATURES","VT_FIELDS","VT_ID","VT_INDEXTYPE","VT_ISORDERED","VT_IS_SIGNED","VT_KEY","VT_KEYSSORTED","VT_LISTSIZE","VT_MODE","VT_NAME","VT_NULLABLE","VT_PRECISION","VT_PRECISION","VT_SCALE","VT_TIMEZONE","VT_TYPEIDS","VT_TYPE_","VT_TYPE_TYPE","VT_UNIT","VT_UNIT","VT_UNIT","VT_UNIT","VT_UNIT","VT_VALUE","YEAR_MONTH","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","_tab","add_bitWidth","add_bitWidth","add_bitWidth","add_byteWidth","add_children","add_custom_metadata","add_custom_metadata","add_dictionary","add_dictionaryKind","add_endianness","add_features","add_fields","add_id","add_indexType","add_isOrdered","add_is_signed","add_key","add_keysSorted","add_listSize","add_mode","add_name","add_nullable","add_precision","add_precision","add_scale","add_timezone","add_typeIds","add_type_","add_type_type","add_unit","add_unit","add_unit","add_unit","add_unit","add_value","bitWidth","bitWidth","bitWidth","bitWidth","bitWidth","bitWidth","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byteWidth","byteWidth","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","children","children","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","create","custom_metadata","custom_metadata","custom_metadata","custom_metadata","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dictionary","dictionary","dictionaryKind","dictionaryKind","endianness","endianness","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","fbb_","features","features","fields","fields","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish","finish_schema_buffer","finish_size_prefixed_schema_buffer","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","follow","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","from_little_endian","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","id","id","indexType","indexType","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","init_from_table","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","isOrdered","isOrdered","is_signed","is_signed","key","key","keysSorted","keysSorted","length","listSize","listSize","mode","mode","name","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","nullable","nullable","offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","precision","precision","precision","precision","push","push","push","push","push","push","push","push","push","push","push","root_as_schema","root_as_schema_unchecked","root_as_schema_with_opts","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","scale","scale","set_length","set_offset","size_prefixed_root_as_schema","size_prefixed_root_as_schema_unchecked","size_prefixed_root_as_schema_with_opts","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","start_","timezone","timezone","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_little_endian","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","typeIds","typeIds","type_","type_","type_as_binary","type_as_bool","type_as_date","type_as_decimal","type_as_duration","type_as_fixed_size_binary","type_as_fixed_size_list","type_as_floating_point","type_as_int","type_as_interval","type_as_large_binary","type_as_large_list","type_as_large_utf_8","type_as_list","type_as_map","type_as_null","type_as_run_end_encoded","type_as_struct_","type_as_time","type_as_timestamp","type_as_union","type_as_utf_8","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_type","type_type","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","value","value","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","variant_name","Column","ENUM_MAX","ENUM_MAX","ENUM_MAX_SPARSE_MATRIX_COMPRESSED_AXIS","ENUM_MAX_SPARSE_TENSOR_INDEX","ENUM_MIN","ENUM_MIN","ENUM_MIN_SPARSE_MATRIX_COMPRESSED_AXIS","ENUM_MIN_SPARSE_TENSOR_INDEX","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES_SPARSE_MATRIX_COMPRESSED_AXIS","ENUM_VALUES_SPARSE_TENSOR_INDEX","NONE","Row","SparseMatrixCompressedAxis","SparseMatrixIndexCSX","SparseMatrixIndexCSX","SparseMatrixIndexCSXArgs","SparseMatrixIndexCSXBuilder","SparseMatrixIndexCSXOffset","SparseTensor","SparseTensorArgs","SparseTensorBuilder","SparseTensorIndex","SparseTensorIndexCOO","SparseTensorIndexCOO","SparseTensorIndexCOOArgs","SparseTensorIndexCOOBuilder","SparseTensorIndexCOOOffset","SparseTensorIndexCSF","SparseTensorIndexCSF","SparseTensorIndexCSFArgs","SparseTensorIndexCSFBuilder","SparseTensorIndexCSFOffset","SparseTensorIndexUnionTableOffset","SparseTensorOffset","VT_AXISORDER","VT_COMPRESSEDAXIS","VT_DATA","VT_INDICESBUFFER","VT_INDICESBUFFER","VT_INDICESBUFFERS","VT_INDICESSTRIDES","VT_INDICESTYPE","VT_INDICESTYPE","VT_INDICESTYPE","VT_INDPTRBUFFER","VT_INDPTRBUFFERS","VT_INDPTRTYPE","VT_INDPTRTYPE","VT_ISCANONICAL","VT_NON_ZERO_LENGTH","VT_SHAPE","VT_SPARSEINDEX","VT_SPARSEINDEX_TYPE","VT_TYPE_","VT_TYPE_TYPE","_tab","_tab","_tab","_tab","add_axisOrder","add_compressedAxis","add_data","add_indicesBuffer","add_indicesBuffer","add_indicesBuffers","add_indicesStrides","add_indicesType","add_indicesType","add_indicesType","add_indptrBuffer","add_indptrBuffers","add_indptrType","add_indptrType","add_isCanonical","add_non_zero_length","add_shape","add_sparseIndex","add_sparseIndex_type","add_type_","add_type_type","axisOrder","axisOrder","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compressedAxis","compressedAxis","create","create","create","create","data","data","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fbb_","fbb_","fbb_","fbb_","finish","finish","finish","finish","finish_size_prefixed_sparse_tensor_buffer","finish_sparse_tensor_buffer","fmt","fmt","fmt","fmt","fmt","fmt","follow","follow","follow","follow","follow","follow","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_little_endian","from_little_endian","hash","hash","indicesBuffer","indicesBuffer","indicesBuffer","indicesBuffer","indicesBuffers","indicesBuffers","indicesStrides","indicesStrides","indicesType","indicesType","indicesType","indicesType","indicesType","indicesType","indptrBuffer","indptrBuffer","indptrBuffers","indptrBuffers","indptrType","indptrType","indptrType","indptrType","init_from_table","init_from_table","init_from_table","init_from_table","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","isCanonical","isCanonical","new","new","new","new","non_zero_length","non_zero_length","partial_cmp","partial_cmp","push","push","root_as_sparse_tensor","root_as_sparse_tensor_unchecked","root_as_sparse_tensor_with_opts","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","run_verifier","shape","shape","size_prefixed_root_as_sparse_tensor","size_prefixed_root_as_sparse_tensor_unchecked","size_prefixed_root_as_sparse_tensor_with_opts","sparseIndex","sparseIndex","sparseIndex_as_sparse_matrix_index_csx","sparseIndex_as_sparse_tensor_index_coo","sparseIndex_as_sparse_tensor_index_csf","sparseIndex_type","sparseIndex_type","start_","start_","start_","start_","to_little_endian","to_little_endian","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_as_binary","type_as_bool","type_as_date","type_as_decimal","type_as_duration","type_as_fixed_size_binary","type_as_fixed_size_list","type_as_floating_point","type_as_int","type_as_interval","type_as_large_binary","type_as_large_list","type_as_large_utf_8","type_as_list","type_as_map","type_as_null","type_as_run_end_encoded","type_as_struct_","type_as_time","type_as_timestamp","type_as_union","type_as_utf_8","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_type","type_type","variant_name","variant_name","Tensor","TensorArgs","TensorBuilder","TensorDim","TensorDimArgs","TensorDimBuilder","TensorDimOffset","TensorOffset","VT_DATA","VT_NAME","VT_SHAPE","VT_SIZE_","VT_STRIDES","VT_TYPE_","VT_TYPE_TYPE","_tab","_tab","add_data","add_name","add_shape","add_size_","add_strides","add_type_","add_type_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone_into","clone_into","create","create","data","data","default","default","eq","eq","fbb_","fbb_","finish","finish","finish_size_prefixed_tensor_buffer","finish_tensor_buffer","fmt","fmt","follow","follow","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","init_from_table","init_from_table","into","into","into","into","into","into","into","into","name","name","new","new","root_as_tensor","root_as_tensor_unchecked","root_as_tensor_with_opts","run_verifier","run_verifier","shape","shape","size_","size_","size_prefixed_root_as_tensor","size_prefixed_root_as_tensor_unchecked","size_prefixed_root_as_tensor_with_opts","start_","start_","strides","strides","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_as_binary","type_as_bool","type_as_date","type_as_decimal","type_as_duration","type_as_fixed_size_binary","type_as_fixed_size_list","type_as_floating_point","type_as_int","type_as_interval","type_as_large_binary","type_as_large_list","type_as_large_utf_8","type_as_list","type_as_map","type_as_null","type_as_run_end_encoded","type_as_struct_","type_as_time","type_as_timestamp","type_as_union","type_as_utf_8","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_type","type_type","ArrayReader","FileReader","StreamReader","blocks","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buffers","cast","cast","cast","compression","create_array","create_dictionary_array","create_list_array","create_primitive_array","current_block","custom_metadata","custom_metadata","data","dictionaries_by_id","dictionaries_by_id","dictionaries_by_id","finished","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","get_mut","get_mut","get_ref","get_ref","into","into","into","into_iter","into_iter","is_finished","maybe_next","maybe_next","metadata_version","next","next","next_buffer","next_node","nodes","num_batches","projection","projection","read_buffer","read_dictionary","read_record_batch","reader","reader","schema","schema","schema","schema","schema","schema","set_index","skip_buffer","skip_field","total_blocks","try_from","try_from","try_from","try_into","try_into","try_into","try_new","try_new","try_new_unbuffered","type_id","type_id","type_id","version","DictionaryTracker","EncodedData","FileWriter","IpcDataGenerator","IpcWriteOptions","StreamWriter","_encode_dictionaries","alignment","arrow_data","batch_compression_type","block_offsets","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_need_truncate","cast","cast","cast","cast","cast","cast","clone","clone_into","close","close","custom_metadata","data_gen","data_gen","default","default","dictionary_batch_to_bytes","dictionary_blocks","dictionary_tracker","dictionary_tracker","encode_dictionaries","encoded_batch","error_on_replacement","finish","finish","finished","finished","fmt","fmt","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get_buffer_element_width","get_byte_array_buffers","get_mut","get_mut","get_ref","get_ref","has_validity_bitmap","insert","into","into","into","into","into","into","into_inner","into_inner","into_zero_offset_run_array","ipc_message","metadata_version","new","pad_to_8","record_batch_to_bytes","record_blocks","schema","schema_to_bytes","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","try_new_with_options","try_new_with_options","try_with_compression","type_id","type_id","type_id","type_id","type_id","type_id","unslice_run_array","write","write","write","write","write_array_data","write_body_buffers","write_buffer","write_continuation","write_legacy_ipc_format","write_message","write_metadata","write_options","write_options","writer","writer","written"],"q":[[0,"arrow_ipc"],[7,"arrow_ipc::compression"],[38,"arrow_ipc::convert"],[61,"arrow_ipc::gen"],[66,"arrow_ipc::gen::File"],[176,"arrow_ipc::gen::Message"],[608,"arrow_ipc::gen::Schema"],[2621,"arrow_ipc::gen::SparseTensor"],[3040,"arrow_ipc::gen::Tensor"],[3208,"arrow_ipc::reader"],[3292,"arrow_ipc::writer"],[3423,"alloc::vec"],[3424,"arrow_schema::error"],[3425,"core::result"],[3426,"arrow_buffer::buffer::immutable"],[3427,"core::fmt"],[3428,"core::fmt"],[3429,"flatbuffers::builder"],[3430,"arrow_schema::field"],[3431,"flatbuffers::primitives"],[3432,"arrow_schema::schema"],[3433,"arrow_schema::datatype"],[3434,"alloc::string"],[3435,"std::collections::hash::map"],[3436,"flatbuffers::primitives"],[3437,"core::option"],[3438,"flatbuffers::table"],[3439,"flatbuffers::verifier"],[3440,"flatbuffers::verifier"],[3441,"core::hash"],[3442,"arrow_array::array"],[3443,"std::io"],[3444,"std::io"],[3445,"arrow_schema::schema"],[3446,"arrow_data::data"],[3447,"std::io"],[3448,"arrow_array::array::run_array"],[3449,"core::convert"]],"d":["","","","Utilities for converting between IPC types and native …","Generated code","Arrow IPC File and Stream Readers","Arrow IPC File and Stream Writers","Represents compressing a ipc stream using a particular …","","","","","","","","","","Compress the data in input buffer and write to output …","","Compresses the data in <code>input</code> to <code>output</code> and appends the …","","Decompress the data in input buffer and write to output …","","Decompresses the input into a <code>Buffer</code>","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Get the uncompressed length Notes: …","","","","","","","","","Create an IPC Field from an Arrow Field","","","Deserialize a Schema table from flat buffer format to …","Returns the argument unchanged.","","Get the Arrow data type from the flatbuffer Field table","Create an IPC dictionary encoding","Get the IPC type of a data type","Calls <code>U::from(self)</code>.","","Serialize a schema in IPC format","","","","Try deserialize flat buffer format bytes into a schema","Try deserialize the IPC format bytes into a schema","","","","","","","","","","Arrow File metadata","","","","","","","","","","","","","","","Length of the data (this is aligned so there can be a gap …","","","","","","","","","","","","","","","","","","","","","User-defined metadata","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Length of the metadata","","","Index to the start of the RecordBlock (note this is past …","","","","Verifies that a buffer of bytes contains a <code>Footer</code> and …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","","","","","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","","","","","","","","","","","","","","","","","","","","","Each constituent buffer is first compressed with the …","Optional compression for the memory buffers constituting …","","","Provided for forward compatibility in case we need to …","","","For sending dictionary encoding information. Any Field can …","","","","","","","","","","","","","","","","","","","","","","","Data structures for describing a table row batch (a …","","","","","The root Message type This union enables us to easily send …","","","","A data header describing the shared memory layout of a “…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Buffers correspond to the pre-ordered flattened buffer tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compressor library. For LZ4_FRAME, each compressed buffer …","","Optional compression of the message body","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If isDelta is true the values in the dictionary are to be …","","The number of value slots in the Arrow array at this level …","number of records / rows. The arrays in the batch should …","","Indicates the way the record batch body was compressed","","","","","","","Nodes correspond to the pre-ordered flattened logical …","","The number of observed nulls. Fields with null_count == 0 …","","","","","","","","Verifies that a buffer of bytes contains a <code>Message</code> and …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","","","","","","","","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","","","","Opaque binary data","","","","","","","","","","A Buffer represents a single contiguous memory segment","The stream makes use of compressed bodies as described in …","","","The stream makes use of multiple full dictionaries with the","","Date is either a 32-bit or 64-bit signed integer type …","","","","","","Exact decimal value represented as an integer value in two…","","","","","","","","","","","Dictionary encoding metadata Maintained for forwards …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Endianness of the platform producing the data","Represents Arrow Features that might not have full support …","A field represents a named column in a record / row batch …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","user defined key value pairs to add custom metadata to …","","","","Same as Binary, but with 64-bit offsets, allowing to …","","","","","Same as List, but with 64-bit offsets, allowing to …","","","","","Same as Utf8, but with 64-bit offsets, allowing to …","","","","","","","","","","","","","","","A Map is a logical nested type that is represented as","","","","","","","","These are stored in the flatbuffer in the Type union below","","","","","","Contains two child arrays, run_ends and values. The …","","","","","","","A Schema describes the columns in a row batch","","","","","A Struct_ in the flatbuffer metadata is the same as an …","","","","","Time is either a 32-bit or 64-bit signed integer type …","","","","","","Timestamp is a 64-bit signed integer representing an …","","","","","Top-level Type value, enabling extensible type-specific …","","Needed to make flatbuffers happy.","A union is a complex type with children in Field By …","","","","","","Unicode with UTF-8 encoding","","","","","0.1.0 (October 2016).","0.2.0 (February 2017). Non-backwards compatible with V1.","0.3.0 -&gt; 0.7.1 (May - December 2017). Non-backwards …","= 0.8.0 (December 2017). Non-backwards compatible with V3.","= 1.0.0 (July 2020. Backwards compatible with V4 (V5 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of bits per value. The only accepted widths are 128 …umber of bytes per value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","children apply only to nested data types like Struct, List …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","User-defined metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Present only if the field is dictionary encoded.","","","","endianness of the buffer it is Little Endian by default if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Features used in the stream/file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The known dictionary id in the application where this data …","","The dictionary indices are constrained to be non-negative …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","By default, dictionaries are not ordered, or the order …","","","","","","Set to true if the keys within each value are sorted","","The absolute length (in bytes) of the memory buffer. The …","Number of list items per value","","","","Name is not required, in i.e. a List","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether or not this field can contain nulls. Should be …","","The relative offset into the shared memory page where the …","","","","","","","","","","","","Total number of decimal digits","","","","","","","","","","","","","","Verifies that a buffer of bytes contains a <code>Schema</code> and …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of digits after the decimal point “.”","","","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","","","","","","","","","","","","","","","","","","","","","","","","","","","The timezone is an optional string indicating the name of …his is the type of the decoded value if the field is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","","","","","","","","","","","","","","","","","Compressed Sparse format, that is matrix-specific.","","","","","","","","","EXPERIMENTAL: Data structures for sparse tensors …","","","","","Compressed Sparse Fiber (CSF) sparse tensor index.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","axisOrder stores the sequence in which dimensions were …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Which axis, row or column, is compressed","","","","","","The location and size of the tensor’s data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","The location and size of the indices matrix’s data","indicesBuffer stores the location and size of the array …","","","indicesBuffers stores values of nodes. Each tensor …","","Non-negative byte offsets to advance one value cell along …","","The type of values in indicesBuffer","The type of values in indicesBuffer","The type of values in indicesBuffers","","","","indptrBuffer stores the location and size of indptr array …","","indptrBuffers stores the sparsity structure. Each two …","","The type of values in indptrBuffer","CSF is a generalization of compressed sparse row (CSR) …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This flag is true if and only if the indices matrix is …","","","","","","The number of non-zero values in a sparse tensor.","","","","","","Verifies that a buffer of bytes contains a <code>SparseTensor</code> …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","","","","","The dimensions of the tensor, optionally named.","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","Sparse tensor index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of data contained in a value cell. Currently only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the variant’s name or “” if unknown.","Returns the variant’s name or “” if unknown.","","","","Data structures for dense tensors Shape data for a single …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The location and size of the tensor’s data","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Name of the dimension, optional","","","","Verifies that a buffer of bytes contains a <code>Tensor</code> and …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given options, that a buffer of bytes …","","","The dimensions of the tensor, optionally named","","Length of dimension","","Verifies that a buffer of bytes contains a size prefixed …","Assumes, without verification, that a buffer of bytes …","Verifies, with the given verifier options, that a buffer of","","","Non-negative byte offsets to advance one value cell along …","","","","","","","","","","","","","","","","","","","","The type of data contained in a value cell. Currently only …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","State for decoding arrays from an encoded <code>RecordBatch</code>","Arrow File reader","Arrow Stream reader","The blocks in the file","","","","","","","The buffers comprising this array","","","","Optional compression codec","Coordinates reading arrays based on data types.","Reads the correct number of buffers based on list type and …","Reads the correct number of buffers based on list type and …","Reads the correct number of buffers based on data type and …","A counter to keep track of the current block that should …","Return user defined customized metadata","User defined metadata","The raw data buffer","Decoded dictionaries indexed by dictionary id","Optional dictionaries for each schema field.","Optional dictionaries for each schema field.","An indicator of whether the stream is complete.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Gets a mutable reference to the underlying reader.","Gets a mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Gets a reference to the underlying reader.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Check if the stream is finished","","","Metadata version","","","","","The fields comprising this array","Return the number of batches in the file","Optional projection and projected_schema","Optional projection","Read a buffer based on offset and length From …","Read the dictionary from the buffer and provided metadata, …","Creates a record batch from binary data using the …","Buffered file reader that supports reading and seeking","Stream reader","","Return the schema of the file","","Return the schema of the stream","The schema that is read from the file header","The schema that is read from the stream’s first message","Read a specific record batch","","","The total number of blocks, which may contain record …","","","","","","","Try to create a new file reader","Try to create a new stream reader with the reader wrapped …","Try to create a new stream reader but do not wrap the …","","","","The format version","Keeps track of dictionaries that have been written, to …","Stores the encoded data, which is an crate::Message, and …","","Handles low level details of encoding <code>Array</code> and <code>Schema</code> …","IPC write options used to control the behaviour of the …","","","Write padding after memory buffers to this multiple of …","Arrow buffers to be written, should be an empty vec for …","Compression, if desired. Will result in a runtime error if …","The number of bytes between each block of bytes, as an …","","","","","","","","","","","","","Whether to truncate the buffer","","","","","","","","","","","User level customized metadata","","","","","Write dictionary values into two sets of bytes, one for …","Dictionary blocks that will be written as part of the IPC …","Keeps track of dictionaries that have been written","Keeps track of dictionaries that have been written","","Encodes a batch to a number of EncodedData items …","","Write footer and closing tag, then mark the writer as done","Write continuation bytes, and mark the stream as done","Whether the writer footer has been written, and the writer …","Whether the writer footer has been written, and the writer …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns byte width for a buffer spec. Only for …","Returns the values and offsets <code>Buffer</code> for a ByteArray with …","Gets a mutable reference to the underlying writer.","Gets a mutable reference to the underlying writer.","Gets a reference to the underlying writer.","Gets a reference to the underlying writer.","In V4, null types have no validity bitmap In V5 and later, …","Keep track of the dictionary with the given ID and values. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps the BufWriter housed in FileWriter.writer, …","Unwraps the BufWriter housed in StreamWriter.writer, …","","An encoded crate::Message","The metadata version to write. The Rust IPC writer …","Create a new <code>DictionaryTracker</code>. If <code>error_on_replacement</code> is …","Calculate an 8-byte boundary and return the number of …","Write a <code>RecordBatch</code> into two sets of bytes, one for the …","Record blocks that will be written as part of the IPC …","A reference to the schema, used in validating record …","","","","","","","","","","","","","","","Try create a new writer, with the schema written as part …","Try create a new writer, with the schema written as part …","Try create IpcWriteOptions, checking for incompatible …","Try create a new writer with IpcWriteOptions","","Configures compression when writing IPC files.","","","","","","","","","Write a record batch to the file","","Write a record batch to the stream","Write array data to a vector of bytes","","Write a buffer into <code>arrow_data</code>, a vector of bytes, and …","Write a record batch to the writer, writing the message …","The legacy format is for releases before 0.15.0, and uses …","Write a message’s IPC data and buffers, returning …","","IPC write options","IPC write options","The object to write to","The object to write to",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,23,23,0,23,23,0,23,23,0,0,0,23,0,0,0,23,23,0,0,23,23,23,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,29,29,29,29,29,30,188,33,29,30,32,188,33,29,30,32,188,33,29,30,32,30,32,30,32,32,32,33,33,30,32,33,30,32,29,29,0,0,30,32,30,30,32,188,33,29,30,32,188,33,29,30,32,32,188,33,29,30,32,30,29,30,30,30,32,33,0,0,0,30,32,32,33,30,30,30,0,0,0,29,30,32,188,33,29,30,32,188,33,29,30,32,188,33,29,30,32,32,33,49,0,0,0,0,0,0,0,48,0,0,0,13,49,48,0,0,0,13,49,48,0,0,0,13,49,48,0,0,0,0,13,0,0,0,0,0,0,48,0,48,0,0,0,48,48,48,51,46,44,46,51,52,51,51,52,52,46,44,46,51,13,44,46,52,51,40,41,43,41,40,45,40,40,45,45,41,43,41,40,51,57,189,190,54,43,191,55,41,192,56,45,193,57,40,13,49,48,50,44,46,52,51,189,190,54,43,191,55,41,192,56,45,193,57,40,13,49,48,50,44,46,52,51,46,55,189,190,54,43,191,55,41,192,56,45,193,57,40,13,49,48,50,44,46,52,51,13,49,48,50,44,46,52,51,13,49,48,50,44,46,52,51,13,49,48,44,54,46,55,44,46,52,51,51,57,52,56,54,55,56,57,13,49,48,50,13,49,48,50,44,46,52,51,13,13,49,49,48,48,43,41,45,40,43,41,45,40,0,0,13,49,48,50,44,46,52,51,13,49,48,50,50,44,46,52,51,189,190,54,43,191,55,41,192,56,45,193,57,40,13,49,48,50,44,46,52,51,189,190,54,43,191,55,41,192,56,45,193,57,40,13,49,48,50,44,46,52,51,13,49,48,13,49,48,51,57,51,51,51,51,51,51,57,52,56,44,46,52,51,189,190,54,43,191,55,41,192,56,45,193,57,40,13,49,48,50,44,46,52,51,52,56,50,46,55,44,54,43,41,45,40,50,46,55,50,13,49,48,13,49,48,50,0,0,0,13,49,48,50,44,46,52,51,50,50,0,0,0,43,41,45,40,13,49,48,13,49,48,50,44,46,52,51,189,190,54,43,191,55,41,192,56,45,193,57,40,13,49,48,50,44,46,52,51,189,190,54,43,191,55,41,192,56,45,193,57,40,13,49,48,50,44,46,52,51,189,190,54,43,191,55,41,192,56,45,193,57,40,13,49,48,50,44,46,52,51,13,49,48,51,57,71,0,82,0,0,0,0,82,0,0,0,0,72,84,87,72,80,0,82,0,0,0,0,0,82,0,0,0,78,70,0,0,0,0,0,0,82,0,0,0,31,72,78,80,84,85,87,82,70,71,0,0,0,0,0,0,0,0,0,0,31,72,78,80,84,85,87,82,70,71,0,0,0,0,0,0,0,0,0,0,31,72,78,80,84,85,87,82,70,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,0,82,0,0,0,0,82,0,0,0,80,0,82,0,0,0,0,82,0,0,0,0,0,0,0,0,0,82,0,0,0,0,82,0,0,0,0,82,0,0,0,0,82,0,0,0,71,85,84,85,87,0,82,0,0,0,0,85,82,0,82,0,0,0,0,0,82,0,0,0,85,80,0,0,0,0,78,0,82,0,0,0,0,82,0,0,0,0,0,82,0,0,0,0,0,72,0,82,0,0,0,0,0,82,0,0,0,31,31,31,31,31,73,89,90,91,17,17,19,17,22,19,19,19,22,22,22,73,26,97,96,98,17,17,99,89,89,107,98,17,17,106,90,107,108,109,26,87,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,63,64,65,66,67,67,68,67,69,68,68,68,69,69,69,63,74,75,76,77,67,67,79,64,64,81,77,67,67,83,65,81,86,88,74,73,89,90,117,126,128,194,195,110,136,196,111,137,197,112,138,198,113,139,199,114,76,200,115,75,201,116,77,202,117,63,203,118,79,204,119,140,205,120,141,206,121,142,207,122,143,208,123,66,209,124,144,210,125,145,211,126,64,212,127,83,213,128,65,214,129,81,215,130,86,216,131,88,217,132,74,218,133,69,219,134,67,220,135,68,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,194,195,110,136,196,111,137,197,112,138,198,113,139,199,114,76,200,115,75,201,116,77,202,117,63,203,118,79,204,119,140,205,120,141,206,121,142,207,122,143,208,123,66,209,124,144,210,125,145,211,126,64,212,127,83,213,128,65,214,129,81,215,130,86,216,131,88,217,132,74,218,133,69,219,134,67,220,135,68,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,91,123,194,195,110,136,196,111,137,197,112,138,198,113,139,199,114,76,200,115,75,201,116,77,202,117,63,203,118,79,204,119,140,205,120,141,206,121,142,207,122,143,208,123,66,209,124,144,210,125,145,211,126,64,212,127,83,213,128,65,214,129,81,215,130,86,216,131,88,217,132,74,218,133,69,219,134,67,220,135,68,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,17,134,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,31,72,78,80,84,85,87,82,70,71,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,17,19,134,135,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,31,72,78,80,84,85,87,82,70,71,42,17,134,22,133,19,135,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,31,31,72,72,78,78,80,80,84,84,85,85,87,87,82,82,70,70,71,71,136,137,138,139,76,75,77,63,79,140,141,142,143,66,144,145,64,83,65,81,86,88,74,69,67,68,19,135,19,135,136,137,138,139,76,75,77,63,79,140,141,142,143,66,144,145,64,83,65,81,86,88,74,69,67,68,0,0,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,31,72,78,80,84,85,87,82,70,71,42,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,194,195,110,136,196,111,137,197,112,138,198,113,139,199,114,76,200,115,75,201,116,77,202,117,63,203,118,79,204,119,140,205,120,141,206,121,142,207,122,143,208,123,66,209,124,144,210,125,145,211,126,64,212,127,83,213,128,65,214,129,81,215,130,86,216,131,88,217,132,74,218,133,69,219,134,67,220,135,68,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,194,195,110,136,196,111,137,197,112,138,198,113,139,199,114,76,200,115,75,201,116,77,202,117,63,203,118,79,204,119,140,205,120,141,206,121,142,207,122,143,208,123,66,209,124,144,210,125,145,211,126,64,212,127,83,213,128,65,214,129,81,215,130,86,216,131,88,217,132,74,218,133,69,219,134,67,220,135,68,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,31,72,78,80,84,85,87,82,70,71,31,72,78,80,84,85,87,82,70,71,22,133,22,133,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,194,195,110,136,196,111,137,197,112,138,198,113,139,199,114,76,200,115,75,201,116,77,202,117,63,203,118,79,204,119,140,205,120,141,206,121,142,207,122,143,208,123,66,209,124,144,210,125,145,211,126,64,212,127,83,213,128,65,214,129,81,215,130,86,216,131,88,217,132,74,218,133,69,219,134,67,220,135,68,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,22,133,73,117,26,132,97,115,42,96,114,98,116,17,134,136,137,138,139,76,75,77,63,79,140,141,142,143,66,144,145,64,83,65,81,86,88,74,69,67,68,42,17,134,42,31,72,78,80,84,85,87,82,70,71,99,89,118,126,31,72,78,80,84,85,87,82,70,71,42,0,0,0,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,89,126,42,42,0,0,0,136,137,138,139,76,75,77,63,79,140,141,142,143,66,144,145,64,83,65,81,86,88,74,69,67,68,107,129,31,72,78,80,84,85,87,82,70,71,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,194,195,110,136,196,111,137,197,112,138,198,113,139,199,114,76,200,115,75,201,116,77,202,117,63,203,118,79,204,119,140,205,120,141,206,121,142,207,122,143,208,123,66,209,124,144,210,125,145,211,126,64,212,127,83,213,128,65,214,129,81,215,130,86,216,131,88,217,132,74,218,133,69,219,134,67,220,135,68,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,194,195,110,136,196,111,137,197,112,138,198,113,139,199,114,76,200,115,75,201,116,77,202,117,63,203,118,79,204,119,140,205,120,141,206,121,142,207,122,143,208,123,66,209,124,144,210,125,145,211,126,64,212,127,83,213,128,65,214,129,81,215,130,86,216,131,88,217,132,74,218,133,69,219,134,67,220,135,68,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,98,116,17,134,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,194,195,110,136,196,111,137,197,112,138,198,113,139,199,114,76,200,115,75,201,116,77,202,117,63,203,118,79,204,119,140,205,120,141,206,121,142,207,122,143,208,123,66,209,124,144,210,125,145,211,126,64,212,127,83,213,128,65,214,129,81,215,130,86,216,131,88,217,132,74,218,133,69,219,134,67,220,135,68,31,72,78,80,84,85,87,82,70,71,42,92,93,94,95,96,97,98,73,99,100,101,102,103,91,104,105,89,106,90,107,108,109,26,22,17,19,17,134,106,90,107,108,109,127,128,129,130,131,26,132,31,72,78,80,84,85,87,82,70,71,149,149,153,0,0,149,153,0,0,149,153,0,0,153,149,0,0,153,0,0,0,0,0,0,0,0,153,0,0,0,0,153,0,0,0,0,0,154,156,60,155,156,154,155,155,156,154,156,154,156,154,155,60,60,60,60,60,60,155,156,154,60,147,148,150,151,148,147,151,151,148,147,148,147,148,147,151,150,150,150,150,150,150,154,159,221,222,157,151,223,158,148,224,159,147,225,160,150,149,153,155,156,154,60,221,222,157,151,223,158,148,224,159,147,225,160,150,149,153,155,156,154,60,221,222,157,151,223,158,148,224,159,147,225,160,150,149,153,155,156,154,60,149,153,155,156,154,60,149,153,155,156,154,60,149,153,156,158,155,156,154,60,60,160,157,158,159,160,149,153,149,153,155,156,154,60,149,149,153,153,151,148,147,150,151,148,147,150,0,0,149,153,155,156,154,60,149,153,155,156,154,60,221,222,157,151,223,158,148,224,159,147,225,160,150,149,153,155,156,154,60,221,222,157,151,223,158,148,224,159,147,225,160,150,149,153,155,156,154,60,149,153,149,153,155,156,157,158,154,159,155,157,155,156,154,157,158,159,156,158,154,159,156,154,158,159,155,156,154,60,221,222,157,151,223,158,148,224,159,147,225,160,150,149,153,155,156,154,60,155,157,151,148,147,150,60,160,149,153,149,153,0,0,0,149,153,155,156,154,60,60,160,0,0,0,60,160,60,60,60,60,160,151,148,147,150,149,153,149,153,155,156,154,60,221,222,157,151,223,158,148,224,159,147,225,160,150,149,153,155,156,154,60,221,222,157,151,223,158,148,224,159,147,225,160,150,149,153,155,156,154,60,60,160,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,221,222,157,151,223,158,148,224,159,147,225,160,150,149,153,155,156,154,60,60,160,149,153,0,0,0,0,0,0,0,0,61,152,61,152,61,61,61,152,61,161,162,161,162,161,161,161,226,163,162,227,164,161,152,61,226,163,162,227,164,161,152,61,226,163,162,227,164,161,152,61,152,61,152,61,152,61,61,164,163,164,152,61,162,161,162,161,0,0,152,61,152,61,226,163,162,227,164,161,152,61,226,163,162,227,164,161,152,61,152,61,226,163,162,227,164,161,152,61,152,163,162,161,0,0,0,152,61,61,164,152,163,0,0,0,162,161,61,164,152,61,226,163,162,227,164,161,152,61,226,163,162,227,164,161,152,61,61,164,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,226,163,162,227,164,161,152,61,61,164,0,0,0,169,165,169,171,165,169,171,165,165,169,171,165,0,0,0,0,169,169,169,165,165,169,171,171,169,171,165,169,171,165,169,171,169,171,169,171,165,169,171,169,171,171,169,171,169,169,171,165,165,165,169,169,171,0,0,0,169,171,169,169,171,171,169,171,169,165,165,169,165,169,171,165,169,171,169,171,171,165,169,171,165,0,0,0,0,0,0,175,178,176,178,181,177,181,182,176,178,175,177,181,182,176,178,175,0,177,181,182,176,178,175,178,178,181,182,181,181,182,178,175,175,181,181,182,175,175,177,181,182,181,182,178,175,177,181,182,176,178,175,177,181,182,176,178,175,0,0,181,182,181,182,0,177,177,181,182,176,178,175,181,182,0,176,178,177,0,175,181,181,175,178,177,181,182,176,178,175,177,181,182,176,178,175,181,182,178,181,182,178,177,181,182,176,178,175,0,181,181,182,182,0,0,0,0,178,0,181,181,182,181,182,177],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[1,1],[[]],[[1,[3,[2]],[4,[2]]],[[6,[5]]]],[[[3,[2]],[4,[2]]],[[6,[5]]]],[[1,[3,[2]],[4,[2]]],[[6,[7,5]]]],[[[3,[2]],[4,[2]]],[[6,[5]]]],[[1,[3,[2]],[4,[2]]],[[6,[7,5]]]],[[[3,[2]],[4,[2]]],[[6,[7,5]]]],[[1,8],[[6,[8,5]]]],[[[3,[2]],[4,[2]]],[[6,[7,5]]]],[[1,1],9],[[],9],[[],9],[[1,10],11],[[]],[[]],[[]],[[[3,[2]]],12],[[]],[13,[[6,[1,5]]]],[[],6],[[],6],[[],14],0,[[]],[[]],[[15,16],[[18,[17]]]],[[]],0,[19,20],[[]],[[]],[[17,9],21],[[21,12,9,15],[[18,[22]]]],[[21,15],23],[[]],[[15,[25,[24,24]]],[[18,[[28,[[27,[26]]]]]]]],[20,15],[[15,20],[[18,[19]]]],[[],6],[[],6],[[[3,[2]]],[[6,[20,5]]]],[[[3,[2]]],[[6,[20,5]]]],0,[[],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[29,[18,[[28,[[27,[26]]]]]]]],[[29,[18,[[28,[30]]]]]],[[29,[18,[[28,[30]]]]]],[[29,[18,[19]]]],[[29,31]],[30,12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,30],[32,32],[[]],[[]],[[15,33],[[18,[32]]]],[32,[[34,[[28,[[27,[26]]]]]]]],0,[[],33],[[],30],[32,[[34,[[28,[30]]]]]],0,[[30,30],9],[[32,32],9],0,[29,[[18,[32]]]],[[15,[18,[32]]]],[[15,[18,[32]]]],[[30,10],11],[[32,10],11],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,32],[[]],[[]],[[]],[[]],[[]],[30,36],[15,29],[[12,36,12],30],[30,12],[[30,[3,[2]],7]],[32,[[34,[[28,[30]]]]]],0,[[[3,[2]]],[[6,[32,37]]]],[[[3,[2]]],32],[[38,[3,[2]]],[[6,[32,37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[32,[[34,[19]]]],0,[[30,12]],[[30,36]],[[30,12]],[[[3,[2]]],[[6,[32,37]]]],[[[3,[2]]],32],[[38,[3,[2]]],[[6,[32,37]]]],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],[[],14],[[],14],[32,31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[40,12]],[[41,[18,[[28,[42]]]]]],[[43,13]],[[41,[18,[44]]]],[[40,[18,[[28,[[27,[26]]]]]]]],[[45,[18,[46]]]],[[40,[18,[47]]]],[[40,48]],[[45,12]],[[45,9]],[[41,12]],[[43,49]],[[41,[18,[[28,[50]]]]]],[[40,31]],[51,12],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,[[34,[[28,[42]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[49,49],[48,48],[50,50],[44,44],[46,46],[52,52],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[13,13],53],[[49,49],53],[[48,48],53],[44,13],0,[46,[[34,[44]]]],0,[[15,54],[[18,[44]]]],[[15,55],[[18,[46]]]],[[15,56],[[18,[52]]]],[[15,57],[[18,[51]]]],[51,[[34,[[28,[[27,[26]]]]]]]],0,[52,[[34,[46]]]],0,[[],54],[[],55],[[],56],[[],57],[[],13],[[],49],[[],48],[[],50],[[13,13],9],[[49,49],9],[[48,48],9],[[50,50],9],[[44,44],9],[[46,46],9],[[52,52],9],[[51,51],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,[43,[[18,[44]]]],[41,[[18,[46]]]],[45,[[18,[52]]]],[40,[[18,[51]]]],[[15,[18,[51]]]],[[15,[18,[51]]]],[[13,10],11],[[49,10],11],[[48,10],11],[[50,10],11],[[44,10],11],[[46,10],11],[[52,10],11],[[51,10],11],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[58,13],[58,49],[2,48],[[13,59]],[[49,59]],[[48,59]],[51,[[34,[35]]]],0,[51,[[34,[52]]]],[51,[[34,[46]]]],[51,[[34,[19]]]],[51,[[34,[60]]]],[51,[[34,[61]]]],[51,48],0,[52,12],0,[35,44],[35,46],[35,52],[35,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[52,9],0,[50,12],[46,12],0,[44,49],0,[15,43],[15,41],[15,45],[15,40],[[12,12],50],[46,[[34,[[28,[50]]]]]],0,[50,12],[[13,13],[[34,[53]]]],[[49,49],[[34,[53]]]],[[48,48],[[34,[53]]]],[[13,[3,[2]],7]],[[49,[3,[2]],7]],[[48,[3,[2]],7]],[[50,[3,[2]],7]],[[[3,[2]]],[[6,[51,37]]]],[[[3,[2]]],51],[[38,[3,[2]]],[[6,[51,37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[50,12]],[[50,12]],[[[3,[2]]],[[6,[51,37]]]],[[[3,[2]]],51],[[38,[3,[2]]],[[6,[51,37]]]],0,0,0,0,[13,58],[49,58],[48,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[13,[[34,[62]]]],[49,[[34,[62]]]],[48,[[34,[62]]]],[51,31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[63,36]],[[64,36]],[[65,36]],[[66,36]],[[67,[18,[[28,[[27,[17]]]]]]]],[[67,[18,[[28,[[27,[26]]]]]]]],[[68,[18,[[28,[[27,[26]]]]]]]],[[67,[18,[22]]]],[[69,70]],[[68,71]],[[68,[18,[[28,[72]]]]]],[[68,[18,[[28,[[27,[17]]]]]]]],[[69,12]],[[69,[18,[73]]]],[[69,9]],[[63,9]],[[74,[18,[62]]]],[[75,9]],[[76,36]],[[77,78]],[[67,[18,[62]]]],[[67,9]],[[79,80]],[[64,36]],[[64,36]],[[81,[18,[62]]]],[[77,[18,[[28,[36]]]]]],[[67,[18,[47]]]],[[67,82]],[[83,84]],[[65,85]],[[81,85]],[[86,87]],[[88,85]],[[74,[18,[62]]]],[73,36],[89,36],[90,36],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[91,36],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,[[34,[[28,[[27,[17]]]]]]]],0,[31,31],[72,72],[78,78],[80,80],[84,84],[85,85],[87,87],[82,82],[70,70],[71,71],[42,42],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[73,73],[99,99],[100,100],[101,101],[102,102],[103,103],[91,91],[104,104],[105,105],[89,89],[106,106],[90,90],[107,107],[108,108],[109,109],[26,26],[22,22],[17,17],[19,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,31],53],[[72,72],53],[[78,78],53],[[80,80],53],[[84,84],53],[[85,85],53],[[87,87],53],[[82,82],53],[[70,70],53],[[71,71],53],[[15,110],[[18,[92]]]],[[15,111],[[18,[93]]]],[[15,112],[[18,[94]]]],[[15,113],[[18,[95]]]],[[15,114],[[18,[96]]]],[[15,115],[[18,[97]]]],[[15,116],[[18,[98]]]],[[15,117],[[18,[73]]]],[[15,118],[[18,[99]]]],[[15,119],[[18,[100]]]],[[15,120],[[18,[101]]]],[[15,121],[[18,[102]]]],[[15,122],[[18,[103]]]],[[15,123],[[18,[91]]]],[[15,124],[[18,[104]]]],[[15,125],[[18,[105]]]],[[15,126],[[18,[89]]]],[[15,127],[[18,[106]]]],[[15,128],[[18,[90]]]],[[15,129],[[18,[107]]]],[[15,130],[[18,[108]]]],[[15,131],[[18,[109]]]],[[15,132],[[18,[26]]]],[[15,133],[[18,[22]]]],[[15,134],[[18,[17]]]],[[15,135],[[18,[19]]]],[17,[[34,[[28,[[27,[26]]]]]]]],[19,[[34,[[28,[[27,[26]]]]]]]],0,0,[[],110],[[],111],[[],112],[[],113],[[],114],[[],115],[[],116],[[],117],[[],118],[[],119],[[],120],[[],121],[[],122],[[],123],[[],124],[[],125],[[],126],[[],127],[[],128],[[],129],[[],130],[[],131],[[],132],[[],133],[[],134],[[],135],[[],31],[[],72],[[],78],[[],80],[[],84],[[],85],[[],87],[[],82],[[],70],[[],71],[[],42],[17,[[34,[22]]]],0,[22,70],0,[19,71],0,[[31,31],9],[[72,72],9],[[78,78],9],[[80,80],9],[[84,84],9],[[85,85],9],[[87,87],9],[[82,82],9],[[70,70],9],[[71,71],9],[[42,42],9],[[92,92],9],[[93,93],9],[[94,94],9],[[95,95],9],[[96,96],9],[[97,97],9],[[98,98],9],[[73,73],9],[[99,99],9],[[100,100],9],[[101,101],9],[[102,102],9],[[103,103],9],[[91,91],9],[[104,104],9],[[105,105],9],[[89,89],9],[[106,106],9],[[90,90],9],[[107,107],9],[[108,108],9],[[109,109],9],[[26,26],9],[[22,22],9],[[17,17],9],[[19,19],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[19,[[34,[[28,[72]]]]]],0,[19,[[34,[[28,[[27,[17]]]]]]]],0,[136,[[18,[92]]]],[137,[[18,[93]]]],[138,[[18,[94]]]],[139,[[18,[95]]]],[76,[[18,[96]]]],[75,[[18,[97]]]],[77,[[18,[98]]]],[63,[[18,[73]]]],[79,[[18,[99]]]],[140,[[18,[100]]]],[141,[[18,[101]]]],[142,[[18,[102]]]],[143,[[18,[103]]]],[66,[[18,[91]]]],[144,[[18,[104]]]],[145,[[18,[105]]]],[64,[[18,[89]]]],[83,[[18,[106]]]],[65,[[18,[90]]]],[81,[[18,[107]]]],[86,[[18,[108]]]],[88,[[18,[109]]]],[74,[[18,[26]]]],[69,[[18,[22]]]],[67,[[18,[17]]]],[68,[[18,[19]]]],[[15,[18,[19]]]],[[15,[18,[19]]]],[[31,10],11],[[72,10],11],[[78,10],11],[[80,10],11],[[84,10],11],[[85,10],11],[[87,10],11],[[82,10],11],[[70,10],11],[[71,10],11],[[42,10],11],[[92,10],11],[[93,10],11],[[94,10],11],[[95,10],11],[[96,10],11],[[97,10],11],[[98,10],11],[[73,10],11],[[99,10],11],[[100,10],11],[[101,10],11],[[102,10],11],[[103,10],11],[[91,10],11],[[104,10],11],[[105,10],11],[[89,10],11],[[106,10],11],[[90,10],11],[[107,10],11],[[108,10],11],[[109,10],11],[[26,10],11],[[22,10],11],[[17,10],11],[[19,10],11],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[146,31],[12,72],[146,78],[146,80],[146,84],[146,85],[146,87],[2,82],[146,70],[146,71],[[31,59]],[[72,59]],[[78,59]],[[80,59]],[[84,59]],[[85,59]],[[87,59]],[[82,59]],[[70,59]],[[71,59]],[22,12],0,[22,[[34,[73]]]],0,[35,92],[35,93],[35,94],[35,95],[35,96],[35,97],[35,98],[35,73],[35,99],[35,100],[35,101],[35,102],[35,103],[35,91],[35,104],[35,105],[35,89],[35,106],[35,90],[35,107],[35,108],[35,109],[35,26],[35,22],[35,17],[35,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,9],0,[73,9],0,[26,[[34,[62]]]],0,[97,9],0,[42,12],[96,36],0,[98,78],0,[17,[[34,[62]]]],0,[15,136],[15,137],[15,138],[15,139],[15,76],[15,75],[15,77],[15,63],[15,79],[15,140],[15,141],[15,142],[15,143],[15,66],[15,144],[15,145],[15,64],[15,83],[15,65],[15,81],[15,86],[15,88],[15,74],[15,69],[15,67],[15,68],[[12,12],42],[17,9],0,[42,12],[[31,31],[[34,[53]]]],[[72,72],[[34,[53]]]],[[78,78],[[34,[53]]]],[[80,80],[[34,[53]]]],[[84,84],[[34,[53]]]],[[85,85],[[34,[53]]]],[[87,87],[[34,[53]]]],[[82,82],[[34,[53]]]],[[70,70],[[34,[53]]]],[[71,71],[[34,[53]]]],[99,80],[89,36],0,0,[[31,[3,[2]],7]],[[72,[3,[2]],7]],[[78,[3,[2]],7]],[[80,[3,[2]],7]],[[84,[3,[2]],7]],[[85,[3,[2]],7]],[[87,[3,[2]],7]],[[82,[3,[2]],7]],[[70,[3,[2]],7]],[[71,[3,[2]],7]],[[42,[3,[2]],7]],[[[3,[2]]],[[6,[19,37]]]],[[[3,[2]]],19],[[38,[3,[2]]],[[6,[19,37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[89,36],0,[[42,12]],[[42,12]],[[[3,[2]]],[[6,[19,37]]]],[[[3,[2]]],19],[[38,[3,[2]]],[[6,[19,37]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[107,[[34,[62]]]],0,[31,146],[72,12],[78,146],[80,146],[84,146],[85,146],[87,146],[82,2],[70,146],[71,146],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[98,[[34,[[28,[36]]]]]],0,[17,[[34,[35]]]],0,[17,[[34,[101]]]],[17,[[34,[104]]]],[17,[[34,[106]]]],[17,[[34,[89]]]],[17,[[34,[109]]]],[17,[[34,[91]]]],[17,[[34,[96]]]],[17,[[34,[99]]]],[17,[[34,[73]]]],[17,[[34,[108]]]],[17,[[34,[103]]]],[17,[[34,[95]]]],[17,[[34,[102]]]],[17,[[34,[94]]]],[17,[[34,[97]]]],[17,[[34,[92]]]],[17,[[34,[105]]]],[17,[[34,[93]]]],[17,[[34,[90]]]],[17,[[34,[107]]]],[17,[[34,[98]]]],[17,[[34,[100]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[17,82],0,[106,84],[90,85],[107,85],[108,87],[109,85],0,0,0,0,0,[26,[[34,[62]]]],0,[31,[[34,[62]]]],[72,[[34,[62]]]],[78,[[34,[62]]]],[80,[[34,[62]]]],[84,[[34,[62]]]],[85,[[34,[62]]]],[87,[[34,[62]]]],[82,[[34,[62]]]],[70,[[34,[62]]]],[71,[[34,[62]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[147,[18,[[28,[36]]]]]],[[148,149]],[[150,42]],[[151,42]],[[148,42]],[[147,[18,[[28,[42]]]]]],[[151,[18,[[28,[12]]]]]],[[151,[18,[73]]]],[[148,[18,[73]]]],[[147,[18,[73]]]],[[148,42]],[[147,[18,[[28,[42]]]]]],[[148,[18,[73]]]],[[147,[18,[73]]]],[[151,9]],[[150,12]],[[150,[18,[[28,[[27,[152]]]]]]]],[[150,[18,[47]]]],[[150,153]],[[150,[18,[47]]]],[[150,82]],[154,[[28,[36]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[149,149],[153,153],[155,155],[156,156],[154,154],[60,60],[[]],[[]],[[]],[[]],[[]],[[]],[[149,149],53],[[153,153],53],[156,149],0,[[15,157],[[18,[155]]]],[[15,158],[[18,[156]]]],[[15,159],[[18,[154]]]],[[15,160],[[18,[60]]]],[60,42],0,[[],157],[[],158],[[],159],[[],160],[[],149],[[],153],[[149,149],9],[[153,153],9],[[155,155],9],[[156,156],9],[[154,154],9],[[60,60],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,[151,[[18,[155]]]],[148,[[18,[156]]]],[147,[[18,[154]]]],[150,[[18,[60]]]],[[15,[18,[60]]]],[[15,[18,[60]]]],[[149,10],11],[[153,10],11],[[155,10],11],[[156,10],11],[[154,10],11],[[60,10],11],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[[3,[2]],7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[146,149],[2,153],[[149,59]],[[153,59]],[155,42],[156,42],0,0,[154,[[28,[42]]]],0,[155,[[34,[[28,[12]]]]]],0,[155,73],[156,73],[154,73],0,0,0,[156,42],0,[154,[[28,[42]]]],0,[156,73],[154,73],0,0,[35,155],[35,156],[35,154],[35,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[155,9],0,[15,151],[15,148],[15,147],[15,150],[60,12],0,[[149,149],[[34,[53]]]],[[153,153],[[34,[53]]]],[[149,[3,[2]],7]],[[153,[3,[2]],7]],[[[3,[2]]],[[6,[60,37]]]],[[[3,[2]]],60],[[38,[3,[2]]],[[6,[60,37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[60,[[28,[[27,[152]]]]]],0,[[[3,[2]]],[[6,[60,37]]]],[[[3,[2]]],60],[[38,[3,[2]]],[[6,[60,37]]]],[60,35],0,[60,[[34,[156]]]],[60,[[34,[155]]]],[60,[[34,[154]]]],[60,153],0,0,0,0,0,[149,146],[153,2],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[60,35],0,[60,[[34,[101]]]],[60,[[34,[104]]]],[60,[[34,[106]]]],[60,[[34,[89]]]],[60,[[34,[109]]]],[60,[[34,[91]]]],[60,[[34,[96]]]],[60,[[34,[99]]]],[60,[[34,[73]]]],[60,[[34,[108]]]],[60,[[34,[103]]]],[60,[[34,[95]]]],[60,[[34,[102]]]],[60,[[34,[94]]]],[60,[[34,[97]]]],[60,[[34,[92]]]],[60,[[34,[105]]]],[60,[[34,[93]]]],[60,[[34,[90]]]],[60,[[34,[107]]]],[60,[[34,[98]]]],[60,[[34,[100]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[60,82],0,[149,[[34,[62]]]],[153,[[34,[62]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[161,42]],[[162,[18,[62]]]],[[161,[18,[[28,[[27,[152]]]]]]]],[[162,12]],[[161,[18,[[28,[12]]]]]],[[161,[18,[47]]]],[[161,82]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[152,152],[61,61],[[]],[[]],[[15,163],[[18,[152]]]],[[15,164],[[18,[61]]]],[61,42],0,[[],163],[[],164],[[152,152],9],[[61,61],9],0,0,[162,[[18,[152]]]],[161,[[18,[61]]]],[[15,[18,[61]]]],[[15,[18,[61]]]],[[152,10],11],[[61,10],11],[[[3,[2]],7]],[[[3,[2]],7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,152],[35,61],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[152,[[34,[62]]]],0,[15,162],[15,161],[[[3,[2]]],[[6,[61,37]]]],[[[3,[2]]],61],[[38,[3,[2]]],[[6,[61,37]]]],[[39,7],[[6,[37]]]],[[39,7],[[6,[37]]]],[61,[[28,[[27,[152]]]]]],0,[152,12],0,[[[3,[2]]],[[6,[61,37]]]],[[[3,[2]]],61],[[38,[3,[2]]],[[6,[61,37]]]],0,0,[61,[[34,[[28,[12]]]]]],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[61,35],0,[61,[[34,[101]]]],[61,[[34,[104]]]],[61,[[34,[106]]]],[61,[[34,[89]]]],[61,[[34,[109]]]],[61,[[34,[91]]]],[61,[[34,[96]]]],[61,[[34,[99]]]],[61,[[34,[73]]]],[61,[[34,[108]]]],[61,[[34,[103]]]],[61,[[34,[95]]]],[61,[[34,[102]]]],[61,[[34,[94]]]],[61,[[34,[97]]]],[61,[[34,[92]]]],[61,[[34,[105]]]],[61,[[34,[93]]]],[61,[[34,[90]]]],[61,[[34,[107]]]],[61,[[34,[98]]]],[61,[[34,[100]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[61,82],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],0,[[165,16],[[6,[166,5]]]],[[50,21,[3,[8]],166],[[6,[166,5]]]],[[50,21,[3,[8]],166],[[6,[166,5]]]],[[50,21,[3,[8]]],[[6,[166,5]]]],0,[[[169,[[0,[167,168]]]]],[[25,[24,24]]]],0,0,0,0,0,0,[[[169,[[0,[167,168]]]],10],[[6,[170]]]],[[[171,[167]],10],[[6,[170]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[169,[[0,[167,168]]]]],[[0,[167,168]]]],[[[171,[167]]],167],[[[169,[[0,[167,168]]]]],[[0,[167,168]]]],[[[171,[167]]],167],[[]],[[]],[[]],[[]],[[]],[[[171,[167]]],9],[[[169,[[0,[167,168]]]]],[[6,[[34,[172]],5]]]],[[[171,[167]]],[[6,[[34,[172]],5]]]],0,[[[169,[[0,[167,168]]]]],34],[[[171,[167]]],34],[165,[[6,[8,5]]]],[[165,16],[[6,[50,5]]]],0,[[[169,[[0,[167,168]]]]],7],0,0,[[42,8,[34,[1]]],[[6,[8,5]]]],[[8,52,20,[25,[12,166]],31],[[6,[5]]]],[[8,46,173,[25,[12,166]],[34,[[3,[7]]]],31],[[6,[172,5]]]],0,0,[[[169,[[0,[167,168]]]]],173],[[[169,[[0,[167,168]]]]],173],[[[171,[167]]],173],[[[171,[167]]],173],0,0,[[[169,[[0,[167,168]]]],7],[[6,[5]]]],[165],[[165,16],[[6,[5]]]],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[0,[167,168]],[34,[[4,[7]]]]],[[6,[[169,[[0,[167,168]]]],5]]]],[[167,[34,[[4,[7]]]]],[[6,[[171,[[174,[167]]]],5]]]],[[167,[34,[[4,[7]]]]],[[6,[[171,[167]],5]]]],[[],14],[[],14],[[],14],0,0,0,0,0,0,0,[[175,166,[4,[176]],177,178],[[6,[5]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,8,179,7],9],[[]],[[]],[[]],[[]],[[]],[[]],[178,178],[[]],[[[181,[180]]],[[6,[5]]]],[[[182,[180]]],[[6,[5]]]],0,0,0,[[],178],[[],175],[[175,12,183,178],[[6,[176,5]]]],0,0,0,[[175,16,166,[4,[176]],177,178],[[6,[5]]]],[[175,172,177,178],[[6,[5]]]],0,[[[181,[180]]],[[6,[5]]]],[[[182,[180]]],[[6,[5]]]],0,0,[[178,10],11],[[175,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[179,7],[183],[[[181,[180]]],180],[[[182,[180]]],180],[[[181,[180]]],180],[[[182,[180]]],180],[[21,178],9],[[177,12,166],[[6,[9,5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[181,[180]]],[[6,[180,5]]]],[[[182,[180]]],[[6,[180,5]]]],[[[185,[184]]],[[6,[[185,[184]],5]]]],0,0,[9,177],[186,7],[[175,172,178],[[6,[176,5]]]],0,0,[[175,20,178],176],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[180,20],[[6,[[181,[180]],5]]]],[[180,20],[[6,[[182,[180]],5]]]],[[7,9,31],[[6,[178,5]]]],[[180,20,178],[[6,[[181,[180]],5]]]],[[180,20,178],[[6,[[182,[180]],5]]]],[[178,[34,[13]]],[[6,[178,5]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[183,[[6,[183,5]]]],[[[181,[180]],172],[[6,[5]]]],[[[181,[180]],172],[[6,[5]]]],[[[182,[180]],172],[[6,[5]]]],[[[182,[180]],172],[[6,[5]]]],[[183,[4,[42]],[4,[2]],[4,[50]],12,7,7,[34,[1]],178],[[6,[12,5]]]],[[180,[3,[2]]],[[6,[7,5]]]],[[[3,[2]],[4,[42]],[4,[2]],12,[34,[1]]],[[6,[12,5]]]],[[180,178,36],[[6,[7,5]]]],0,[[180,176,178],[[6,[5]]]],[[[181,[180]],[187,[24]],[187,[24]]]],0,0,0,0,0],"c":[191,192,193,197,198,199,203,204,205,658,659,660,661,662,663,664,665,666,667,678,679,680,681,682,683,684,685,686,687,698,699,700,701,702,703,704,705,706,707,2624,2625,2628,2629,2632,2633],"p":[[4,"CompressionCodec",7],[15,"u8"],[15,"slice"],[3,"Vec",3423],[4,"ArrowError",3424],[4,"Result",3425],[15,"usize"],[3,"Buffer",3426],[15,"bool"],[3,"Formatter",3427],[6,"Result",3427],[15,"i64"],[3,"CompressionType",176],[3,"TypeId",3428],[3,"FlatBufferBuilder",3429],[3,"Field",3430],[3,"Field",608],[3,"WIPOffset",3431],[3,"Schema",608],[3,"Schema",3432],[4,"DataType",3433],[3,"DictionaryEncoding",608],[3,"FBFieldType",38],[3,"String",3434],[3,"HashMap",3435],[3,"KeyValue",608],[3,"ForwardsUOffset",3431],[3,"Vector",3436],[3,"FooterBuilder",66],[3,"Block",66],[3,"MetadataVersion",608],[3,"Footer",66],[3,"FooterArgs",66],[4,"Option",3437],[3,"Table",3438],[15,"i32"],[4,"InvalidFlatbuffer",3439],[3,"VerifierOptions",3439],[3,"Verifier",3439],[3,"MessageBuilder",176],[3,"RecordBatchBuilder",176],[3,"Buffer",608],[3,"BodyCompressionBuilder",176],[3,"BodyCompression",176],[3,"DictionaryBatchBuilder",176],[3,"RecordBatch",176],[3,"UnionWIPOffset",3431],[3,"MessageHeader",176],[3,"BodyCompressionMethod",176],[3,"FieldNode",176],[3,"Message",176],[3,"DictionaryBatch",176],[4,"Ordering",3440],[3,"BodyCompressionArgs",176],[3,"RecordBatchArgs",176],[3,"DictionaryBatchArgs",176],[3,"MessageArgs",176],[15,"i8"],[8,"Hasher",3441],[3,"SparseTensor",2621],[3,"Tensor",3040],[15,"str"],[3,"IntBuilder",608],[3,"DecimalBuilder",608],[3,"TimeBuilder",608],[3,"FixedSizeBinaryBuilder",608],[3,"FieldBuilder",608],[3,"SchemaBuilder",608],[3,"DictionaryEncodingBuilder",608],[3,"DictionaryKind",608],[3,"Endianness",608],[3,"Feature",608],[3,"Int",608],[3,"KeyValueBuilder",608],[3,"MapBuilder",608],[3,"FixedSizeListBuilder",608],[3,"UnionBuilder",608],[3,"UnionMode",608],[3,"FloatingPointBuilder",608],[3,"Precision",608],[3,"TimestampBuilder",608],[3,"Type",608],[3,"DateBuilder",608],[3,"DateUnit",608],[3,"TimeUnit",608],[3,"IntervalBuilder",608],[3,"IntervalUnit",608],[3,"DurationBuilder",608],[3,"Decimal",608],[3,"Time",608],[3,"FixedSizeBinary",608],[3,"Null",608],[3,"Struct_",608],[3,"List",608],[3,"LargeList",608],[3,"FixedSizeList",608],[3,"Map",608],[3,"Union",608],[3,"FloatingPoint",608],[3,"Utf8",608],[3,"Binary",608],[3,"LargeUtf8",608],[3,"LargeBinary",608],[3,"Bool",608],[3,"RunEndEncoded",608],[3,"Date",608],[3,"Timestamp",608],[3,"Interval",608],[3,"Duration",608],[3,"NullArgs",608],[3,"Struct_Args",608],[3,"ListArgs",608],[3,"LargeListArgs",608],[3,"FixedSizeListArgs",608],[3,"MapArgs",608],[3,"UnionArgs",608],[3,"IntArgs",608],[3,"FloatingPointArgs",608],[3,"Utf8Args",608],[3,"BinaryArgs",608],[3,"LargeUtf8Args",608],[3,"LargeBinaryArgs",608],[3,"FixedSizeBinaryArgs",608],[3,"BoolArgs",608],[3,"RunEndEncodedArgs",608],[3,"DecimalArgs",608],[3,"DateArgs",608],[3,"TimeArgs",608],[3,"TimestampArgs",608],[3,"IntervalArgs",608],[3,"DurationArgs",608],[3,"KeyValueArgs",608],[3,"DictionaryEncodingArgs",608],[3,"FieldArgs",608],[3,"SchemaArgs",608],[3,"NullBuilder",608],[3,"Struct_Builder",608],[3,"ListBuilder",608],[3,"LargeListBuilder",608],[3,"Utf8Builder",608],[3,"BinaryBuilder",608],[3,"LargeUtf8Builder",608],[3,"LargeBinaryBuilder",608],[3,"BoolBuilder",608],[3,"RunEndEncodedBuilder",608],[15,"i16"],[3,"SparseTensorIndexCSFBuilder",2621],[3,"SparseMatrixIndexCSXBuilder",2621],[3,"SparseMatrixCompressedAxis",2621],[3,"SparseTensorBuilder",2621],[3,"SparseTensorIndexCOOBuilder",2621],[3,"TensorDim",3040],[3,"SparseTensorIndex",2621],[3,"SparseTensorIndexCSF",2621],[3,"SparseTensorIndexCOO",2621],[3,"SparseMatrixIndexCSX",2621],[3,"SparseTensorIndexCOOArgs",2621],[3,"SparseMatrixIndexCSXArgs",2621],[3,"SparseTensorIndexCSFArgs",2621],[3,"SparseTensorArgs",2621],[3,"TensorBuilder",3040],[3,"TensorDimBuilder",3040],[3,"TensorDimArgs",3040],[3,"TensorArgs",3040],[3,"ArrayReader",3208],[6,"ArrayRef",3442],[8,"Read",3443],[8,"Seek",3443],[3,"FileReader",3208],[3,"Error",3427],[3,"StreamReader",3208],[3,"RecordBatch",3444],[6,"SchemaRef",3432],[3,"BufReader",3445],[3,"IpcDataGenerator",3292],[3,"EncodedData",3292],[3,"DictionaryTracker",3292],[3,"IpcWriteOptions",3292],[4,"BufferSpec",3446],[8,"Write",3443],[3,"FileWriter",3292],[3,"StreamWriter",3292],[3,"ArrayData",3446],[8,"RunEndIndexType",3447],[3,"RunArray",3448],[15,"u32"],[8,"Into",3449],[4,"FooterOffset",66],[3,"MessageHeaderUnionTableOffset",176],[4,"BodyCompressionOffset",176],[4,"RecordBatchOffset",176],[4,"DictionaryBatchOffset",176],[4,"MessageOffset",176],[3,"TypeUnionTableOffset",608],[4,"NullOffset",608],[4,"Struct_Offset",608],[4,"ListOffset",608],[4,"LargeListOffset",608],[4,"FixedSizeListOffset",608],[4,"MapOffset",608],[4,"UnionOffset",608],[4,"IntOffset",608],[4,"FloatingPointOffset",608],[4,"Utf8Offset",608],[4,"BinaryOffset",608],[4,"LargeUtf8Offset",608],[4,"LargeBinaryOffset",608],[4,"FixedSizeBinaryOffset",608],[4,"BoolOffset",608],[4,"RunEndEncodedOffset",608],[4,"DecimalOffset",608],[4,"DateOffset",608],[4,"TimeOffset",608],[4,"TimestampOffset",608],[4,"IntervalOffset",608],[4,"DurationOffset",608],[4,"KeyValueOffset",608],[4,"DictionaryEncodingOffset",608],[4,"FieldOffset",608],[4,"SchemaOffset",608],[3,"SparseTensorIndexUnionTableOffset",2621],[4,"SparseTensorIndexCOOOffset",2621],[4,"SparseMatrixIndexCSXOffset",2621],[4,"SparseTensorIndexCSFOffset",2621],[4,"SparseTensorOffset",2621],[4,"TensorDimOffset",3040],[4,"TensorOffset",3040]]},\
"arrow_json":{"doc":"Transfer data between the Arrow memory format and JSON …","t":"CICCCCKOAAIDDDDMMALLLLLLLLLLLLMAKLMMLLLLLLLLLFFFLLLLMAFAMLLAAOLMMMALMMLAMAAAMALLLLLLLLLLLLDLLLLLLLLLLLDLLLLLLLLMMMLLLDLLLMLMLLLMLMLLLDLLLMLLLLMMLLLLMDLLLLLLLLLLLIDLLLMLLLLLKMOLLLNNENNDLLLLLLLLFFLLLLLLFFFFFFFFFFLLLMMLLLMMFLLLLLLLDDDDLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLRDRLLLMLLLLLMLLLDLLLMLMLLLMLMFLLLDNENNNNNNENNNNNNNNNNDDENNNNLLLLLMLLLLLLLLLLLLLMLLLLLLFLLLLLLLLLMMLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLOLMMMFLLLLLMMMLLLLLLLLLLLLLLLLLLLLLFDLLLMLLLLLMMLLLGDIDGDFLLLLLLLLLLLLLLLLLMMMLLLMMMLLLLLLLLLLLFFOFFLLLLMMMFLLLLLLLLLLLLLMMM","n":["ArrayWriter","JsonSerializable","LineDelimitedWriter","Reader","ReaderBuilder","Writer","into_json_value","json_serializable","reader","writer","ArrayDecoder","Decoder","Reader","ReaderBuilder","ValueIter","batch_size","batch_size","boolean_array","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build_decoder","cast","cast","cast","coerce_primitive","coerce_primitive","decimal_array","decode","decode","decoder","decoder","flush","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","infer_json_schema","infer_json_schema_from_iterator","infer_json_schema_from_seekable","into","into","into","into_iter","line_buf","list_array","make_decoder","map_array","max_read_records","new","next","null_array","primitive_array","primitive_decoder","read","reader","reader","record_count","schema","schema","schema","schema","serialize","serializer","strict_mode","string_array","struct_array","tape","tape_decoder","timestamp_array","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_batch_size","with_coerce_primitive","with_strict_mode","BooleanArrayDecoder","borrow","borrow_mut","cast","decode","default","from","from_cast","into","try_from","try_into","type_id","DecimalArrayDecoder","borrow","borrow_mut","cast","decode","from","from_cast","into","new","phantom","precision","scale","try_from","try_into","type_id","ListArrayDecoder","borrow","borrow_mut","cast","data_type","decode","decoder","from","from_cast","into","is_nullable","new","phantom","try_from","try_into","type_id","MapArrayDecoder","borrow","borrow_mut","cast","data_type","decode","from","from_cast","into","is_nullable","keys","new","try_from","try_into","type_id","values","NullArrayDecoder","borrow","borrow_mut","cast","decode","default","from","from_cast","into","try_from","try_into","type_id","ParseJsonNumber","PrimitiveArrayDecoder","borrow","borrow_mut","cast","data_type","decode","from","from_cast","into","new","parse","phantom","primitive_parse","try_from","try_into","type_id","Any","Array","InferredType","Object","Scalar","ValueIter","borrow","borrow","borrow_mut","borrow_mut","cast","cast","clone","clone_into","coerce_data_type","collect_field_types_from_object","fmt","fmt","from","from","from_cast","from_cast","generate_datatype","generate_fields","generate_schema","infer_array_element_type","infer_json_schema","infer_json_schema_from_iterator","infer_json_schema_from_seekable","infer_nested_array_type","infer_scalar_array_type","infer_struct_array_type","into","into","into_iter","line_buf","max_read_records","merge","new","next","reader","record_count","set_object_scalar_field_type","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ListSerializer","ObjectSerializer","SerializerError","TapeSerializer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","cast","cast","cast","cast","custom","elements","end","end","end","end","end","finish","finish","fmt","fmt","from","from","from","from","from_cast","from_cast","from_cast","from_cast","into","into","into","into","new","new","new","offsets","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_number","serialize_numeric","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serializer","serializer","start","start","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","FALSE","StringArrayDecoder","TRUE","borrow","borrow_mut","cast","coerce_primitive","decode","from","from_cast","into","new","phantom","try_from","try_into","type_id","StructArrayDecoder","borrow","borrow_mut","cast","data_type","decode","decoders","from","from_cast","into","is_nullable","new","strict_mode","struct_fields","try_from","try_into","type_id","BufIter","Colon","DecoderState","EndList","EndObject","Escape","False","False","List","Literal","Literal","Null","Null","Number","Number","Object","StartList","StartObject","String","String","Tape","TapeDecoder","TapeElement","True","True","Unicode","Value","advance","advance_until","as_slice","as_str","as_str","batch_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","cast","cast","cast","cast","cast","cast","char_from_surrogate_pair","clear","clone","clone","clone","clone_into","clone_into","clone_into","decode","element","elements","elements","eq","equivalent","equivalent","equivalent","err","error","finish","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get","get_string","into","into","into","into","into","into","into_iter","is_empty","json_whitespace","new","new","next","next","next","num_rows","num_rows","num_rows","offsets","parse_hex","peek","serialize","serialize","size_hint","skip_whitespace","stack","string_offsets","strings","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write_char","TimestampArrayDecoder","borrow","borrow_mut","cast","data_type","decode","from","from_cast","into","new","phantom","timezone","try_from","try_into","type_id","ArrayWriter","JsonArray","JsonFormat","LineDelimited","LineDelimitedWriter","Writer","array_to_json_array","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","close","default","default","end_row","end_row","end_stream","end_stream","finish","finished","finished","finished","fmt","fmt","fmt","format","format","format","from","from","from","from_cast","from_cast","from_cast","into","into","into","into_inner","new","primitive_array_to_json","record_batches_to_json_rows","set_column_by_array_type","set_column_by_primitive_type","set_column_for_json_rows","start_row","start_row","start_stream","start_stream","started","started","started","struct_array_to_jsonmap_array","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write_batches","write_row","writer","writer","writer"],"q":[[0,"arrow_json"],[10,"arrow_json::reader"],[90,"arrow_json::reader::boolean_array"],[102,"arrow_json::reader::decimal_array"],[117,"arrow_json::reader::list_array"],[133,"arrow_json::reader::map_array"],[149,"arrow_json::reader::null_array"],[161,"arrow_json::reader::primitive_array"],[178,"arrow_json::reader::schema"],[228,"arrow_json::reader::serializer"],[325,"arrow_json::reader::string_array"],[341,"arrow_json::reader::struct_array"],[358,"arrow_json::reader::tape"],[497,"arrow_json::reader::timestamp_array"],[512,"arrow_json::writer"],[585,"serde_json::value"],[586,"core::option"],[587,"std::io"],[588,"arrow_schema::error"],[589,"core::result"],[590,"arrow_data::data"],[591,"arrow_array::record_batch"],[592,"core::fmt"],[593,"core::fmt"],[594,"core::iter::traits::iterator"],[595,"std::io"],[596,"alloc::boxed"],[597,"arrow_schema::schema"],[598,"core::any"],[599,"arrow_array::types"],[600,"arrow_array::array::list_array"],[601,"arrow_array::types"],[602,"alloc::vec"],[603,"alloc::string"],[604,"indexmap::map"],[605,"serde_json::map"],[606,"core::fmt"],[607,"core::fmt"],[608,"core::ops::function"],[609,"arrow_array::types"],[610,"core::marker"],[611,"std::io"]],"d":["","Trait declaring any type that is serializable to JSON. …","","","","","Converts self into json value if its possible","","JSON reader","JSON Writer","","A low-level interface for reading JSON data from a byte …","Reads JSON data with a known schema directly into arrow …","A builder for <code>Reader</code> and <code>Decoder</code>","JSON file reader that produces a serde_json::Value …","","","","","","","","","","Create a <code>Reader</code> with the provided <code>BufRead</code>","Create a <code>Decoder</code>","","","","Sets if the decoder should coerce primitive values (bool …","","","Decode elements from <code>tape</code> starting at the indexes …","Read JSON objects from <code>buf</code>, returning the number of bytes …","","","Flushes the currently buffered data to a <code>RecordBatch</code>","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Infer the fields of a JSON file by reading the first n …","Infer the fields of a JSON file by reading all items from …","Infer the fields of a JSON file by reading the first n …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a new <code>ReaderBuilder</code> with the provided <code>SchemaRef</code>","","","","","Reads the next <code>RecordBatch</code> returning <code>Ok(None)</code> if EOF","","","","","","","","Serialize <code>rows</code> to this <code>Decoder</code>","","","","","","","","","","","","","","","","","Sets the batch size in rows to read","Sets if the decoder should coerce primitive values (bool …","Sets if the decoder should return an error if it …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","A trait for JSON-specific primitive parsing logic","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","JSON file reader that produces a serde_json::Value …","","","","","","","","","Coerce data type during inference","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate schema from JSON field names and inferred data …","","Infer the fields of a JSON file by reading the first n …","Infer the fields of a JSON file by reading all items from …","Infer the fields of a JSON file by reading the first n …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a new <code>ValueIter</code>","","","","","","","","","","","","","","","<code>Serializer</code> for <code>TapeElement</code>","","","","","","","","","A buffer of parsed string data","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Offsets into <code>data</code>","","","","","","","","","","","","","","","","","","","","The tape stores all values as strings, and so must …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","A wrapper around a slice iterator that provides some …","","States based on https://www.json.org/json-en.html","The end of a list , i.e. <code>]</code>","The end of an object, i.e. <code>}</code>","","A false literal","","Decoding a list","","A boolean or null literal","A null literal","","A numeric value","","Decoding an object","The start of a list , i.e. <code>[</code>","The start of an object, i.e. <code>{</code>","A string value","","A decoded JSON tape","Implements a state machine for decoding JSON to a tape","We decode JSON to a flattened tape representation, …","A true literal","","A unicode escape sequence,","","","","","","","Number of rows to read per batch","","","","","","","","","","","","","","A buffer of parsed string data","","","","","","","Creates a character from an UTF-16 surrogate pair","Clears this <code>TapeDecoder</code> in preparation to read the next …","","","","","","","","","","","","","","","Returns an error for a given byte <code>b</code> and context <code>ctx</code>","Returns an error reading index <code>idx</code>","Finishes the current <code>Tape</code>","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the tape element at <code>idx</code>","Returns the string for the given string index","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Evaluates to true if <code>b</code> is a valid JSON whitespace character","Create a new <code>TapeDecoder</code> with the provided batch size and …","","","Returns the index of the next field at the same level as …","Evaluates to the next element in the iterator or breaks …","Returns the number of rows","","","Offsets into <code>data</code>","Parse a hex character to <code>u8</code>","","Writes any type that implements <code>Serialize</code> into this …","Serialize the tape element at index <code>idx</code> to <code>out</code> returning …","","","A stack of <code>DecoderState</code>","","","","","","","","","","","","","","","","","","","","","","","","Writes <code>c</code> as UTF-8 to <code>out</code>","A specialized <code>ArrayDecoder</code> for timestamps","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","A JSON writer which serializes <code>RecordBatch</code>es to JSON arrays","Produces JSON output as a single JSON array. For example","This trait defines how to format a sequence of JSON …","Produces JSON output with one record per line. For example","A JSON writer which serializes <code>RecordBatch</code>es to newline …","A JSON writer which serializes <code>RecordBatch</code>es to a stream of","Converts an arrow <code>Array</code> into a <code>Vec</code> of Serde JSON …","","","","","","","","","","","","","write any bytes needed for the end of each row","","write any bytes needed for the start of each row","","Finishes the output stream. This function must be called …","Is the writer finished?","Is the writer finished?","Is the writer finished?","","","","Determines how the byte stream is formatted","Determines how the byte stream is formatted","Determines how the byte stream is formatted","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this <code>Writer&lt;W&gt;</code>, returning the underlying writer","Construct a new writer","","Converts an arrow <code>RecordBatch</code> into a <code>Vec</code> of Serde JSON …","","","","write any bytes needed for the start of each row","","write any bytes needed at the start of the file to the …","","Has the writer output any records yet?","Has the writer output any records yet?","Has the writer output any records yet?","","","","","","","","","","","","Convert the <code>RecordBatch</code> into JSON rows, and write them to …","Convert the <code>RecordBatch</code> into JSON rows, and write them to …","Write a single JSON row to the output writer","Underlying writer to use to write bytes","Underlying writer to use to write bytes","Underlying writer to use to write bytes"],"i":[0,0,0,0,0,0,82,0,0,0,0,0,0,0,0,3,8,0,3,5,8,3,5,8,3,3,3,5,8,3,3,0,23,8,5,8,8,5,8,3,5,8,3,5,8,0,0,0,3,5,8,5,45,0,0,0,45,3,5,0,0,0,5,5,45,45,0,5,3,8,8,0,3,0,0,0,8,0,3,5,8,3,5,8,3,5,8,3,3,3,0,28,28,28,28,28,28,28,28,28,28,28,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,0,0,38,38,38,38,38,38,38,38,38,83,38,0,38,38,38,39,39,0,39,39,0,39,45,39,45,39,45,39,39,0,0,39,45,39,45,39,45,0,0,0,0,0,0,0,0,0,0,39,45,45,45,45,39,45,45,45,45,0,39,39,45,39,45,39,45,0,0,0,0,53,50,51,49,53,50,51,49,53,53,50,51,49,49,53,50,50,51,51,51,50,51,49,49,53,50,51,49,53,50,51,49,53,50,51,49,53,50,51,53,53,53,53,51,51,53,53,50,51,53,53,53,53,50,53,53,53,53,53,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,50,50,51,50,51,49,53,50,51,49,53,50,51,49,53,50,51,49,0,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,0,64,64,64,64,64,64,64,64,64,64,64,64,0,64,64,64,0,67,0,52,52,67,52,68,67,0,67,52,68,52,67,67,52,52,52,67,0,0,0,52,68,67,67,65,65,65,67,68,69,69,65,52,10,67,68,69,65,52,10,67,68,68,69,69,65,52,10,67,68,0,69,52,67,68,52,67,68,69,68,69,10,52,52,52,52,0,10,69,52,10,67,68,69,65,52,10,67,68,69,65,52,10,67,68,10,10,69,65,52,10,67,68,65,65,0,69,65,65,10,0,10,69,10,69,0,65,69,10,65,65,69,10,10,52,67,68,69,65,52,10,67,68,69,65,52,10,67,68,69,65,52,10,67,68,0,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,0,0,0,0,0,0,78,79,77,78,79,77,78,79,77,77,78,79,76,78,76,79,77,84,85,77,78,79,77,84,85,77,78,79,77,78,79,77,78,79,77,77,77,0,0,0,0,0,76,79,76,79,84,85,77,0,78,79,77,78,79,77,78,79,77,77,77,77,77,84,85,77],"f":[0,0,0,0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[3,4],[[7,[[5,[4]],6]]]],[3,[[7,[8,6]]]],[[]],[[]],[[]],[[3,9],3],0,0,[[10,[12,[11]]],[[7,[13,6]]]],[[8,[12,[14]]],[[7,[15,6]]]],0,0,[8,[[7,[[2,[16]],6]]]],[[5,17],18],[[8,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[4,[2,[15]]],[[7,[19,6]]]],[20,[[7,[19,6]]]],[[[0,[4,21]],[2,[15]]],[[7,[19,6]]]],[[]],[[]],[[]],[[]],0,0,[[22,9,9,9],[[7,[[24,[23]],6]]]],0,0,[25,3],[[[5,[4]]],2],0,0,0,[[[5,[4]]],[[7,[[2,[16]],6]]]],0,0,0,0,[[[5,[4]]],25],0,0,[[8,[12,[26]]],[[7,[6]]]],0,0,0,0,0,0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],27],[[],27],[[],27],[[3,15],3],[[3,9],3],[[3,9],3],0,[[]],[[]],[[]],[[28,10,[12,[11]]],[[7,[13,6]]]],[[],28],[[]],[[]],[[]],[[],7],[[],7],[[],27],0,[[]],[[]],[[]],[[[30,[29]],10,[12,[11]]],[[7,[13,6]]]],[[]],[[]],[[]],[[14,31],[[30,[29]]]],0,0,0,[[],7],[[],7],[[],27],0,[[]],[[]],[[]],0,[[[33,[32]],10,[12,[11]]],[[7,[13,6]]]],0,[[]],[[]],[[]],0,[[22,9,9,9],[[7,[[33,[32]],6]]]],0,[[],7],[[],7],[[],27],0,[[]],[[]],[[]],0,[[34,10,[12,[11]]],[[7,[13,6]]]],[[]],[[]],[[]],0,0,[[22,9,9,9],[[7,[34,6]]]],[[],7],[[],7],[[],27],0,0,[[]],[[]],[[]],[[35,10,[12,[11]]],[[7,[13,6]]]],[[],35],[[]],[[]],[[]],[[],7],[[],7],[[],27],0,0,[[]],[[]],[[]],0,[[[38,[[0,[36,37]]]],10,[12,[11]]],[[7,[13,6]]]],[[]],[[]],[[]],[22,[[38,[36]]]],[[[12,[14]]],2],0,0,[[],7],[[],7],[[],27],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[[]],[[[40,[22]]],22],[[[42,[41,39]],[43,[41,1]]],[[7,[6]]]],[[39,17],18],[[[45,[[0,[44,4]]]],17],18],[[]],[[]],[[]],[[]],[39,[[7,[22,6]]]],[[[42,[41,39]]],[[7,[46,6]]]],[[[42,[41,39]]],[[7,[19,6]]]],[[[12,[1]]],[[7,[39,6]]]],[[4,[2,[15]]],[[7,[19,6]]]],[20,[[7,[19,6]]]],[[[0,[4,21]],[2,[15]]],[[7,[19,6]]]],[[[12,[1]]],[[7,[39,6]]]],[[[12,[1]]],[[7,[39,6]]]],[[[12,[1]]],[[7,[39,6]]]],[[]],[[]],[[]],0,0,[[39,39],[[7,[6]]]],[[4,[2,[15]]],[[45,[4]]]],[[[45,[4]]],2],0,0,[[[42,[41,39]],47,22],[[7,[6]]]],[[]],[[],7],[[],7],[[],7],[[],7],[[],27],[[],27],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[48,49],0,[50,7],[50,7],[51,7],[51,7],[51,7],[50],[51],[[49,17],18],[[49,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[52]],[40,[14]],[40,[15]]],53],[53,50],[53,51],0,[[53,9],[[7,[49]]]],[[53,[12,[14]]],[[7,[49]]]],[[53,54],[[7,[49]]]],[[51,[0,[26,55]]],7],[[51,[0,[26,55]]],7],[[53,56],[[7,[49]]]],[[53,57],[[7,[49]]]],[[50,47,[0,[26,55]]],7],[[51,[0,[26,55]]],7],[[53,58],[[7,[49]]]],[[53,59],[[7,[49]]]],[[53,60],[[7,[49]]]],[[53,31],[[7,[49]]]],[[50,[0,[26,55]]],7],[[53,[2,[15]]],[[7,[49]]]],[[53,47,[0,[55,26]]],[[7,[49]]]],[[53,47,11,47,[0,[55,26]]],[[7,[49]]]],[53,[[7,[49]]]],[[53,[12,[14]]]],0,[[53,[2,[15]]],[[7,[49]]]],[[53,[0,[55,26]]],[[7,[49]]]],[[53,47],[[7,[49]]]],[[53,47,15],[[7,[49]]]],[[53,47,11,47,15],[[7,[49]]]],[[53,15],[[7,[49]]]],[[53,47,15],[[7,[49]]]],[[53,47,11,47,15],[[7,[49]]]],[[53,61],[[7,[49]]]],[[53,11],[[7,[49]]]],[[53,62],[[7,[49]]]],[[53,14],[[7,[49]]]],[53,[[7,[49]]]],[[53,47],[[7,[49]]]],[[53,47,11,47],[[7,[49]]]],[[50,[0,[26,55]]],7],0,0,0,0,[[],41],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],27],[[],27],[[],27],[[],27],0,0,0,[[]],[[]],[[]],0,[[[63,[32]],10,[12,[11]]],[[7,[13,6]]]],[[]],[[]],[[]],[9,[[63,[32]]]],0,[[],7],[[],7],[[],27],0,[[]],[[]],[[]],0,[[64,10,[12,[11]]],[[7,[13,6]]]],0,[[]],[[]],[[]],0,[[22,9,9,9],[[7,[64,6]]]],0,[22,46],[[],7],[[],7],[[],27],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[65,15]],[[65,66],[[12,[14]]]],[65,[[12,[14]]]],[67,47],[68,47],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,[[12,[14]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[61,61],[[7,[54,6]]]],[69],[52,52],[67,67],[68,68],[[]],[[]],[[]],[[69,[12,[14]]],[[7,[15,6]]]],[68,52],0,0,[[52,52],9],[[],9],[[],9],[[],9],[[14,47],6],[[10,11,47],6],[69,[[7,[10,6]]]],[[52,17],18],[[10,17],18],[[67,17],18],[[68,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,11],52],[[10,11],47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[65,9],[14,9],[[15,15],69],[[[12,[14]]],65],[65,2],[[10,11,47],[[7,[11,6]]]],0,[10,15],0,0,0,[14,[[7,[14,6]]]],[65,[[2,[14]]]],[[69,[12,[26]]],[[7,[6]]]],[[10,41,11],11],[65],[65],0,0,0,[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[54,[40,[14]]]],0,[[]],[[]],[[]],0,[[[73,[70,[0,[71,72]]]],10,[12,[11]]],[[7,[13,6]]]],[[]],[[]],[[]],[[22,71],[[73,[70,71]]]],0,0,[[],7],[[],7],[[],27],0,0,0,0,0,0,[74,[[7,[[40,[1]],6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[77,[75,76]]],[[7,[6]]]],[[],78],[[],79],[75,[[7,[6]]]],[[78,75],[[7,[6]]]],[75,[[7,[6]]]],[[79,75],[[7,[6]]]],[[[77,[75,76]]],[[7,[6]]]],0,0,0,[[78,17],18],[[79,17],18],[[[77,[[0,[75,44]],[0,[76,44]]]],17],18],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[77,[75,76]]],75],[75,[[77,[75,76]]]],[74,[[7,[[40,[1]],6]]]],[[[12,[16]]],[[7,[[40,[[43,[41,1]]]],6]]]],0,[[[12,[[43,[41,1]]]],80,47]],[[[12,[[43,[41,1]]]],80,47],[[7,[6]]]],[[75,9],[[7,[6]]]],[[79,75,9],[[7,[6]]]],[75,[[7,[6]]]],[[79,75],[[7,[6]]]],0,0,0,[81,[[7,[[40,[[43,[41,1]]]],6]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],27],[[],27],[[],27],[[[77,[75,76]],16],[[7,[6]]]],[[[77,[75,76]],16],[[7,[6]]]],[[[77,[75,76]],[12,[16]]],[[7,[6]]]],[[[77,[75,76]],1],[[7,[6]]]],0,0,0],"c":[29],"p":[[4,"Value",585],[4,"Option",586],[3,"ReaderBuilder",10],[8,"BufRead",587],[3,"Reader",10],[4,"ArrowError",588],[4,"Result",589],[3,"Decoder",10],[15,"bool"],[3,"Tape",358],[15,"u32"],[15,"slice"],[3,"ArrayData",590],[15,"u8"],[15,"usize"],[3,"RecordBatch",591],[3,"Formatter",592],[6,"Result",592],[3,"Schema",593],[8,"Iterator",594],[8,"Seek",587],[4,"DataType",595],[8,"ArrayDecoder",10],[3,"Box",596],[6,"SchemaRef",593],[8,"Serialize",597],[3,"TypeId",598],[3,"BooleanArrayDecoder",90],[8,"DecimalType",599],[3,"DecimalArrayDecoder",102],[15,"i8"],[8,"OffsetSizeTrait",600],[3,"ListArrayDecoder",117],[3,"MapArrayDecoder",133],[3,"NullArrayDecoder",149],[8,"ArrowPrimitiveType",599],[8,"Parser",601],[3,"PrimitiveArrayDecoder",161],[4,"InferredType",178],[3,"Vec",602],[3,"String",603],[3,"IndexMap",604],[3,"Map",605],[8,"Debug",592],[3,"ValueIter",178],[3,"Fields",606],[15,"str"],[8,"Display",592],[3,"SerializerError",228],[3,"ObjectSerializer",228],[3,"ListSerializer",228],[4,"TapeElement",358],[3,"TapeSerializer",228],[15,"char"],[8,"Sized",607],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"u16"],[15,"u64"],[3,"StringArrayDecoder",325],[3,"StructArrayDecoder",341],[3,"BufIter",358],[8,"FnMut",608],[4,"DecoderState",358],[4,"Literal",358],[3,"TapeDecoder",358],[8,"ArrowTimestampType",599],[8,"TimeZone",609],[8,"Send",607],[3,"TimestampArrayDecoder",497],[8,"Array",610],[8,"Write",587],[8,"JsonFormat",512],[3,"Writer",512],[3,"LineDelimited",512],[3,"JsonArray",512],[6,"ArrayRef",610],[3,"StructArray",611],[8,"JsonSerializable",0],[8,"ParseJsonNumber",161],[6,"LineDelimitedWriter",512],[6,"ArrayWriter",512]]},\
"arrow_json_integration_test":{"doc":"","t":"DNNENMFLLLLLLFLLLLLLLLLLLLLLLLMLLLLMFFMLLLLLLLLLLFLMLL","n":["Args","ArrowToJson","JsonToArrow","Mode","Validate","arrow","arrow_to_json","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","canonicalize_schema","cast","cast","clone","clone_into","command","command_for_update","fmt","fmt","from","from","from_arg_matches","from_arg_matches_mut","from_cast","from_cast","from_ref","group_id","integration","into","into","into_request","into_request","json","json_to_arrow","main","mode","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","validate","value_variants","verbose","vzip","vzip"],"q":[[0,"arrow_json_integration_test"],[54,"arrow::error"],[55,"clap_builder::builder::command"],[56,"arrow_schema::schema"],[57,"core::fmt"],[58,"core::fmt"],[59,"clap_builder"],[60,"core::result"],[61,"clap_builder::util::id"],[62,"core::option"],[63,"tonic::request"],[64,"clap_builder::builder::possible_value"],[65,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,6,6,0,6,9,0,9,9,6,9,6,9,0,6,9,6,6,9,9,6,9,6,9,9,9,6,9,6,9,9,6,9,6,9,9,0,0,9,6,6,6,9,6,9,6,9,9,9,0,6,9,6,9],"f":[0,0,0,0,0,0,[[1,1,2],3],[4,4],[4,4],[[]],[[]],[[]],[[]],[5,5],[[]],[[]],[6,6],[[]],[[],4],[[],4],[[6,7],8],[[9,7],8],[[]],[[]],[10,[[12,[9,11]]]],[10,[[12,[9,11]]]],[[]],[[]],[[]],[[],[[14,[13]]]],0,[[]],[[]],[[],15],[[],15],0,[[1,1,2],3],[[],3],0,[[]],[6,[[14,[16]]]],[[],12],[[],12],[[],12],[[],12],[[],17],[[],17],[[9,10],[[12,[11]]]],[[9,10],[[12,[11]]]],[[1,1,2],3],[[],[[18,[6]]]],0,[[]],[[]]],"c":[],"p":[[15,"str"],[15,"bool"],[6,"Result",54],[3,"Command",55],[3,"Schema",56],[4,"Mode",0],[3,"Formatter",57],[6,"Result",57],[3,"Args",0],[3,"ArgMatches",58],[6,"Error",59],[4,"Result",60],[3,"Id",61],[4,"Option",62],[3,"Request",63],[3,"PossibleValue",64],[3,"TypeId",65],[15,"slice"]]},\
"arrow_ord":{"doc":"Arrow ordering kernels","t":"AAAAAINNNNQNNNNEFFFLLLLLFFFFLLLLFFLKKKFFFFFLLLLLLKGFFFFFDLLLLLFLLLLLLFFLLLLLFFFFDGDDLLLLLLLLLFLLLLLLMLMLLLLLLLLLLLLLLLFFLMMLFFFFFFFFFFFFFFFFFFFLLLLLLLLLLLLM","n":["cmp","ord","partition","rank","sort","ArrayOrd","Distinct","Equal","Greater","GreaterEqual","Item","Less","LessEqual","NotDistinct","NotEqual","Op","apply","apply_op","apply_op_vectored","borrow","borrow_mut","cast","clone","clone_into","collect_bool","compare_op","distinct","eq","fmt","fmt","from","from_cast","gt","gt_eq","into","is_eq","is_lt","len","lt","lt_eq","neq","not_distinct","take_bits","to_owned","to_string","try_from","try_into","type_id","value","value_unchecked","DynComparator","build_compare","compare_boolean","compare_bytes","compare_dict","compare_primitive","Partitions","borrow","borrow_mut","cast","clone","clone_into","find_boundaries","fmt","from","from_cast","into","is_empty","len","lexicographical_partition_ranges","partition","ranges","to_owned","try_from","try_into","type_id","bytes_rank","primitive_rank","rank","rank_impl","LexicographicalComparator","LexicographicalCompareItem","SortColumn","SortOptions","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","child_rank","clone","clone","clone_into","clone_into","cmp","compare","compare_items","default","descending","eq","equivalent","equivalent","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","hash","into","into","into","lexsort","lexsort_to_indices","not","nulls_first","options","partial_cmp","partial_sort","partition_validity","sort","sort_boolean","sort_bytes","sort_dictionary","sort_fixed_size_binary","sort_fixed_size_list","sort_impl","sort_limit","sort_list","sort_native_type","sort_primitive","sort_run","sort_run_downcasted","sort_run_inner","sort_run_to_indices","sort_to_indices","sort_unstable_by","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","values"],"q":[[0,"arrow_ord"],[5,"arrow_ord::cmp"],[50,"arrow_ord::ord"],[56,"arrow_ord::partition"],[76,"arrow_ord::rank"],[80,"arrow_ord::sort"],[156,"arrow_array::array::dictionary_array"],[157,"core::option"],[158,"arrow_buffer::buffer::boolean"],[159,"core::ops::function"],[160,"arrow_array::scalar"],[161,"arrow_array::array::boolean_array"],[162,"arrow_schema::error"],[163,"core::result"],[164,"core::fmt"],[165,"core::fmt"],[166,"core::any"],[167,"arrow_array::array"],[168,"core::iter::traits::iterator"],[169,"arrow_array::array"],[170,"alloc::vec"],[171,"arrow_array::types"],[172,"arrow_array::array::byte_array"],[173,"arrow_array::arithmetic"],[174,"arrow_buffer::buffer::null"],[175,"core::cmp"],[176,"core::fmt"],[177,"arrow_array::array::primitive_array"],[178,"core::ops::function"],[179,"arrow_array::array::fixed_size_list_array"],[180,"arrow_array::array::list_array"],[181,"arrow_array::array::list_array"]],"d":["Comparison kernels for <code>Array</code>s.","Contains functions and function factories to compare …","Defines partition kernel for <code>ArrayRef</code>","","Defines sort kernel for <code>ArrayRef</code>","","","","","","","","","","","","Perform a potentially vectored <code>op</code> on the provided <code>ArrayOrd</code>","Applies <code>op</code> to possibly scalar <code>ArrayOrd</code>","Applies <code>op</code> to possibly scalar <code>ArrayOrd</code> with the given …","","","","","","Invokes <code>f</code> with values <code>0..len</code> collecting the boolean …","Perform <code>op</code> on the provided <code>Datum</code>","Perform <code>left IS DISTINCT FROM right</code> operation on two <code>Datum</code>","Perform <code>left == right</code> operation on two <code>Datum</code>","","","Returns the argument unchanged.","","Perform <code>left &gt; right</code> operation on two <code>Datum</code>","Perform <code>left &gt;= right</code> operation on two <code>Datum</code>","Calls <code>U::from(self)</code>.","","","","Perform <code>left &lt; right</code> operation on two <code>Datum</code>","Perform <code>left &lt;= right</code> operation on two <code>Datum</code>","Perform <code>left != right</code> operation on two <code>Datum</code>","Perform <code>left IS NOT DISTINCT FROM right</code> operation on two …","Perform a take operation on <code>buffer</code> with the given …","","","","","","","Safety","Compare the values at two arbitrary indices in two arrays.","returns a comparison function that compares two values at …","","","","","A computed set of partitions, see <code>partition</code>","","","","","","Returns a mask with bits set whenever the value or …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns true if this contains no partitions","Returns the number of partitions","Given a list of already sorted columns, find partition …","Given a list of lexicographically sorted columns, computes …","Returns the range of each partition","","","","","","","Assigns a rank to each value in <code>array</code> based on its …","","A lexicographical comparator that wraps given array data …","","One column to be used in lexicographical sort","Options that define the sort order of a given column","","","","","","","","","","Computes the rank for a set of child values","","","","","","lexicographically compare values at the wrapped columns …","","","Whether to sort in descending order","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …","Sort elements lexicographically from a list of <code>ArrayRef</code> …","","Whether to sort nulls first","","","It’s unstable_sort, may not preserve the order of equal …","","Sort the <code>ArrayRef</code> using <code>SortOptions</code>.","","","","","","","Sort the <code>ArrayRef</code> partially.","","","","","","","","Sort elements from <code>ArrayRef</code> into an unsigned integer (…","we can only do this if the T is primitive","","","","","","","","","Create a new lex comparator that will wrap the given sort …","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,2,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,1,2,2,2,0,0,0,0,0,1,1,1,1,1,2,2,0,0,0,0,0,0,0,20,20,20,20,20,0,20,20,20,20,20,20,0,0,20,20,20,20,20,0,0,0,0,0,0,0,0,33,21,28,33,21,28,33,21,28,0,21,28,21,28,28,33,33,28,28,28,28,28,21,28,33,21,28,33,21,28,28,33,21,28,0,0,28,28,21,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,28,33,21,28,33,21,28,33,33,21,28,21],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,[5,[4]],2,3,[5,[4]]],[[5,[6]]]],[[2,[5,[7]],2,[5,[7]],3,8],6],[[2,[9,[7]],2,[9,[7]],3,8],6],[[]],[[]],[[]],[1,1],[[]],[[7,3,8],6],[[1,10,10],[[13,[11,12]]]],[[10,10],[[13,[11,12]]]],[[10,10],[[13,[11,12]]]],[[1,14],15],[[1,14],15],[[]],[[]],[[10,10],[[13,[11,12]]]],[[10,10],[[13,[11,12]]]],[[]],[[],3],[[],3],[[],7],[[10,10],[[13,[11,12]]]],[[10,10],[[13,[11,12]]]],[[10,10],[[13,[11,12]]]],[[10,10],[[13,[11,12]]]],[[4,6],6],[[]],[[],16],[[],13],[[],13],[[],17],[7],[7],0,[[18,18],[[13,[19,12]]]],[[18,18],19],[[18,18],19],[[18,18],[[13,[19,12]]]],[[18,18],19],0,[[]],[[]],[[]],[20,20],[[]],[18,[[13,[6,12]]]],[[20,14],15],[[]],[[]],[[]],[20,3],[20,7],[[[9,[21]]],[[13,[22,12]]]],[[[9,[23]]],[[13,[20,12]]]],[20,[[25,[[24,[7]]]]]],[[]],[[],13],[[],13],[[],17],[[[27,[26]],28],[[25,[29]]]],[[[9,[30]],[5,[31]],28],[[25,[29]]]],[[18,[5,[28]]],[[13,[[25,[29]],12]]]],[[7,25,28,8,8],[[25,[29]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[18,28],[[13,[[25,[29]],12]]]],[21,21],[28,28],[[]],[[]],[[28,28],32],[[33,7,7],32],0,[[],28],0,[[28,28],3],[[],3],[[],3],[[21,14],15],[[28,14],[[13,[34]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[28,35]],[[]],[[]],[[]],[[[9,[21]],[5,[7]]],[[13,[[25,[23]],12]]]],[[[9,[21]],[5,[7]]],[[13,[36,12]]]],[28,28],0,0,[[28,28],[[5,[32]]]],[[9,7,37]],[18],[[18,[5,[28]]],[[13,[23,12]]]],[[11,[25,[29]],[25,[29]],28,[5,[7]]],36],[[[27,[26]],[25,[29]],[25,[29]],28,[5,[7]]],36],[[[39,[38]],[25,[29]],[25,[29]],28,[5,[7]]],[[13,[36,12]]]],[[40,[25,[29]],[25,[29]],28,[5,[7]]],36],[[41,[25,[29]],[25,[29]],28,[5,[7]]],[[13,[36,12]]]],[[28,9,[9,[29]],[5,[7]],37],[[25,[29]]]],[[18,[5,[28]],[5,[7]]],[[13,[23,12]]]],[[[43,[42]],[25,[29]],[25,[29]],28,[5,[7]]],[[13,[36,12]]]],[[[45,[44]],[5,[28]]],[[13,[23,12]]]],[[[45,[44]],[25,[29]],[25,[29]],28,[5,[7]]],36],[[18,[5,[28]],[5,[7]]],[[13,[23,12]]]],[[18,[5,[28]],[5,[7]]],[[13,[23,12]]]],[[[47,[46]],[5,[28]],7,37]],[[18,28,[5,[7]]],36],[[18,[5,[28]],[5,[7]]],[[13,[36,12]]]],[[9,7,37]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[[9,[21]]],[[13,[33,12]]]],[[],17],[[],17],[[],17],0],"c":[69],"p":[[4,"Op",5],[8,"ArrayOrd",5],[15,"bool"],[8,"AnyDictionaryArray",156],[4,"Option",157],[3,"BooleanBuffer",158],[15,"usize"],[8,"Fn",159],[15,"slice"],[8,"Datum",160],[3,"BooleanArray",161],[4,"ArrowError",162],[4,"Result",163],[3,"Formatter",164],[6,"Result",164],[3,"String",165],[3,"TypeId",166],[8,"Array",167],[6,"DynComparator",50],[3,"Partitions",56],[3,"SortColumn",80],[8,"Iterator",168],[6,"ArrayRef",167],[3,"Range",169],[3,"Vec",170],[8,"ByteArrayType",171],[3,"GenericByteArray",172],[3,"SortOptions",80],[15,"u32"],[8,"ArrowNativeTypeOp",173],[3,"NullBuffer",174],[4,"Ordering",175],[3,"LexicographicalComparator",80],[3,"Error",164],[8,"Hasher",176],[6,"UInt32Array",177],[8,"FnMut",159],[8,"ArrowDictionaryKeyType",171],[3,"DictionaryArray",156],[3,"FixedSizeBinaryArray",178],[3,"FixedSizeListArray",179],[8,"OffsetSizeTrait",180],[3,"GenericListArray",180],[8,"ArrowPrimitiveType",171],[3,"PrimitiveArray",177],[8,"RunEndIndexType",171],[3,"RunArray",181]]},\
"arrow_row":{"doc":"A comparable row-oriented representation of a collection …","t":"ENNNNENNDDDDDDDDNNNNLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMMMMLLLMMMFOOALFLMLLLLLLLLLMMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLALLLLLLLFLMMLLLLLLMLLLFMLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMAFFFFFFOFFFSQIIKFFFFFFKFOOFKFDDDDDLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLMMLMLLLMLLLLLLLLLLLLLLLLLLLMMMFFFFFRRRRFFFFFFF","n":["Codec","Dictionary","Dictionary","DictionaryValues","DictionaryValues","Encoder","List","List","OwnedRow","Row","RowConfig","RowConverter","RowParser","Rows","RowsIter","SortField","Stateless","Stateless","Struct","Struct","append","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","codecs","config","config","config","config","convert_columns","convert_raw","convert_rows","data","data","data_type","decode_column","decode_dictionary_helper","decode_primitive_helper","dictionary","empty_rows","encode_column","encoder","end","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fields","fields","fixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","hash","hash","interner","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","iter","len","list","new","new","new","new","new_with_options","next","next_back","null_sentinel","num_rows","offsets","options","owned","parse","parser","partial_cmp","partial_cmp","preserve_dictionaries","preserve_dictionaries","push","row","row","row_lengths","rows","size","size","size","size","size_hint","start","supports_datatype","supports_fields","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_utf8","variable","compute_dictionary_mapping","decode_binary","decode_bool","decode_dictionary","decode_fixed","decode_primitive","decode_primitive_helper","decode_string","encode_dictionary","encode_dictionary_values","ENCODED_LEN","Encoded","FixedLengthEncoding","FromSlice","decode","decode_bool","decode_fixed","decode_fixed_size_binary","decode_nulls","decode_primitive","encode","encode","encode_fixed_size_binary","encode_signed","encode_unsigned","encoded_len","from_slice","split_off","Bucket","InternBuffer","Interned","OrderPreservingInterner","Slot","append","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","buffer_size","cast","cast","cast","cast","cast","child","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","hash","hasher","index","insert","insert","intern","into","into","into","into","into","keys","lookup","lookup","next","normalized_key","offsets","size","size","slot_child_bucket_size","slots","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","value","values","values","compute_lengths","decode","encode","encode_one","encoded_len","BLOCK_CONTINUATION","BLOCK_SIZE","EMPTY_SENTINEL","NON_EMPTY_SENTINEL","decode_binary","decode_string","decoded_len","encode","encode_one","encoded_len","padded_length"],"q":[[0,"arrow_row"],[211,"arrow_row::dictionary"],[221,"arrow_row::fixed"],[239,"arrow_row::interner"],[333,"arrow_row::list"],[338,"arrow_row::variable"],[349,"arrow_array::array"],[350,"arrow_schema::error"],[351,"core::result"],[352,"core::cmp"],[353,"alloc::vec"],[354,"core::iter::traits::collect"],[355,"arrow_array::array"],[356,"core::fmt"],[357,"core::fmt"],[358,"arrow_schema::datatype"],[359,"alloc::sync"],[360,"core::option"],[361,"core::any"],[362,"arrow_data::data"],[363,"arrow_array::types"],[364,"arrow_array::array::dictionary_array"],[365,"arrow_array::array::boolean_array"],[366,"arrow_array::array::fixed_size_binary_array"],[367,"arrow_array::types"],[368,"arrow_array::array::list_array"],[369,"arrow_array::array::list_array"],[370,"arrow_array::array::binary_array"],[371,"arrow_array::array::string_array"],[372,"core::iter::traits::iterator"]],"d":["","The interner used to encode dictionary values","The mapping from dictionary keys to normalized keys","A row converter for the dictionary values and the encoding …","The encoding of the child array and the encoding of a null …","","A row converter for the child field","The row encoding of the child array","Owned version of a <code>Row</code> that can be moved/cloned freely.","A comparable representation of a row.","The config of a given set of <code>Row</code>","Converts <code>ArrayRef</code> columns into a row-oriented format.","A <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …","A row-oriented representation of arrow data, that is …","An iterator over <code>Rows</code>","Configure the data type and sort order for a given column","No additional codec state is necessary","No additional encoder state is necessary","A row converter for the child fields and the encoding of a …","The row encoding of the child arrays and the encoding of a …","Convert <code>ArrayRef</code> columns appending to an existing <code>Rows</code>","","","","","","","","","","","","","","","","","","","","","","","Underlying row bytes","","","","","","","","","","","Sets the length of this <code>Rows</code> to 0","","","","","","","","","","","State for codecs","","The config for these rows","","","Convert <code>ArrayRef</code> columns into <code>Rows</code>","Convert raw bytes into <code>ArrayRef</code>","Convert <code>Rows</code> columns into <code>ArrayRef</code>","","","Data type","Decodes a the provided <code>field</code> from <code>rows</code>","","","","Returns an empty <code>Rows</code> with capacity for <code>row_capacity</code> rows …","Encodes a column to the provided <code>Rows</code> incrementing the …","","","","","","","","","","","","","The schema for these rows","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns an iterator over the <code>Row</code> in this <code>Rows</code>","","","Create a new <code>RowConverter</code> with the provided schema","","Create a new column with the given data type","","Create a new column with the given data type and …","","","Returns the null sentinel, negated if <code>invert</code> is true","Returns the number of <code>Row</code> in this <code>Rows</code>","Row <code>i</code> has data <code>&amp;buffer[offsets[i]..offsets[i+1]]</code>","Sort options","Create owned version of the row to detach it from the …","Creates a <code>Row</code> from the provided <code>bytes</code>.","Returns a <code>RowParser</code> that can be used to parse <code>Row</code> from …","","","By default dictionaries are preserved as described on …","Preserve dictionaries","Append a <code>Row</code> to this <code>Rows</code>","Returns the row at index <code>row</code>","Get borrowed <code>Row</code> from owned version.","Computes the length of each encoded <code>Rows</code> and returns an …","","Returns the size of this instance in bytes","","Return size of this instance in bytes.","Returns the size of this instance in bytes","","","","Check if the given fields are supported by the row format.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether to run UTF-8 validation when converting to arrow …","","Computes the dictionary mapping for the given dictionary …","Decodes a binary array from dictionary values","Decodes a boolean array from dictionary values","Decodes a string array from <code>rows</code> with the provided <code>options</code>","Decodes a fixed length type array from dictionary values","Decodes a <code>PrimitiveArray</code> from dictionary values","","Decodes a string array from dictionary values","Dictionary types are encoded as","Encode dictionary values not preserving the dictionary …","","","Encodes a value of a particular fixed width type into …","","","Decodes a <code>BooleanArray</code> from rows","Decodes a <code>ArrayData</code> from rows based on the provided …","Decodes a <code>FixedLengthBinary</code> from rows","Decodes a single byte from each row, interpreting <code>0x01</code> as …","Decodes a <code>PrimitiveArray</code> from rows","Fixed width types are encoded as","","","","","Returns the total encoded length (including null byte) for …","","Splits <code>len</code> bytes from <code>src</code>","Bucket is the root of the data-structure used to allocate …","A buffer of <code>[u8]</code> indexed by <code>[Interned]</code>","An interned value","A byte array interner that generates normalized keys that …","A slot corresponds to a single byte-value in the generated …","Appends the next value based on data written to <code>self.values</code>","","","","","","","","","","","Key allocation data structure","Returns the byte size of the associated buffers","","","","","","Child values less than <code>self.value</code> if any","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Insert <code>data</code> returning the corresponding <code>Interned</code>","Insert <code>data</code> into this bucket or one of its children, …","Interns an iterator of values returning a list of <code>Interned</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Provides a lookup from <code>Interned</code> to the normalized key","Converts a normalized key returned by <code>Self::normalized_key</code> …","","Bucket containing values larger than all of <code>slots</code>","Returns a null-terminated byte array that can be compared …","The ith value is <code>&amp;values[offsets[i]..offsets[i+1]]</code>","Returns the size of this instance in bytes including self","Returns the size of this instance in bytes","returns the total size of any recursively allocated <code>Bucket</code>s","","","","","","","","","","","","","","","","","","","","Returns the interned value for a given <code>Interned</code>","","Provides a lookup from <code>Interned</code> to the normalized value","Raw values","","Decodes a string array from <code>rows</code> with the provided <code>options</code>","Encodes the provided <code>GenericListArray</code> to <code>out</code> with the …","","","The continuation token","The block size of the variable length encoding","Indicates an empty string","Indicates a non-empty string","Decodes a binary array from <code>rows</code> with the provided <code>options</code>","Decodes a string array from <code>rows</code> with the provided <code>options</code>","Returns the number of bytes of encoded data","Variable length values are encoded as","","Returns the length of the encoded representation of a byte …","Returns the padded length of the encoded length of the …"],"i":[0,16,20,16,20,0,16,20,0,0,0,0,0,0,0,0,16,20,16,20,1,7,9,1,16,20,10,23,11,2,24,7,9,1,16,20,10,23,11,2,24,7,9,2,1,16,20,10,23,11,2,24,7,9,2,10,11,7,9,10,11,7,9,7,9,1,23,2,7,9,1,1,1,7,9,10,0,0,0,0,1,0,16,24,10,7,9,10,10,7,7,9,9,1,11,0,1,16,20,10,23,11,2,24,7,9,1,16,20,10,23,11,2,24,7,9,1,16,20,10,23,11,2,24,7,9,7,9,0,1,16,20,10,23,11,2,24,7,9,2,24,2,24,0,1,16,10,23,10,24,24,0,2,2,10,7,23,1,7,9,10,10,2,2,9,0,24,1,16,10,2,24,24,1,1,10,11,7,9,1,16,20,10,23,11,2,24,7,9,1,16,20,10,23,11,2,24,7,9,1,16,20,10,23,11,2,24,7,9,11,0,0,0,0,0,0,0,0,0,0,0,49,49,0,0,49,0,0,0,0,0,0,49,0,0,0,0,50,0,0,0,0,0,0,40,31,30,40,41,42,31,30,40,41,42,30,40,31,30,40,41,42,41,31,41,42,31,41,42,30,40,42,31,31,31,31,30,40,41,42,31,30,40,41,42,31,30,40,41,42,31,30,40,40,42,30,31,30,40,41,42,30,30,30,42,30,40,30,42,42,42,31,41,42,31,30,40,41,42,31,30,40,41,42,31,30,40,41,42,30,41,30,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,[4,[3]]],[[6,[5]]]],[7,[[4,[8]]]],[9,[[4,[8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[10,10],[11,11],[7,7],[9,9],[[]],[[]],[[]],[[]],[[7,7],12],[[9,9],12],0,0,0,0,0,[[1,[4,[3]]],[[6,[2,5]]]],[[1,[4,[[4,[8]]]],13],[[6,[[14,[3]],5]]]],[[1,15],[[6,[[14,[3]],5]]]],0,0,0,[[10,[4,[[4,[8]]]],16,13],[[6,[3,5]]]],0,0,0,[[1,17,17],2],[[[4,[8]],[4,[17]],18,19,20]],[[16,18],[[6,[20,5]]]],0,[[10,10],13],[[7,7],13],[[9,9],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,[[1,21],22],[[16,21],22],[[20,21],22],[[10,21],22],[[23,21],22],[[11,21],22],[[2,21],22],[[24,21],22],[[7,21],22],[[9,21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,25]],[[9,25]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[[]],[2,24],[24,17],0,[[[14,[10]]],[[6,[1,5]]]],[10,[[6,[16,5]]]],[26,10],[[[27,[[4,[10]]]]],23],[[26,19],10],[24,28],[24,28],[19,8],[2,17],0,0,[7,9],[[23,[4,[8]]],7],[1,23],[[7,7],[[28,[12]]]],[[9,9],[[28,[12]]]],[[10,13],10],0,[[2,7]],[[2,17],7],[9,7],[[[4,[3]],[4,[20]]],[[14,[17]]]],0,[1,17],[16,17],[10,17],[2,17],[24],0,[26,13],[[[4,[10]]],13],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,[[30,3],[[14,[[28,[31]]]]]],[[[4,[[4,[8]]]]],32],[[[4,[[4,[8]]]]],32],[[30,26,19,[4,[[4,[8]]]]],[[6,[[34,[33]],5]]]],[[[4,[[4,[8]]]],26],32],[[[4,[[4,[8]]]],26],32],0,[[[4,[[4,[8]]]]],32],[[[4,[8]],[4,[17]],[34,[33]],[4,[[28,[[4,[8]]]]]],19]],[[[4,[8]],[4,[17]],[34,[33]],2,7]],0,0,0,0,[[]],[[[4,[[4,[8]]]],19],35],[[[4,[[4,[8]]]],26,19],32],[[[4,[[4,[8]]]],36,19],37],[[[4,[[4,[8]]]]]],[[[4,[[4,[8]]]],26,19],[[39,[38]]]],[[[4,[8]],[4,[17]],15,19]],[[]],[[[4,[8]],[4,[17]],37,19]],0,0,[[[39,[38]]],17],[[[4,[8]],13]],[[[4,[8]],17],[[4,[8]]]],0,0,0,0,0,[40,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[40,17],[[]],[[]],[[]],[[]],[[]],0,[31,31],[41,41],[42,42],[[]],[[]],[[]],[[],30],[[],40],[[],42],[[31,31],13],[[],13],[[],13],[[31,21],22],[[30,21],22],[[40,21],22],[[41,21],22],[[42,21],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,25]],0,[[40,31]],[[40,[4,[8]]],31],[[42,40,[4,[8]],[14,[8]]]],[[30,15],[[14,[[28,[31]]]]]],[[]],[[]],[[]],[[]],[[]],0,[[30,[4,[8]]],[[28,[31]]]],0,0,[[30,31],[[4,[8]]]],0,[30,17],[42,17],[42,17],0,[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[30,31],[[4,[8]]]],0,0,0,[[[4,[17]],2,[44,[43]]]],[[1,[4,[[4,[8]]]],10,13],[[6,[[44,[43]],5]]]],[[[4,[8]],[4,[17]],2,19,[44,[43]]]],[[[4,[8]],[14,[8]],2,[28,[[45,[17]]]],19],17],[[2,[28,[[45,[17]]]]],17],0,0,0,0,[[[4,[[4,[8]]]],19],[[46,[43]]]],[[[4,[[4,[8]]]],19,13],[[47,[43]]]],[[[4,[8]],19],17],[[[4,[8]],[4,[17]],48,19]],[[[4,[8]],[28,[[4,[8]]]],19],17],[[[28,[[4,[8]]]]],17],[[[28,[17]]],17]],"c":[],"p":[[3,"RowConverter",0],[3,"Rows",0],[6,"ArrayRef",349],[15,"slice"],[4,"ArrowError",350],[4,"Result",351],[3,"Row",0],[15,"u8"],[3,"OwnedRow",0],[3,"SortField",0],[3,"RowConfig",0],[4,"Ordering",352],[15,"bool"],[3,"Vec",353],[8,"IntoIterator",354],[4,"Codec",0],[15,"usize"],[8,"Array",349],[3,"SortOptions",355],[4,"Encoder",0],[3,"Formatter",356],[6,"Result",356],[3,"RowParser",0],[3,"RowsIter",0],[8,"Hasher",357],[4,"DataType",358],[3,"Arc",359],[4,"Option",360],[3,"TypeId",361],[3,"OrderPreservingInterner",239],[3,"Interned",239],[3,"ArrayData",362],[8,"ArrowDictionaryKeyType",363],[3,"DictionaryArray",364],[3,"BooleanArray",365],[15,"i32"],[3,"FixedSizeBinaryArray",366],[8,"ArrowPrimitiveType",363],[3,"PrimitiveArray",367],[3,"InternBuffer",239],[3,"Slot",239],[3,"Bucket",239],[8,"OffsetSizeTrait",368],[3,"GenericListArray",368],[3,"Range",369],[6,"GenericBinaryArray",370],[6,"GenericStringArray",371],[8,"Iterator",372],[8,"FixedLengthEncoding",221],[8,"FromSlice",221]]},\
"arrow_schema":{"doc":"Arrow logical types","t":"ENNNNNNRRRRRENNNNNNNNNNNDGDNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNDDNGNDNNNNENNNNNNDENNMMLLLLLMALMMMLLAAAAMMLLLLMMMLMMLMMMMALLLLNNRRRRRENNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNENNNNNNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLDDDLLLLLLMMLMMLLLALMLLMLLFLLLLMMMLMLMMFLLLLLLLLLLLLLLLLLSDSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGLMLLLLLLLMLLMLMLLLLLLLLLLLMLMLLLLLLLLMLMMLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDGLMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLMLLLMLMLLLLLLLLLLLLLLL","n":["ArrowError","Binary","Boolean","CDataInterface","CastError","ComputeError","CsvError","DECIMAL128_MAX_PRECISION","DECIMAL128_MAX_SCALE","DECIMAL256_MAX_PRECISION","DECIMAL256_MAX_SCALE","DECIMAL_DEFAULT_SCALE","DataType","Date32","Date64","DayTime","Decimal128","Decimal256","Dense","Dictionary","DictionaryKeyOverflowError","DivideByZero","Duration","ExternalError","Field","FieldRef","Fields","FixedSizeBinary","FixedSizeList","Float16","Float32","Float64","Int16","Int32","Int64","Int8","Interval","IntervalUnit","InvalidArgumentError","IoError","IpcError","JsonError","LargeBinary","LargeList","LargeUtf8","List","Map","MemoryError","Microsecond","Millisecond","MonthDayNano","Nanosecond","NotYetImplemented","Null","ParquetError","ParseError","RunEndEncoded","RunEndIndexOverflowError","Schema","SchemaBuilder","SchemaError","SchemaRef","Second","SortOptions","Sparse","Struct","Time32","Time64","TimeUnit","Timestamp","UInt16","UInt32","UInt64","UInt8","Union","UnionFields","UnionMode","Utf8","YearMonth","alloc","alloc","borrow","borrow_mut","clone","clone_into","cmp","data_type","datatype","default","descending","dict_id","dict_is_ordered","eq","equivalent","error","ffi","field","fields","fields","fields","fmt","from","hash","into","metadata","metadata","name","not","nullable","nulls_first","partial_cmp","phantom","phantom","ptr","ptr","schema","to_owned","try_from","try_into","type_id","Binary","Boolean","DECIMAL128_MAX_PRECISION","DECIMAL128_MAX_SCALE","DECIMAL256_MAX_PRECISION","DECIMAL256_MAX_SCALE","DECIMAL_DEFAULT_SCALE","DataType","Date32","Date64","DayTime","Decimal128","Decimal256","Dense","Dictionary","Duration","FixedSizeBinary","FixedSizeList","Float16","Float32","Float64","Int16","Int32","Int64","Int8","Interval","IntervalUnit","LargeBinary","LargeList","LargeUtf8","List","Map","Microsecond","Millisecond","MonthDayNano","Nanosecond","Null","RunEndEncoded","Second","Sparse","Struct","Time32","Time64","TimeUnit","Timestamp","UInt16","UInt32","UInt64","UInt8","Union","UnionMode","Utf8","YearMonth","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","contains","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","equals_datatype","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","into","into","into","into","is_dictionary_key_type","is_floating","is_integer","is_nested","is_numeric","is_primitive","is_run_ends_type","is_signed_integer","is_temporal","is_unsigned_integer","new_list","partial_cmp","partial_cmp","partial_cmp","partial_cmp","primitive_width","serialize","serialize","serialize","serialize","size","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","ArrowError","CDataInterface","CastError","ComputeError","CsvError","DictionaryKeyOverflowError","DivideByZero","ExternalError","InvalidArgumentError","IoError","IpcError","JsonError","MemoryError","NotYetImplemented","ParquetError","ParseError","RunEndIndexOverflowError","SchemaError","borrow","borrow_mut","fmt","fmt","from","from","from","from","from_external_error","into","source","to_string","try_from","try_into","type_id","FFI_ArrowSchema","Flags","SchemaPrivateData","borrow","borrow","borrow_mut","borrow_mut","child","children","children","children","dictionary","dictionary","dictionary","dictionary_ordered","drop","empty","flags","flags","flags","fmt","format","format","from","from","get_format_string","into","into","map_keys_sorted","metadata","metadata","metadata","n_children","name","name","nullable","private_data","release","release_schema","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_new","type_id","type_id","with_flags","with_metadata","with_name","DICTIONARY_ORDERED","Flags","MAP_KEYS_SORTED","NULLABLE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow_mut","complement","contains","difference","empty","extend","fmt","fmt","fmt","fmt","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into_iter","is_all","is_empty","iter","iter_names","not","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_into","type_id","union","Field","FieldRef","_fields","alloc","borrow","borrow_mut","clone","clone_into","cmp","contains","data_type","data_type","deserialize","dict_id","dict_id","dict_is_ordered","dict_is_ordered","eq","equivalent","fields","fields_with_dict_id","fmt","fmt","from","hash","into","is_nullable","metadata","metadata","name","name","new","new_dict","new_dictionary","new_large_list","new_list","new_map","new_struct","new_union","nullable","partial_cmp","phantom","ptr","serialize","set_metadata","size","to_owned","to_string","try_from","try_from","try_into","try_merge","type_id","with_data_type","with_metadata","with_name","with_nullable","Fields","UnionFields","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","contains","default","deref","deserialize","deserialize","empty","empty","eq","eq","equivalent","equivalent","find","fmt","fmt","from","from","from","from","from","from","from_iter","from_iter","from_iter","hash","hash","into","into","into_iter","is_empty","iter","len","new","partial_cmp","partial_cmp","serialize","serialize","size","size","to_owned","to_owned","try_from","try_from","try_into","try_into","try_merge","type_id","type_id","Schema","SchemaBuilder","SchemaRef","all_fields","alloc","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","column_with_name","contains","default","deserialize","empty","eq","equivalent","extend","extend","field","field_with_name","fields","fields","fields","fields_with_dict_id","finish","fmt","fmt","fmt","from","from","from","from","hash","index_of","into","into","metadata","metadata","new","new","new_with_metadata","phantom","project","ptr","push","serialize","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_merge","try_merge","type_id","type_id","with_capacity","with_metadata"],"q":[[0,"arrow_schema"],[120,"arrow_schema::datatype"],[263,"arrow_schema::error"],[296,"arrow_schema::ffi"],[352,"arrow_schema::ffi::flags"],[403,"arrow_schema::field"],[460,"arrow_schema::fields"],[519,"arrow_schema::schema"],[580,"core::cmp"],[581,"core::fmt"],[582,"core::fmt"],[583,"core::option"],[584,"core::result"],[585,"core::any"],[586,"serde::de"],[587,"serde::ser"],[588,"alloc::string"],[589,"std::io::error"],[590,"std::io"],[591,"std::io::buffered"],[592,"alloc::string"],[593,"alloc::boxed"],[594,"core::iter::traits::iterator"],[595,"std::collections::hash::map"],[596,"alloc::vec"],[597,"core::iter::traits::collect"],[598,"bitflags::iter"],[599,"bitflags::iter"]],"d":["Many different operations in the <code>arrow</code> crate return this …","Opaque binary data of variable length.","A boolean datatype representing the values <code>true</code> and <code>false</code>.","Error during import or export to/from the C Data Interface","","","","The maximum precision for DataType::Decimal128 values","The maximum scale for DataType::Decimal128 values","The maximum precision for DataType::Decimal256 values","The maximum scale for DataType::Decimal256 values","The default scale for DataType::Decimal128 and …","The set of datatypes that are supported by this …","A 32-bit date representing the elapsed time since UNIX …","A 64-bit date representing the elapsed time since UNIX …","Indicates the number of elapsed days and milliseconds, …","Exact 128-bit width decimal value with precision and scale","Exact 256-bit width decimal value with precision and scale","","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","","","Measure of elapsed time in either seconds, milliseconds, …","","Describes a single column in a <code>Schema</code>.","A reference counted <code>Field</code>","A cheaply cloneable, owned slice of <code>FieldRef</code>","Opaque binary data of fixed size. Enum parameter specifies …","A list of some logical data type with fixed length.","A 16-bit floating point number.","A 32-bit floating point number.","A 64-bit floating point number.","A signed 16-bit integer.","A signed 32-bit integer.","A signed 64-bit integer.","A signed 8-bit integer.","A “calendar” interval which models types that don’t …","YEAR_MONTH, DAY_TIME, MONTH_DAY_NANO interval in SQL style.","","","","","Opaque binary data of variable length and 64-bit offsets.","A list of some logical data type with variable length and …","A variable-length string in Unicode with UFT-8 encoding …","A list of some logical data type with variable length.","A Map is a logical nested type that is represented as","","Time in microseconds.","Time in milliseconds.","A triple of the number of elapsed months, days, and …","Time in nanoseconds.","Returned when functionality is not yet available.","Null type","","","A run-end encoding (REE) is a variation of run-length …","","Describes the meta-data of an ordered sequence of relative …","A builder to facilitate building a <code>Schema</code> from iteratively …","","A reference-counted reference to a <code>Schema</code>.","Time in seconds.","Options that define the sort order of a given column","","A nested datatype that contains a number of sub-fields.","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","An absolute length of time in seconds, milliseconds, …","A timestamp with an optional timezone.","An unsigned 16-bit integer.","An unsigned 32-bit integer.","An unsigned 64-bit integer.","An unsigned 8-bit integer.","A nested datatype that can represent slots of differing …","A cheaply cloneable, owned collection of <code>FieldRef</code> and …","","A variable-length string in Unicode with UTF-8 encoding","Indicates the number of elapsed whole months, stored as …","","","","","","","","","","","Whether to sort in descending order","","","","","Defines <code>ArrowError</code> for representing failures in various …","Contains declarations to bind to the C Data Interface.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","A map of key-value pairs containing additional custom meta …","A map of key-value pairs containing additional meta data.","","","","Whether to sort nulls first","","","","","","","","","","","Opaque binary data of variable length.","A boolean datatype representing the values <code>true</code> and <code>false</code>.","The maximum precision for DataType::Decimal128 values","The maximum scale for DataType::Decimal128 values","The maximum precision for DataType::Decimal256 values","The maximum scale for DataType::Decimal256 values","The default scale for DataType::Decimal128 and …","The set of datatypes that are supported by this …","A 32-bit date representing the elapsed time since UNIX …","A 64-bit date representing the elapsed time since UNIX …","Indicates the number of elapsed days and milliseconds, …","Exact 128-bit width decimal value with precision and scale","Exact 256-bit width decimal value with precision and scale","","A dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …","Measure of elapsed time in either seconds, milliseconds, …","Opaque binary data of fixed size. Enum parameter specifies …","A list of some logical data type with fixed length.","A 16-bit floating point number.","A 32-bit floating point number.","A 64-bit floating point number.","A signed 16-bit integer.","A signed 32-bit integer.","A signed 64-bit integer.","A signed 8-bit integer.","A “calendar” interval which models types that don’t …","YEAR_MONTH, DAY_TIME, MONTH_DAY_NANO interval in SQL style.","Opaque binary data of variable length and 64-bit offsets.","A list of some logical data type with variable length and …","A variable-length string in Unicode with UFT-8 encoding …","A list of some logical data type with variable length.","A Map is a logical nested type that is represented as","Time in microseconds.","Time in milliseconds.","A triple of the number of elapsed months, days, and …","Time in nanoseconds.","Null type","A run-end encoding (REE) is a variation of run-length …","Time in seconds.","","A nested datatype that contains a number of sub-fields.","A 32-bit time representing the elapsed time since midnight …","A 64-bit time representing the elapsed time since midnight …","An absolute length of time in seconds, milliseconds, …","A timestamp with an optional timezone.","An unsigned 16-bit integer.","An unsigned 32-bit integer.","An unsigned 64-bit integer.","An unsigned 8-bit integer.","A nested datatype that can represent slots of differing …","","A variable-length string in Unicode with UTF-8 encoding","Indicates the number of elapsed whole months, stored as …","","","","","","","","","","","","","","","","","","","","","Check to see if <code>self</code> is a superset of <code>other</code>","","","","","","","","","Compares the datatype with another, ignoring nested field …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this type is valid as a dictionary key","Returns true if this type is floating: (Float*).","Returns true if this type is integer: (Int*, UInt*).","Returns true if this type is nested (List, FixedSizeList, …","Returns true if this type is numeric: (UInt*, Int*, Float*…","Returns true if the type is primitive: (numeric, temporal).","Returns true if this type is valid for run-ends array in …","Returns true if this type is signed integer: (Int*).","Returns true if this type is temporal: (Date*, Time*, …","Returns true if this type is unsigned integer: (UInt*).","Create a List DataType default name is “item”","","","","","Returns the bit width of this type if it is a primitive …","","","","","Return size of this instance in bytes.","","","","","","See CDataInterface docs","","","","","","","","","","","","","Many different operations in the <code>arrow</code> crate return this …","Error during import or export to/from the C Data Interface","","","","","","","","","","","","Returned when functionality is not yet available.","","","","","","","","","","","","Returns the argument unchanged.","Wraps an external error in an <code>ArrowError</code>.","Calls <code>U::from(self)</code>.","","","","","","ABI-compatible struct for <code>ArrowSchema</code> from C Data Interface","","","","","","","","","","","","","","","","","Workaround https://github.com/bitflags/bitflags/issues/356","","","","returns the format of this schema.","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","returns the name of this schema.","","","","","","","","","","","","See CDataInterface docs","","","","","create a new <code>FFI_ArrowSchema</code>. This fails if the fields’ …","","","","","","","","","","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Describes a single column in a <code>Schema</code>.","A reference counted <code>Field</code>","","","","","","","","Check to see if <code>self</code> is a superset of <code>other</code> field. …","Returns an immutable reference to the <code>Field</code>’s  <code>DataType</code>.","","","Returns the dictionary ID, if this is a dictionary type.","","Returns whether this <code>Field</code>’s dictionary is ordered, if …","","","","Returns a (flattened) <code>Vec</code> containing all child <code>Field</code>s …","Returns a vector containing all (potentially nested) <code>Field</code> …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Indicates whether this <code>Field</code> supports null values.","Returns the immutable reference to the <code>Field</code>’s optional …","A map of key-value pairs containing additional custom meta …","Returns an immutable reference to the <code>Field</code>’s name.","","Creates a new field","Creates a new field that has additional dictionary …","Create a new <code>Field</code> with <code>DataType::Dictionary</code>","Create a new <code>Field</code> with <code>DataType::LargeList</code>","Create a new <code>Field</code> with <code>DataType::List</code>","Create a new <code>Field</code> with <code>DataType::Map</code>","Create a new <code>Field</code> with <code>DataType::Struct</code>","Create a new <code>Field</code> with <code>DataType::Union</code>","","","","","","Sets the <code>Field</code>’s optional custom metadata.","Return size of this instance in bytes.","","","","","","Merge this field into self if it is compatible.","","Set <code>DataType</code> of the <code>Field</code> and returns self.","Sets the metadata of this <code>Field</code> to be <code>metadata</code> and returns …","Set the name of the <code>Field</code> and returns self.","Set <code>nullable</code> of the <code>Field</code> and returns self.","A cheaply cloneable, owned slice of <code>FieldRef</code>","A cheaply cloneable, owned collection of <code>FieldRef</code> and …","","","","","","","","","","","Check to see if <code>self</code> is a superset of <code>other</code>","","","","","Returns a new empty <code>Fields</code>","Create a new <code>UnionFields</code> with no fields","","","","","Searches for a field by name, returning it along with its …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if this is empty","Returns an iterator over the fields and type ids in this …","Returns the number of fields in this <code>UnionFields</code>","Create a new <code>UnionFields</code> from a <code>Fields</code> and array of …","","","","","Return size of this instance in bytes.","Return size of this instance in bytes.","","","","","","","Merge this field into self if it is compatible.","","","Describes the meta-data of an ordered sequence of relative …","A builder to facilitate building a <code>Schema</code> from iteratively …","A reference-counted reference to a <code>Schema</code>.","Returns a vector with references to all fields (including …","","","","","","","","Look up a column by name and return a immutable reference …","Check to see if <code>self</code> is a superset of <code>other</code> schema.","","","Creates an empty <code>Schema</code>","","","","","Returns an immutable reference of a specific <code>Field</code> …","Returns an immutable reference of a specific <code>Field</code> …","Returns an immutable reference of the vector of <code>Field</code> …","","","Returns a vector of immutable references to all <code>Field</code> …","Consume this <code>SchemaBuilder</code> yielding the final <code>Schema</code>","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Find the index of the column with the given name.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an immutable reference to the Map of custom …","A map of key-value pairs containing additional meta data.","Creates a new empty <code>SchemaBuilder</code>","Creates a new <code>Schema</code> from a sequence of <code>Field</code> values.","Creates a new <code>Schema</code> from a sequence of <code>Field</code> values and …","","Returns a new schema with only the specified columns in …","","Appends a <code>FieldRef</code> to this <code>SchemaBuilder</code> without checking …","","","","","","","","","Appends a <code>FieldRef</code> to this <code>SchemaBuilder</code> checking for …","Merge schema into self if it is compatible. Struct fields …","","","Creates a new empty <code>SchemaBuilder</code> with space for <code>capacity</code> …","Sets the metadata of this <code>Schema</code> to be <code>metadata</code> and …"],"i":[0,10,10,19,19,19,19,0,0,0,0,0,0,10,10,12,10,10,13,10,19,19,10,19,0,0,0,10,10,10,10,10,10,10,10,10,10,0,19,19,19,19,10,10,10,10,10,19,11,11,12,11,19,10,19,19,10,19,0,0,19,0,11,0,13,10,10,10,0,10,10,10,10,10,10,0,0,10,12,31,44,1,1,1,1,1,30,0,1,1,30,30,1,1,0,0,0,0,43,32,1,1,1,1,30,32,30,1,30,1,1,31,44,31,44,0,1,1,1,1,10,10,0,0,0,0,0,0,10,10,12,10,10,13,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,11,11,12,11,10,10,11,13,10,10,10,0,10,10,10,10,10,10,0,10,12,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,10,11,12,13,10,11,12,13,10,10,11,12,13,10,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,10,10,10,10,10,10,10,10,10,10,10,11,12,13,10,10,11,12,13,10,10,11,12,13,10,10,10,11,12,13,10,11,12,13,10,11,12,13,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,45,18,45,18,18,18,45,18,18,45,18,18,18,18,0,18,18,18,18,18,45,18,0,45,18,18,18,45,18,18,18,18,18,18,18,0,45,18,18,18,18,18,18,18,18,45,18,18,45,18,18,18,18,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,30,31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,39,40,39,40,39,40,39,40,39,40,39,39,39,39,40,39,40,39,40,39,40,39,39,40,39,39,39,39,39,40,39,39,40,39,40,39,40,39,40,40,40,40,39,40,39,40,39,40,39,40,39,40,39,40,40,39,40,0,0,0,32,44,43,32,43,32,32,32,32,32,43,32,32,32,32,43,43,32,32,32,43,32,32,43,43,32,32,43,43,43,32,32,32,43,32,32,32,43,32,32,44,32,44,43,32,32,32,43,32,32,43,32,43,32,43,32,43,32],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],0,0,[[],1],0,0,0,[[1,1],3],[[],3],0,0,0,0,0,0,[[1,4],5],[[]],[[1,6]],[[]],0,0,0,[1,1],0,0,[[1,1],[[7,[2]]]],0,0,0,0,0,[[]],[[],8],[[],8],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,10],[11,11],[12,12],[13,13],[[]],[[]],[[]],[[]],[[10,10],2],[[11,11],2],[[12,12],2],[[13,13],2],[[10,10],3],[14,[[8,[10]]]],[14,[[8,[11]]]],[14,[[8,[12]]]],[14,[[8,[13]]]],[[10,10],3],[[11,11],3],[[12,12],3],[[13,13],3],[[10,10],3],[[],3],[[],3],[[],3],[[],3],[[10,4],5],[[10,4],5],[[11,4],5],[[12,4],5],[[13,4],5],[[]],[[]],[[]],[[]],[[10,6]],[[11,6]],[[12,6]],[[13,6]],[[]],[[]],[[]],[[]],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[[10,3],10],[[10,10],[[7,[2]]]],[[11,11],[[7,[2]]]],[[12,12],[[7,[2]]]],[[13,13],[[7,[2]]]],[10,[[7,[15]]]],[[10,16],8],[[11,16],8],[[12,16],8],[[13,16],8],[10,15],[[]],[[]],[[]],[[]],[[],17],[18,[[8,[10,19]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[19,4],5],[[19,4],5],[20,19],[[[22,[21]]],19],[23,19],[[]],[[[25,[24]]],19],[[]],[19,[[7,[24]]]],[[],17],[[],8],[[],8],[[],9],0,0,0,[[]],[[]],[[]],[[]],[[18,15],18],[18,26],0,0,[18,[[7,[18]]]],0,0,[18,3],[18],[[],18],0,[18,[[7,[27]]]],0,[[18,4],5],[18,28],0,[[]],[[]],[10,[[8,[17,19]]]],[[]],[[]],[18,3],[18,[[8,[[29,[17,17]],19]]]],0,0,0,[18,28],0,[18,3],0,0,[18],[[],8],[[],8],[10,[[8,[18,19]]]],[30,[[8,[18,19]]]],[31,[[8,[18]]]],[32,[[8,[18,19]]]],[10,[[8,[18,19]]]],[32,[[8,[18,19]]]],[30,[[8,[18,19]]]],[[],8],[[],8],[[28,[33,[18]],[7,[18]]],[[8,[18,19]]]],[[],9],[[],9],[[18,27],[[8,[18,19]]]],[[18,34],[[8,[18,19]]]],[[18,28],[[8,[18,19]]]],0,0,0,0,[[],27],[[27,27],27],[[27,27]],[[27,27],27],[[27,27]],[27,35],[27,35],[[27,27],27],[[27,27]],[[]],[[]],[27,27],[[27,27],3],[[27,27],27],[[],27],[[27,34]],[[27,4],5],[[27,4],5],[[27,4],5],[[27,4],5],[[]],[35,[[7,[27]]]],[35,27],[35,27],[35,27],[34,27],[28,[[7,[27]]]],[[27,27]],[[27,27],27],[[27,27],3],[[]],[27],[27,3],[27,3],[27,[[36,[27]]]],[27,[[37,[27]]]],[27,27],[[27,27]],[[27,27,3]],[[27,27],27],[[27,27]],[[27,27],27],[[27,27]],[[],8],[[],8],[[],9],[[27,27],27],0,0,[10,[[33,[30]]]],0,[[]],[[]],[30,30],[[]],[[30,30],2],[[30,30],3],[30,10],0,[14,[[8,[30]]]],[30,[[7,[35]]]],0,[30,[[7,[3]]]],0,[[30,30],3],[[],3],[30,[[33,[30]]]],[[30,35],[[33,[30]]]],[[30,4],5],[[30,4],5],[[]],[[30,6]],[[]],[30,3],[30,[[29,[17,17]]]],0,[30,17],0,[[[38,[17]],10,3],30],[[[38,[17]],10,3,35,3],30],[[[38,[17]],10,10,3],30],[[[38,[17]],[38,[31]],3],30],[[[38,[17]],[38,[31]],3],30],[[[38,[17]],[38,[17]],[38,[31]],[38,[31]],3,3],30],[[[38,[17]],[38,[39]],3],30],[[[38,[17]],34,34,13],30],0,[[30,30],[[7,[2]]]],0,0,[[30,16],8],[[30,[29,[17,17]]]],[30,15],[[]],[[],17],[18,[[8,[30,19]]]],[[],8],[[],8],[[30,30],[[8,[19]]]],[[],9],[[30,10],30],[[30,[29,[17,17]]],30],[[30,[38,[17]]],30],[[30,3],30],0,0,[[]],[[]],[[]],[[]],[39,39],[40,40],[[]],[[]],[[39,39],2],[[40,40],2],[[39,39],3],[[],39],[39],[14,[[8,[39]]]],[14,[[8,[40]]]],[[],39],[[],40],[[39,39],3],[[40,40],3],[[],3],[[],3],[[39,28],7],[[39,4],5],[[40,4],5],[[[41,[31]]],39],[[[33,[30]]],39],[[[33,[31]]],39],[[[42,[31]]],39],[[]],[[]],[34,39],[34,39],[34,40],[[39,6]],[[40,6]],[[]],[[]],[39],[40,3],[40,26],[40,15],[[34,34],40],[[39,39],[[7,[2]]]],[[40,40],[[7,[2]]]],[[39,16],8],[[40,16],8],[39,15],[40,15],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[40,40],[[8,[19]]]],[[],9],[[],9],0,0,0,[32,[[33,[30]]]],0,[[]],[[]],[[]],[[]],[32,32],[[]],[[32,28],7],[[32,32],3],[[],43],[14,[[8,[32]]]],[[],32],[[32,32],3],[[],3],[[43,34]],[[43,34]],[[32,15],30],[[32,28],[[8,[30,19]]]],[32,39],0,0,[[32,35],[[33,[30]]]],[43,32],[[43,4],5],[[32,4],5],[[32,4],5],[[]],[39,43],[39,43],[[]],[[32,6]],[[32,28],[[8,[15,19]]]],[[]],[[]],[32,[[29,[17,17]]]],0,[[],43],[[[38,[39]]],32],[[[38,[39]],[29,[17,17]]],32],0,[[32,[41,[15]]],[[8,[32,19]]]],0,[[43,[38,[31]]]],[[32,16],8],[[]],[[],17],[[],8],[18,[[8,[32,19]]]],[[],8],[[],8],[[],8],[[43,31],[[8,[19]]]],[34,[[8,[32,19]]]],[[],9],[[],9],[15,43],[[32,[29,[17,17]]],32]],"c":[],"p":[[3,"SortOptions",0],[4,"Ordering",580],[15,"bool"],[3,"Formatter",581],[6,"Result",581],[8,"Hasher",582],[4,"Option",583],[4,"Result",584],[3,"TypeId",585],[4,"DataType",120],[4,"TimeUnit",120],[4,"IntervalUnit",120],[4,"UnionMode",120],[8,"Deserializer",586],[15,"usize"],[8,"Serializer",587],[3,"String",588],[3,"FFI_ArrowSchema",296],[4,"ArrowError",263],[3,"Error",589],[8,"Write",590],[3,"IntoInnerError",591],[3,"FromUtf8Error",588],[8,"Error",592],[3,"Box",593],[8,"Iterator",594],[3,"Flags",352],[15,"str"],[3,"HashMap",595],[3,"Field",403],[6,"FieldRef",403],[3,"Schema",519],[3,"Vec",596],[8,"IntoIterator",597],[15,"i64"],[3,"Iter",598],[3,"IterNames",598],[8,"Into",599],[3,"Fields",460],[3,"UnionFields",460],[15,"slice"],[15,"array"],[3,"SchemaBuilder",519],[6,"SchemaRef",519],[3,"SchemaPrivateData",296]]},\
"arrow_select":{"doc":"Arrow selection kernels","t":"AAAAAAAAFFFFFODDGLLLLMFLLFLLLLFLLLMFFLMFMLLLLLLMNRGDDDDNNENNDNLLLLLLLLLLLLLFLLLLLLLMMMLMMLLFLMMFFFFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLFMLMMMMLLLLLLLLLLLLLLLLLLDMLLLOLLFFFFFLLMOLLLFQDILLLFMLLLLLLLFFFFFFFFFFFFFFFFKOOOLLLLFF","n":["concat","dictionary","filter","interleave","nullif","take","window","zip","binary_capacity","concat","concat_batches","concat_dictionaries","concat_fallback","dict_helper","Interner","MergedDictionaries","PtrEq","borrow","borrow","borrow_mut","borrow_mut","buckets","bytes_ptr_eq","cast","cast","compute_values_mask","from","from","from_cast","from_cast","get_masked_values","intern","into","into","key_mappings","masked_bytes","merge_dictionary_values","new","shift","should_merge_dictionary_values","state","try_from","try_from","try_into","try_into","type_id","type_id","values","All","FILTER_SLICES_SELECTIVITY_THRESHOLD","Filter","FilterBuilder","FilterBytes","FilterPredicate","IndexIterator","IndexIterator","Indices","IterationStrategy","None","Slices","SlicesIterator","SlicesIterator","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_filter","cast","cast","cast","cast","cast","cast","count","count","count","cur_offset","default_strategy","dst_offsets","dst_values","extend_idx","extend_slices","filter","filter","filter","filter","filter_array","filter_bits","filter_boolean","filter_bytes","filter_count","filter_dict","filter_null_mask","filter_primitive","filter_record_batch","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get_value_offset","get_value_range","into","into","into","into","into","into","into_iter","into_iter","iter","new","new","new","new","next","next","optimize","prep_null_mask_filter","remaining","size_hint","src_offsets","src_values","strategy","strategy","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Interleave","arrays","borrow","borrow_mut","cast","dict_helper","from","from_cast","interleave","interleave_bytes","interleave_dictionaries","interleave_fallback","interleave_primitive","into","new","nulls","primitive_helper","try_from","try_into","type_id","nullif","T","TakeOptions","ToIndices","borrow","borrow_mut","cast","check_bounds","check_bounds","clone","clone_into","default","fmt","from","from_cast","into","maybe_usize","take","take_bits","take_boolean","take_bytes","take_dict","take_fixed_size_binary","take_fixed_size_list","take_impl","take_list","take_native","take_nulls","take_primitive","take_run","take_value_indices_from_fixed_size_list","take_value_indices_from_list","to_indices","to_indices_identity","to_indices_reinterpret","to_indices_widening","to_owned","try_from","try_into","type_id","shift","zip"],"q":[[0,"arrow_select"],[8,"arrow_select::concat"],[14,"arrow_select::dictionary"],[48,"arrow_select::filter"],[163,"arrow_select::interleave"],[183,"arrow_select::nullif"],[184,"arrow_select::take"],[223,"arrow_select::window"],[224,"arrow_select::zip"],[225,"arrow_array::array"],[226,"arrow_data::transform"],[227,"arrow_array::array"],[228,"core::result"],[229,"arrow_schema::schema"],[230,"core::iter::traits::collect"],[231,"arrow_array::record_batch"],[232,"arrow_buffer::native"],[233,"arrow_buffer::buffer::scalar"],[234,"arrow_buffer::buffer::boolean"],[235,"core::option"],[236,"alloc::vec"],[237,"core::ops::function"],[238,"arrow_array::types"],[239,"arrow_array::array::byte_array"],[240,"arrow_array::types"],[241,"core::any"],[242,"arrow_array::array::boolean_array"],[243,"arrow_array::array::list_array"],[244,"core::iter::traits::iterator"],[245,"arrow_buffer::buffer::immutable"],[246,"arrow_buffer::buffer::null"],[247,"arrow_array::types"],[248,"core::fmt"],[249,"core::fmt"],[250,"arrow_array::array::fixed_size_binary_array"],[251,"arrow_array::array::fixed_size_list_array"],[252,"arrow_array::array::list_array"],[253,"arrow_array::types"]],"d":["Defines concat kernel for <code>ArrayRef</code>","","Defines filter kernels","","","Defines take kernel for Array","Defines windowing functions, like <code>shift</code>ing","","","Concatenate multiple Array of the same type into a single …","Concatenates <code>batches</code> together into a single <code>RecordBatch</code>.","","Concatenates arrays using MutableArrayData","","A best effort interner that maintains a fixed number of …","","A type-erased function that compares two array for pointer …","","","","","","Performs a cheap, pointer-based comparison of two byte …","","","Return a mask identifying the values that are referenced …","Returns the argument unchanged.","Returns the argument unchanged.","","","Return a Vec containing for each set index in <code>mask</code>, the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Provides <code>key_mappings[</code>array_idx<code>][</code>old_key<code>] -&gt; new_key</code>","Compute <code>get_masked_values</code> for a <code>GenericByteArray</code>","Given an array of dictionaries and an optional key mask …","Capacity controls the number of unique buckets allocated …","","A weak heuristic of whether to merge dictionary values …","","","","","","","","The new values","Select all rows","If the filter selects more than this fraction of rows, use …","Function that can filter arbitrary arrays","A builder to construct <code>FilterPredicate</code>","<code>FilterBytes</code> is created from a source <code>GenericByteArray</code> and …","A filtering predicate that can be applied to an <code>Array</code>","An iterator of <code>usize</code> whose index in <code>BooleanArray</code> is true","A lazily evaluated iterator of indices","A precomputed list of indices","The iteration strategy used to evaluate <code>FilterPredicate</code>","Select no rows","A precomputed array of ranges","An iterator of <code>(usize, usize)</code> each representing an interval","A lazily evaluated iterator of ranges","","","","","","","","","","","","","Construct the final <code>FilterPredicate</code>","Returns a prepared function optimized to filter multiple …","","","","","","","Number of rows being selected based on this <code>FilterPredicate</code>","","","","The default <code>IterationStrategy</code> for a filter of length …","","","Extends the in-progress array by the indexes in the …","Extends the in-progress array by the ranges in the …","Filters an Array, returning elements matching the filter …","Selects rows from <code>values</code> based on this <code>FilterPredicate</code>","","","","Filter the packed bitmask <code>buffer</code>, with <code>predicate</code> starting …","<code>filter</code> implementation for boolean buffers","<code>filter</code> implementation for byte arrays","Counts the number of set bits in <code>filter</code>","<code>filter</code> implementation for dictionaries","Computes a new null mask for <code>data</code> based on <code>predicate</code>","<code>filter</code> implementation for primitive arrays","Returns a new RecordBatch with arrays containing only …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the byte offset at <code>idx</code>","Returns the start and end of the value at index <code>idx</code> along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Create a new <code>FilterBuilder</code> that can be used to construct a …","","","Compute an optimised representation of the provided <code>filter</code> …","Remove null values by do a bitmask AND operation with null …","","","","","","","","","","","","","","","","","","","","","","","","","Common functionality for interleaving arrays","The input arrays downcast to T","","","","","Returns the argument unchanged.","","Takes elements by index from a list of <code>Array</code>, creating a …","","","Fallback implementation of interleave using …","","Calls <code>U::from(self)</code>.","","The null buffer of the interleaved output","","","","","Copies original array, setting validity bit to false if a …","","Options that define how <code>take</code> should behave","To avoid generating take implementations for every index …","","","","Verifies that the non-null values of <code>indices</code> are all <code>&lt; len</code>","Perform bounds check before taking indices from values. If …","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Take elements by index from Array, creating a new Array …","","<code>take</code> implementation for boolean arrays","<code>take</code> implementation for string arrays","<code>take</code> implementation for dictionary arrays","","<code>take</code> implementation for <code>FixedSizeListArray</code>","","<code>take</code> implementation for list arrays","","","<code>take</code> implementation for all primitive arrays","<code>take</code> implementation for run arrays","Takes/filters a fixed size list array’s inner data using …","Takes/filters a list array’s inner data using the …","","","","","","","","","Shifts array by defined number of items (to left or right) …","Zip two arrays by some boolean mask. Where the mask …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,23,16,23,16,0,16,23,0,16,23,16,23,0,16,16,23,23,0,0,16,16,0,16,16,23,16,23,16,23,23,30,0,0,0,0,0,0,30,30,0,30,30,0,30,41,32,38,26,30,27,41,32,38,26,30,27,26,0,41,32,38,26,30,27,27,26,27,32,30,32,32,32,32,0,27,26,27,0,0,0,0,0,0,0,0,0,38,26,30,27,41,32,38,26,30,27,41,32,38,26,30,27,32,32,41,32,38,26,30,27,41,38,41,41,32,38,26,41,38,26,0,41,41,32,32,26,27,41,32,38,26,30,27,41,32,38,26,30,27,41,32,38,26,30,27,0,43,43,43,43,0,43,43,0,0,0,0,0,43,43,43,0,43,43,43,0,53,0,0,44,44,44,0,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,44,44,44,44,0,0],"f":[0,0,0,0,0,0,0,0,[[[2,[1]]],3],[[[2,[1]]],[[6,[4,5]]]],[[7,8],[[6,[9,5]]]],[[[2,[1]]],[[6,[4,5]]]],[[[2,[1]],3],[[6,[4,5]]]],0,0,0,0,[[]],[[]],[[]],[[]],0,[[1,1],10],[[]],[[]],[[[12,[11]],[14,[13]]],13],[[]],[[]],[[]],[[]],[[1,13],15],[[16,[2,[17]],18],6],[[]],[[]],0,[[[20,[19]],13],15],[[[2,[[22,[21]]]],[14,[[2,[13]]]]],[[6,[[23,[21]],5]]]],[24,16],0,[[[2,[[22,[21]]]],24],10],0,[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,27],[28,[[6,[29,5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[27,24],0,0,0,[[24,24],30],0,0,[[[32,[31]],33]],[[[32,[31]],33]],[[1,28],[[6,[4,5]]]],[[27,1],[[6,[4,5]]]],0,0,[[1,27],[[6,[4,5]]]],[[13,27],34],[[28,27],28],[[[20,[19]],27],[[20,[19]]]],[28,24],[[[22,[21]],27],[[22,[21]]]],[[[14,[35]],27],14],[[[37,[36]],27],[[37,[36]]]],[[9,28],[[6,[9,5]]]],[[38,39],40],[[26,39],40],[[30,39],40],[[27,39],40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[32,[31]],24],24],[[[32,[31]],24]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[28,24],41],[[24,[20,[19]]],[[32,[31]]]],[28,38],[28,26],[41,14],[38,14],[26,26],[28,28],0,[41],0,0,0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,[[]],[[]],[[]],0,[[]],[[]],[[[2,[1]],2],[[6,[4,5]]]],[[[2,[1]],2],[[6,[4,5]]]],[[[2,[1]],2],[[6,[4,5]]]],[[[2,[1]],2],[[6,[4,5]]]],[[[2,[1]],2,42],[[6,[4,5]]]],[[]],[[[2,[1]],2],[[43,[1]]]],0,0,[[],6],[[],6],[[],25],[[1,28],[[6,[4,5]]]],0,0,0,[[]],[[]],[[]],[[24,[37,[36]]],[[6,[5]]]],0,[44,44],[[]],[[],44],[[44,39],40],[[]],[[]],[[]],[11,[[6,[24,5]]]],[[1,1,[14,[44]]],[[6,[4,5]]]],[[13,[37,[36]]],13],[[28,[37,[36]]],28],[[[20,[19]],[37,[36]]],[[6,[[20,[19]],5]]]],[[[22,[21]],[37,[36]]],[[6,[[22,[21]],5]]]],[[45,[37,[36]],46],[[6,[45,5]]]],[[47,[37,[36]]],[[6,[47,5]]]],[[1,[37,[36]]],[[6,[4,5]]]],[[48,[37,[36]]],[[6,[48,5]]]],[[[2,[11]],[37,[36]]],[[12,[11]]]],[[[14,[35]],[37,[36]]],[[14,[35]]]],[[[37,[36]],[37,[36]]],[[6,[[37,[36]],5]]]],[[[50,[49]],[37,[36]]],[[6,[[50,[49]],5]]]],[[47,[37,[36]]],[[6,[[37,[51]],5]]]],[[48,[37,[36]]],[[6,[5]]]],[[],37],0,0,0,[[]],[[],6],[[],6],[[],25],[[1,52],[[6,[4,5]]]],[[28,1,1],[[6,[4,5]]]]],"c":[50,75],"p":[[8,"Array",225],[15,"slice"],[4,"Capacities",226],[6,"ArrayRef",225],[4,"ArrowError",227],[4,"Result",228],[6,"SchemaRef",229],[8,"IntoIterator",230],[3,"RecordBatch",231],[15,"bool"],[8,"ArrowNativeType",232],[3,"ScalarBuffer",233],[3,"BooleanBuffer",234],[4,"Option",235],[3,"Vec",236],[3,"Interner",14],[15,"u8"],[8,"FnOnce",237],[8,"ByteArrayType",238],[3,"GenericByteArray",239],[8,"ArrowDictionaryKeyType",238],[3,"DictionaryArray",240],[3,"MergedDictionaries",14],[15,"usize"],[3,"TypeId",241],[3,"FilterBuilder",48],[3,"FilterPredicate",48],[3,"BooleanArray",242],[6,"Filter",48],[4,"IterationStrategy",48],[8,"OffsetSizeTrait",243],[3,"FilterBytes",48],[8,"Iterator",244],[3,"Buffer",245],[3,"NullBuffer",246],[8,"ArrowPrimitiveType",238],[3,"PrimitiveArray",247],[3,"SlicesIterator",48],[3,"Formatter",248],[6,"Result",248],[3,"IndexIterator",48],[4,"DataType",249],[3,"Interleave",163],[3,"TakeOptions",184],[3,"FixedSizeBinaryArray",250],[15,"i32"],[3,"FixedSizeListArray",251],[3,"GenericListArray",243],[8,"RunEndIndexType",238],[3,"RunArray",252],[3,"UInt32Type",238],[15,"i64"],[8,"ToIndices",184]]},\
"arrow_stream_to_file":{"doc":"","t":"F","n":["main"],"q":[[0,"arrow_stream_to_file"],[1,"arrow::error"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result",1]]},\
"arrow_string":{"doc":"Arrow string kernels","t":"AAAAAAFFFFFFFFFNNNNENFFLLLFFLLLLFLOFFFFFFFFLLLLFNNNNNNENNLLLFLLLLLLFLFFLLLFFFFFFFF","n":["concat_elements","length","like","predicate","regexp","substring","concat_element_binary","concat_elements_bytes","concat_elements_dyn","concat_elements_utf8","concat_elements_utf8_many","bit_length","bit_length_impl","length","length_impl","Contains","EndsWith","ILike","Like","Op","StartsWith","apply","binary_predicate","borrow","borrow_mut","cast","contains","ends_with","fmt","fmt","from","from_cast","ilike","into","legacy_kernels","like","like_op","make_scalar","nilike","nlike","op_binary","op_scalar","starts_with","to_string","try_from","try_into","type_id","vectored_iter","Contains","EndsWith","Eq","IEndsWithAscii","IEqAscii","IStartsWithAscii","Predicate","Regex","StartsWith","borrow","borrow_mut","cast","ends_with_ignore_ascii_case","evaluate","evaluate_array","from","from_cast","ilike","into","is_like_pattern","like","regex_like","starts_with_ignore_ascii_case","try_from","try_into","type_id","regexp_is_match_utf8","regexp_is_match_utf8_scalar","regexp_match","byte_substring","fixed_size_binary_substring","get_start_end_offset","substring","substring_by_char"],"q":[[0,"arrow_string"],[6,"arrow_string::concat_elements"],[11,"arrow_string::length"],[15,"arrow_string::like"],[48,"arrow_string::predicate"],[74,"arrow_string::regexp"],[77,"arrow_string::substring"],[82,"arrow_array::array::list_array"],[83,"arrow_array::array::binary_array"],[84,"arrow_schema::error"],[85,"core::result"],[86,"arrow_array::types"],[87,"arrow_array::array::byte_array"],[88,"arrow_array::array"],[89,"arrow_array::array"],[90,"arrow_buffer::buffer::offset"],[91,"arrow_buffer::buffer::null"],[92,"core::option"],[93,"arrow_array::array::dictionary_array"],[94,"arrow_array::array::boolean_array"],[95,"core::iter::traits::iterator"],[96,"core::ops::function"],[97,"arrow_array::scalar"],[98,"core::fmt"],[99,"core::fmt"],[100,"alloc::string"],[101,"core::any"],[102,"regex::regex::string"],[103,"arrow_array::array::fixed_size_binary_array"]],"d":["","Defines kernel for length of string arrays and binary …","","","Defines kernel to extract substrings based on a regular …","Defines kernel to extract a substring of an Array …","Returns the elementwise concatenation of a …","Returns the elementwise concatenation of a <code>GenericByteArray</code>…","","Returns the elementwise concatenation of a …","Returns the elementwise concatenation of <code>StringArray</code>.","Returns an array of Int32/Int64 denoting the number of …","","Returns an array of Int32/Int64 denoting the length of …","","","","","","","","","","","","","Perform SQL <code>CONTAINS(left, right)</code>","Perform SQL <code>ENDSWITH(left, right)</code>","","","Returns the argument unchanged.","","Perform SQL <code>left ILIKE right</code>","Calls <code>U::from(self)</code>.","","Perform SQL <code>left LIKE right</code>","","","Perform SQL <code>left NOT ILIKE right</code>","Perform SQL <code>left NOT LIKE right</code>","","","Perform SQL <code>STARTSWITH(left, right)</code>","","","","","","","","","Ends with ignoring ASCII case","Equality ignoring ASCII case","Starts with ignoring ASCII case","A string based predicate","","","","","","","Evaluate this predicate against the given haystack","Evaluate this predicate against the elements of <code>array</code>","Returns the argument unchanged.","","Create a predicate for the given ilike pattern","Calls <code>U::from(self)</code>.","","Create a predicate for the given like pattern","Transforms a like <code>pattern</code> to a regex compatible pattern. …","","","","","Perform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …","Perform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …","Extract all groups matched by a regular expression for a …","","","<code>val</code> - string<code>start</code> - the start char index of the substring…","Returns an <code>ArrayRef</code> with substrings of all the elements in …","Arguments"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,0,14,0,0,14,14,14,0,0,14,14,14,14,0,14,0,0,0,0,0,0,0,0,0,14,14,14,14,0,27,27,27,27,27,27,0,27,27,27,27,27,0,27,27,27,27,27,27,0,27,0,0,27,27,27,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,[[[2,[1]],[2,[1]]],[[4,[[2,[1]],3]]]],[[[6,[5]],[6,[5]]],[[4,[[6,[5]],3]]]],[[7,7],[[4,[8,3]]]],[[[9,[1]],[9,[1]]],[[4,[[9,[1]],3]]]],[[[10,[[9,[1]]]]],[[4,[[9,[1]],3]]]],[7,[[4,[8,3]]]],[[11,[13,[12]]],8],[7,[[4,[8,3]]]],[[11,[13,[12]]],8],0,0,0,0,0,0,[[14,[9,[1]],15,[13,[16]],[9,[1]],15,[13,[16]]],[[4,[17,3]]]],[[18,18,15,19],[[4,[17,3]]]],[[]],[[]],[[]],[[20,20],[[4,[17,3]]]],[[20,20],[[4,[17,3]]]],[[14,21],22],[[14,21],22],[[]],[[]],[[20,20],[[4,[17,3]]]],[[]],0,[[20,20],[[4,[17,3]]]],[[14,20,20],[[4,[17,3]]]],[[23,24],[[4,[8,3]]]],[[20,20],[[4,[17,3]]]],[[20,20],[[4,[17,3]]]],[[14,18,18],[[4,[17,3]]]],[[14,[9,[1]],[13,[16]],24],[[4,[17,3]]]],[[20,20],[[4,[17,3]]]],[[],25],[[],4],[[],4],[[],26],[[[9,[1]],16],18],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[24,24],15],[[27,24],15],[[27,[9,[1]],15],17],[[]],[[]],[[24,15],[[4,[27,3]]]],[[]],[28,15],[24,[[4,[27,3]]]],[[24,15],[[4,[29,3]]]],[[24,24],15],[[],4],[[],4],[[],26],[[[9,[1]],[9,[1]],[13,[[9,[1]]]]],[[4,[17,3]]]],[[[9,[1]],24,[13,[24]]],[[4,[17,3]]]],[[[9,[1]],[9,[1]],[13,[[9,[1]]]]],[[4,[8,3]]]],[[[6,[5]],13],[[4,[8,3]]]],[[30,31,31,[13,[31]]],[[4,[8,3]]]],[[24,32,[13,[32]]]],[[7,33,[13,[34]]],[[4,[8,3]]]],[[[9,[1]],33,[13,[34]]],[[4,[[9,[1]],3]]]]],"c":[],"p":[[8,"OffsetSizeTrait",82],[6,"GenericBinaryArray",83],[4,"ArrowError",84],[4,"Result",85],[8,"ByteArrayType",86],[3,"GenericByteArray",87],[8,"Array",88],[6,"ArrayRef",88],[6,"GenericStringArray",89],[15,"slice"],[3,"OffsetBuffer",90],[3,"NullBuffer",91],[4,"Option",92],[4,"Op",15],[15,"bool"],[8,"AnyDictionaryArray",93],[3,"BooleanArray",94],[8,"Iterator",95],[8,"Fn",96],[8,"Datum",97],[3,"Formatter",98],[6,"Result",98],[4,"DataType",99],[15,"str"],[3,"String",100],[3,"TypeId",101],[4,"Predicate",48],[15,"char"],[3,"Regex",102],[3,"FixedSizeBinaryArray",103],[15,"i32"],[15,"usize"],[15,"i64"],[15,"u64"]]},\
"flight_sql_client":{"doc":"","t":"DDDLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMFMMMFFMLMLLLLLLLLLLLLLMMLLL","n":["Args","ClientArgs","KeyValue","augment_args","augment_args","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","client_args","clone","clone_into","command","command","command_for_update","command_for_update","fmt","fmt","fmt","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_cast","from_cast","from_cast","from_ref","from_str","group_id","group_id","headers","host","into","into","into","into_request","into_request","into_request","key","main","password","port","query","setup_client","setup_logging","tls","to_owned","token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","username","value","vzip","vzip","vzip"],"q":[[0,"flight_sql_client"],[76,"clap_builder::builder::command"],[77,"core::clone"],[78,"core::fmt"],[79,"core::fmt"],[80,"clap_builder"],[81,"core::result"],[82,"core::str::traits"],[83,"clap_builder::util::id"],[84,"core::option"],[85,"tonic::request"],[86,"tonic::transport::channel"],[87,"arrow_flight::sql::client"],[88,"arrow_schema::error"],[89,"core::any"]],"d":["","","A ‘:’ separated key value pair","","","","","","","","","","","","","","Client args.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Additional headers.","Server host.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Password","Server port.","SQL query.","","","Use TLS.","","Auth token.","","","","","","","","","","","","","","Username","","","",""],"i":[0,0,0,7,8,7,8,3,7,8,3,7,8,3,7,8,8,3,3,7,8,7,8,3,7,8,3,7,8,7,8,7,8,3,7,8,3,3,7,8,7,7,3,7,8,3,7,8,3,0,7,7,8,0,0,7,3,7,3,7,8,3,7,8,3,7,8,7,8,7,8,7,3,3,7,8],"f":[0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[],1],[[],1],[[],1],[[],1],[[[3,[4,4]],5],6],[[7,5],6],[[8,5],6],[[]],[[]],[[]],[9,[[11,[7,10]]]],[9,[[11,[8,10]]]],[9,[[11,[7,10]]]],[9,[[11,[8,10]]]],[[]],[[]],[[]],[[]],[12,[[11,[[3,[13,13]]]]]],[[],[[15,[14]]]],[[],[[15,[14]]]],0,0,[[]],[[]],[[]],[[],16],[[],16],[[],16],0,[[]],0,0,0,[7,[[11,[[18,[17]],19]]]],[[]],0,[[]],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],20],[[],20],[[],20],[[7,9],[[11,[10]]]],[[8,9],[[11,[10]]]],[[7,9],[[11,[10]]]],[[8,9],[[11,[10]]]],0,0,[[]],[[]],[[]]],"c":[],"p":[[3,"Command",76],[8,"Clone",77],[3,"KeyValue",0],[8,"Debug",78],[3,"Formatter",78],[6,"Result",78],[3,"ClientArgs",0],[3,"Args",0],[3,"ArgMatches",79],[6,"Error",80],[4,"Result",81],[15,"str"],[8,"FromStr",82],[3,"Id",83],[4,"Option",84],[3,"Request",85],[3,"Channel",86],[3,"FlightSqlServiceClient",87],[4,"ArrowError",88],[3,"TypeId",89]]},\
"flight_test_integration_client":{"doc":"","t":"DNNGNNGELLLLLLLLLLLLLLLLLLLLLLMLLLLFMMMLLLLLLLLLLLLL","n":["Args","AuthBasicProto","Err","Error","Middleware","Ok","Result","Scenario","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","cast","cast","clone","clone_into","command","command_for_update","fmt","fmt","from","from","from_arg_matches","from_arg_matches_mut","from_cast","from_cast","from_ref","group_id","host","into","into","into_request","into_request","main","path","port","scenario","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","vzip","vzip"],"q":[[0,"flight_test_integration_client"],[52,"clap_builder::builder::command"],[53,"core::fmt"],[54,"core::fmt"],[55,"clap_builder"],[56,"core::result"],[57,"clap_builder::util::id"],[58,"core::option"],[59,"tonic::request"],[60,"core::error"],[61,"alloc::boxed"],[62,"clap_builder::builder::possible_value"],[63,"core::any"]],"d":["","","Contains the error value","","","Contains the success value","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,2,17,0,2,17,0,0,5,5,2,5,2,5,2,5,2,2,5,5,2,5,2,5,5,5,2,5,2,5,5,2,5,2,5,0,5,5,5,2,2,2,5,2,5,2,5,5,5,2,2,5],"f":[0,0,0,0,0,0,0,0,[1,1],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[[]],[[],1],[[],1],[[2,3],4],[[5,3],4],[[]],[[]],[6,[[8,[5,7]]]],[6,[[8,[5,7]]]],[[]],[[]],[[]],[[],[[10,[9]]]],0,[[]],[[]],[[],11],[[],11],[[],[[8,[[13,[12]]]]]],0,0,0,[[]],[2,[[10,[14]]]],[[],8],[[],8],[[],8],[[],8],[[],15],[[],15],[[5,6],[[8,[7]]]],[[5,6],[[8,[7]]]],[[],[[16,[2]]]],[[]],[[]]],"c":[],"p":[[3,"Command",52],[4,"Scenario",0],[3,"Formatter",53],[6,"Result",53],[3,"Args",0],[3,"ArgMatches",54],[6,"Error",55],[4,"Result",56],[3,"Id",57],[4,"Option",58],[3,"Request",59],[8,"Error",60],[3,"Box",61],[3,"PossibleValue",62],[3,"TypeId",63],[15,"slice"],[6,"Result",0]]},\
"flight_test_integration_server":{"doc":"","t":"DNNGNNGELLLLLLLLLLLLLLLLLLLLLLLLLLFMMLLLLLLLLLLLLL","n":["Args","AuthBasicProto","Err","Error","Middleware","Ok","Result","Scenario","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","cast","cast","clone","clone_into","command","command_for_update","fmt","fmt","from","from","from_arg_matches","from_arg_matches_mut","from_cast","from_cast","from_ref","group_id","into","into","into_request","into_request","main","port","scenario","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","vzip","vzip"],"q":[[0,"flight_test_integration_server"],[50,"clap_builder::builder::command"],[51,"core::fmt"],[52,"core::fmt"],[53,"clap_builder"],[54,"core::result"],[55,"clap_builder::util::id"],[56,"core::option"],[57,"tonic::request"],[58,"core::error"],[59,"alloc::boxed"],[60,"clap_builder::builder::possible_value"],[61,"core::any"]],"d":["","","Contains the error value","","","Contains the success value","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,2,17,0,2,17,0,0,5,5,2,5,2,5,2,5,2,2,5,5,2,5,2,5,5,5,2,5,2,5,2,5,2,5,0,5,5,2,2,2,5,2,5,2,5,5,5,2,2,5],"f":[0,0,0,0,0,0,0,0,[1,1],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[[]],[[],1],[[],1],[[2,3],4],[[5,3],4],[[]],[[]],[6,[[8,[5,7]]]],[6,[[8,[5,7]]]],[[]],[[]],[[]],[[],[[10,[9]]]],[[]],[[]],[[],11],[[],11],[[],[[8,[[13,[12]]]]]],0,0,[[]],[2,[[10,[14]]]],[[],8],[[],8],[[],8],[[],8],[[],15],[[],15],[[5,6],[[8,[7]]]],[[5,6],[[8,[7]]]],[[],[[16,[2]]]],[[]],[[]]],"c":[],"p":[[3,"Command",50],[4,"Scenario",0],[3,"Formatter",51],[6,"Result",51],[3,"Args",0],[3,"ArgMatches",52],[6,"Error",53],[4,"Result",54],[3,"Id",55],[4,"Option",56],[3,"Request",57],[8,"Error",58],[3,"Box",59],[3,"PossibleValue",60],[3,"TypeId",61],[15,"slice"],[6,"Result",0]]},\
"gen":{"doc":"","t":"FF","n":["main","prost_config"],"q":[[0,"gen"],[2,"core::error"],[3,"alloc::boxed"],[4,"core::result"],[5,"prost_build"]],"d":["",""],"i":[0,0],"f":[[[],[[3,[[2,[1]]]]]],[[],4]],"c":[],"p":[[8,"Error",2],[3,"Box",3],[4,"Result",4],[3,"Config",5]]},\
"parquet":{"doc":"This crate contains the official Native Rust …","t":"AAAAAAOAAAARCCDRCDLAFAAALLLLALLLLLLAMLLLLLLLLLLMMFFFALLLLLLLLLIDDDDDGDDDIDDFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLKLMLKFMMMMAMMLLLLLLLLLLLLLLMMLLLLLLLLMMLLLLMMMMMLLLLLLLLLLKLMMMLLMKMMMMMMMMMMLLLMMMMAMMMMFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDDLLLLLLKLMLLLLLLLLMKLMLLLLLLDDFLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLMLLMLLMLLLLLLLLLLDEDDDNDNGMLMLLLLLLLLLLLLMMALLLLLLLLLLMLLLLLLLLLLLLLLLLLFFLFFLFFFLMLLLLLLLLLLMAMLMMLLLMLLLLLLLLLLLLLLLLLLLLLLFFLLFMMDDNNDDENLMLLLLLLLLLLLLLLLFLLMOOOFLLMLLLLLMLLLLLLLLLLLLLLLLLLLMMLLLLLMLMLLMMLLLLLLLLLLLLLLLLMLLMMMMMMMDDENNNLLLLLLFLLLLLLLMLMLLLLLLLLLLLLLLLLFMMLLMMLMLLLLLLLLLLLLLLLLLLIEDNNNNDNNDDGGDNNEMMLLLLLLLLLLLLLLLLLLLLLLMLFMMMMLLLLLLLLLLLLLLLLKLKLMMLLLLLLLLMMMAMMMMMLLLLLMMMLMMMMLMMMMMLMMMMMAMLLLLLLLLLLLLLLLLLLLLMMMMIDDLLLLLLKLMFLLLLLLLLLMLMLLLLLLDLLLLLLLLLLLLMMLMMMLLLLLLLDDLMLLLLMMLLLLLLLLLLLLLMMLLLLLLLLLLLLLAAAFFFNENLLLLLLLLLLLLLLLLLLLMMMDLLLLLLLLLLLLLLLMLLLLLLLMCCAADLLLMMLLLMMLMLLLMLLLDLLLMLLMMMLMLLLLLLGDGLLALMMMMLLLLLMMMAMLLMLLLMMLMMLMMFMLLMMMLLLLLLMMMIQDIQIMLLLLMLKLLLLLLLLLMLKLLLLKLKLLLLEDDNNNENDLLLLLLLLLLLLLLLLLLLMMLMLLLLLLLLLLMLLLLLMMLLLLLMMLLMMLLLLLLLLLLLLLLLLLLLLMMMMNNNNNNDNCEEENNNNNNNNNNCNCNENCNNNDNNNNNNNNNCNNNCNNNNNCENNNCNCNNNENNNNENNENCNNNNNNCCNCENNNNNNNNNCNNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMRRDRRRDSLLLLLLLLLFLLLLLLLLLLFLLLLLLLLLLLLLFFFLLLLLLLLLLLLLAAADNNNEIDIDILLLLLLLLLMLLLLLLLLKLMLMLLLLLLLLLLLLKLLLLMLLMMLLMMLLMKKLLLLLLLLLLLLLLLLLLMMKKMMMMMMMMMMMMMMMMMMMNNEGNNNDNNNLLLLLLAMMMMLLLLFFLMMLLLLMMMMMMFLLLLMMLLLLLLLMMIIDIDEINRIDNRQQIMMLLLLLLLLMMMKKLLLLKLMMMMMLLLLLLLLLMLLLLKLLLLKLLKLKLKKLLLKLKLKLKLLLLLLLLLLLLLNNNDDEGNINNDNNNENDLMLLLLLLLLLLLLMLLLLLLLLLLMMMMMMMMFFMMMMMMMLMMLMOLLAMMMMFLLLLLLLLLLLLLLFLLLLLFFFFKFFLLLLLLFMMMLMMMMMMMMMMMMMMMMLLMMLMMMMMLLFLLLLLLLLLLLLLLLLLLLFLFFLLLLLLLIDIDDQQMLLLLLLMMLLLMMMMKLKLKLKLKLLLLLLLFKLLLLMKMMKLMMKLMMMMLLLLLLKLLLLKLKLLIDDDNIEDDDDNDNDDDIIQLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOKLLLLLLLLKLLLLLLLLKLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLALLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOMMMMMMMMMMSIKLKLKLKOKKNNNNNNNNEGOLLLLOLLLLLLLLLLOLOLLLLLRRAAAAAAAAAFFFFFDDDDGGDGDGDDGMMLLLLMLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLMLMLLLMLLLMMLLLMLMMLMLLLMMLMLLLMLLMMLMMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLMMMMMLLLLLLLMMLLLLMMLMMLMLMLMLLLMLLMMMMLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMDLLLLLMMLLLLLLLMLFLFLLAANNNNNNNNENDSDLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLMLMLLLLLLLLLLLLLFFFFFDNDRRRRRRRRRRRRRRENNNNDDGDDGEMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMLMMMMLLLMMLMMLMMLLLLLMMLLLMLLMMLLLMLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLMMLMMMMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMIDIIICCQLLLMMLLKKKLKKKKLLKKKLLKKMLLLLNGDDDDEDNMLLLLLLLLLLLLLLLLLLLMMFMLMMLLLLLLLLLLLLLLFLLLLLLLLLLLLLLMMLLLLLLLLLMLMMMMMMMFFMLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNNNNNNEGDLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLFLLLLLLLLLLMMLLMMLMMLLLMMLLLLLLMMLAOOLLLLFLLLLLLLIOKGGDDDDDLLLLMMLLLLLLLLLLMMLMLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLMMLLLLLLLMLLLLLLLLLMMMMLMMMMMMMLLMLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNSDDSNSSNSSSEEEDDDDEDDEDDSSNSNSSSSSSSDDDDDNNNSSSSSSSSDEDDDSSDDDSSSSSNSSSSSDDNSDDNSSSSDENSSNNDDDNDDSDSSDDDDSSSSDSNDDDDDNNSSSSNDEDDDSSSSNSNSSNDDNDSMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNENNNDINNDINNIDIDINNNNNNNNAMMMMMMKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKAAKAKNNNNNNENNNDINNDINDNDIDINNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLFFFMMLMMLMLLLLMMKLLLLLLLLLLLLLLLLLLLKKLLLKKLLLKKLLLLKKLLLKKLLLKKLLLKKLLLKKLLLKLKKLLLKKLLLKKLLLKKLLLKKLLLKKLLLKKLLLLKKLLLKKLLLKKLLLKKLLLKLLLLLLLLLLLLOOFFFOLLOOOLLLLLLLLLLLLLLLLLLLLLLLLLLRENNNNNEDNNDDLLMLLLLLLLLLLLLLLLLLLMLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLMMLLMLLLLLLLLLLLLLLLLLIKKNNNNNNNNEDMLLLLLLLMMLLLLLLMLLLLLLMLLLLLMLLMLLLLMMOMLLLLLLMAAAADDLLLFLLLLLLLLLLLLMLLLLLFLFFLFLMMLLLLLLRDLLLLLMLLMLFFFLFFFFFLLLDGDDNDNDGDEGMMMLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLMMMLLLLLLLLLLLMMMLLMMMLMLMLLLLMMMLLLLLLLMLMMMMLMMMLMMMLMMMLLMMLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMILLKKKK","n":["arrow","basic","bloom_filter","column","data_type","errors","experimental","file","format","record","schema","ARROW_SCHEMA_META_KEY","ArrowWriter","AsyncArrowWriter","FieldLevels","PARQUET_FIELD_ID_META_KEY","ParquetRecordBatchStreamBuilder","ProjectionMask","all","arrow_reader","arrow_to_parquet_schema","arrow_writer","async_reader","async_writer","borrow","borrow","borrow_mut","borrow_mut","buffer","cast","cast","clone","clone","clone_into","clone_into","decoder","fields","fmt","fmt","from","from","from_cast","from_cast","into","into","leaf_included","leaves","levels","mask","parquet_to_arrow_field_levels","parquet_to_arrow_schema","parquet_to_arrow_schema_by_columns","record_reader","roots","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ArrowPredicate","ArrowPredicateFn","ArrowReaderBuilder","ArrowReaderMetadata","ArrowReaderOptions","ParquetRecordBatchReader","ParquetRecordBatchReaderBuilder","ReaderPageIterator","ReaderRowGroups","RowFilter","RowGroups","RowSelection","RowSelector","apply_range","array_reader","batch_size","batch_size","batch_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","cast","cast","cast","cast","cast","cast","clone","clone","clone_into","clone_into","column_chunks","column_chunks","column_idx","default","evaluate","evaluate_predicate","f","fields","fields","fields","filter","filter","filter","fmt","fmt","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","input","input","into","into","into","into","into","into","into_iter","into_iter","limit","limit","load","load_async","metadata","metadata","metadata","metadata","metadata","metadata","metadata","new","new","new","new_builder","new_with_metadata","new_with_metadata","new_with_metadata","new_with_options","next","next","num_rows","num_rows","offset","offset","page_index","parquet_schema","parquet_schema","predicates","projection","projection","projection","projection","reader","reader","row_count","row_groups","row_groups","row_groups","row_groups","schema","schema","schema","schema","schema","schema","schema","selection","selection","selection","selection","selectors","selects_any","skip","skip_arrow_metadata","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","try_new","try_new_with_options","try_new_with_options","try_new_with_row_groups","type_id","type_id","type_id","type_id","type_id","type_id","with_batch_size","with_limit","with_offset","with_page_index","with_projection","with_row_filter","with_row_groups","with_row_selection","with_skip_arrow_metadata","ArrowPredicate","ArrowPredicateFn","RowFilter","borrow","borrow","borrow_mut","borrow_mut","cast","cast","evaluate","evaluate","f","from","from","from_cast","from_cast","into","into","new","new","predicates","projection","projection","projection","try_from","try_from","try_into","try_into","type_id","type_id","RowSelection","RowSelector","add_selector","and_then","borrow","borrow","borrow_mut","borrow_mut","cast","cast","clone","clone","clone_into","clone_into","default","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from_cast","from_cast","from_consecutive_ranges","from_filters","from_selectors_and_combine","intersect_row_selections","intersection","into","into","iter","limit","offset","row_count","row_count","scan_ranges","select","selectors","selects_any","skip","skip","split_off","to_owned","to_owned","trim","try_from","try_from","try_into","try_into","type_id","type_id","ArrowColumnChunk","ArrowColumnWriter","ArrowPageWriter","ArrowRowGroupWriter","ArrowWriter","ByteArray","ChainReader","Column","SharedColumnChunk","alloc","append_key_value_metadata","arrow_schema","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffered_rows","byte_array","cast","cast","cast","cast","cast","cast","close","close","close","close","data","default","default","flush","flushed_row_groups","fmt","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get_arrow_column_writer","get_bool_array_slice","get_bytes","get_decimal_128_array_slice","get_decimal_256_array_slice","get_estimated_total_bytes","get_fsb_array_slice","get_interval_dt_array_slice","get_interval_ym_array_slice","get_read","in_progress","in_progress_rows","in_progress_size","into","into","into","into","into","into","into_inner","len","length","levels","max_row_group_size","new","phantom","ptr","read","read_fixedint","read_varint","schema","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write_leaf","write_leaves","write_metadata","write_page","write_primitive","writer","writers","ByteArrayEncoder","ByteArrayStorage","Delta","DeltaLength","DictEncoder","FallbackEncoder","FallbackEncoderImpl","Plain","bit_width","bloom_filter","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","compute_min_max","default","default","dict_encoder","downcast_dict_impl","downcast_dict_op","downcast_op","encode","encode","encode","encoder","estimated_data_page_size","estimated_data_page_size","estimated_data_page_size","estimated_dict_page_size","estimated_dict_page_size","fallback","flush_bloom_filter","flush_data_page","flush_data_page","flush_data_page","flush_dict_page","flush_dict_page","fmt","fmt","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","has_dictionary","indices","interner","into","into","into","into","into","max_value","min_max","min_value","new","num_values","num_values","page","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_new","type_id","type_id","type_id","type_id","type_id","values","write","write_gather","buffer","buffer","buffer","last_value","lengths","prefix_lengths","suffix_lengths","LevelContext","LevelInfo","LevelInfoBuilder","List","Primitive","Struct","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","calculate_array_levels","cast","cast","cast","clone","clone","clone_into","clone_into","def_level","def_levels","def_levels","default","eq","equivalent","equivalent","finish","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","into","into","into","is_leaf","max_def_level","max_rep_level","new","non_null_indices","non_null_indices","rep_level","rep_levels","rep_levels","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","visit_leaves","write","write_fixed_size_list","write_leaf","write_list","write_struct","AsyncFileReader","ColumnChunkData","ColumnChunkIterator","Decoding","Dense","Err","Error","InMemoryRowGroup","Init","Ok","ParquetObjectReader","ParquetRecordBatchStream","ParquetRecordBatchStreamBuilder","ReadResult","ReaderFactory","Reading","Sparse","StreamState","batch_size","batch_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cast","cast","cast","cast","cast","cast","clone","clone_into","column_chunks","column_chunks","fetch","fetch_parquet_metadata","fields","fields","filter","filter","fmt","fmt","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get","get_byte_ranges","get_bytes","get_bytes","get_metadata","get_read","input","input","into","into","into","into","into","into","into_iter","len","limit","limit","meta","metadata","metadata","metadata","metadata","metadata","metadata_size_hint","new","new_with_metadata","new_with_options","next","num_rows","offset","offset","page_locations","poll_next","preload_column_index","preload_offset_index","projection","projection","read_row_group","reader","reader","row_count","row_groups","row_groups","schema","schema","schema","selection","selection","state","store","store","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id","type_id","type_id","type_id","data","data","length","offset","MetadataFetch","MetadataFetchFn","MetadataLoader","borrow","borrow","borrow_mut","borrow_mut","cast","cast","fetch","fetch","fetch","fetch_parquet_metadata","finish","from","from","from_cast","from_cast","into","into","load","load_page_index","metadata","new","remainder","try_from","try_from","try_into","try_into","type_id","type_id","ParquetObjectReader","borrow","borrow_mut","cast","clone","clone_into","fmt","from","from_cast","get_byte_ranges","get_bytes","get_metadata","into","meta","metadata_size_hint","new","preload_column_index","preload_offset_index","store","to_owned","try_from","try_into","type_id","with_footer_size_hint","with_preload_column_index","with_preload_offset_index","AsyncArrowWriter","SharedBuffer","append_key_value_metadata","async_writer","borrow","borrow","borrow_mut","borrow_mut","buffer","buffer_size","cast","cast","clone","clone_into","close","flush","from","from","from_cast","from_cast","into","into","new","shared_buffer","sync_writer","to_owned","try_flush","try_from","try_from","try_into","try_into","try_new","type_id","type_id","write","write","write_fixedint","write_varint","bit_util","dictionary_buffer","offset_buffer","count_set_bits","iter_set_bits_rev","sign_extend_be","Dict","DictionaryBuffer","Values","as_keys","borrow","borrow_mut","capacity","cast","consume","default","from","from_cast","into","into_array","len","pad_nulls","set_len","spare_capacity_mut","spill_values","try_from","try_into","type_id","keys","values","values","OffsetBuffer","borrow","borrow_mut","capacity","cast","check_valid_utf8","consume","default","extend_from_dictionary","fmt","from","from_cast","into","into_array","is_empty","len","offsets","pad_nulls","set_len","spare_capacity_mut","try_from","try_into","try_push","type_id","values","DeltaByteArrayDecoder","DictIndexDecoder","delta_byte_array","dictionary_index","DeltaByteArrayDecoder","borrow","borrow_mut","cast","data","data_offset","from","from_cast","into","last_value","length_offset","new","prefix_lengths","read","remaining","skip","suffix_lengths","try_from","try_into","type_id","DictIndexDecoder","borrow","borrow_mut","cast","decoder","from","from_cast","index_buf","index_buf_len","index_offset","into","max_remaining_values","new","read","skip","try_from","try_into","type_id","ColumnReader","GenericRecordReader","RecordReader","borrow","borrow_mut","buffer","cast","column_desc","column_desc","column_reader","column_reader","consume_bitmap","consume_bitmap_buffer","consume_def_levels","consume_record_data","consume_rep_levels","def_level_decoder","def_levels","def_levels","definition_levels","descr","from","from_cast","has_record_delimiter","into","new","new_with_records","num_buffered_values","num_decoded_values","num_records","num_records","num_records","num_values","num_values","num_values","packed_null_mask","page_reader","read_one_batch","read_records","rep_level_decoder","rep_levels","rep_levels","reset","set_page_reader","skip_records","try_from","try_into","type_id","values","values","values_decoder","BufferQueue","Output","ScalarBuffer","ScalarValue","Slice","ValuesBuffer","_phantom","as_slice","as_slice_mut","borrow","borrow_mut","buffer","cast","consume","consume","default","extend_from_slice","fmt","from","from_cast","into","is_empty","len","len","new","pad_nulls","pad_nulls","push","reserve","resize","set_len","set_len","spare_capacity_mut","spare_capacity_mut","try_from","try_into","type_id","BufferInner","DefinitionLevelBuffer","DefinitionLevelBufferDecoder","Fallback","Full","Mask","MaybePacked","Packed","PackedDecoder","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","cast","cast","cast","cast","cast","consume_bitmask","consume_levels","count_nulls","data","data_offset","decode_header","decoder","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","inner","into","into","into","into","into","len","max_level","new","new","new","next_rle_block","nulls","packed_count","packed_offset","read","read_def_levels","rle_left","rle_value","set_data","set_data","set_len","skip","skip_def_levels","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","levels","max_level","nulls","nulls","BIT_PACKED","BOOLEAN","BROTLI","BSON","BYTE_ARRAY","BYTE_STREAM_SPLIT","BrotliLevel","Bson","BsonType","ColumnOrder","Compression","ConvertedType","DATA_PAGE","DATA_PAGE_V2","DATE","DECIMAL","DELTA_BINARY_PACKED","DELTA_BYTE_ARRAY","DELTA_LENGTH_BYTE_ARRAY","DICTIONARY_PAGE","DOUBLE","Date","DateType","Decimal","DecimalType","ENUM","Encoding","Enum","EnumType","FIXED_LEN_BYTE_ARRAY","FLOAT","GZIP","GzipLevel","INDEX_PAGE","INT32","INT64","INT96","INTERVAL","INT_16","INT_32","INT_64","INT_8","IntType","Integer","JSON","Json","JsonType","LIST","LZ4","LZ4_RAW","LZO","List","ListType","LogicalType","MAP","MAP_KEY_VALUE","Map","MapType","NONE","NullType","OPTIONAL","PLAIN","PLAIN_DICTIONARY","PageType","REPEATED","REQUIRED","RLE","RLE_DICTIONARY","Repetition","SIGNED","SNAPPY","SortOrder","String","StringType","TIMESTAMP_MICROS","TIMESTAMP_MILLIS","TIME_MICROS","TIME_MILLIS","TYPE_DEFINED_ORDER","Time","TimeType","TimeUnit","Timestamp","TimestampType","Type","UINT_16","UINT_32","UINT_64","UINT_8","UNCOMPRESSED","UNDEFINED","UNDEFINED","UNSIGNED","UTF8","UUIDType","Unknown","Uuid","ZSTD","ZstdLevel","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","compression_level","compression_level","compression_level","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_str","from_str","from_str","from_str","get_converted_sort_order","get_default_sort_order","get_sort_order","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","is_signed","partial_cmp","sort_order","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_new","try_new","try_new","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","bit_width","is_adjusted_to_u_t_c","is_adjusted_to_u_t_c","is_signed","precision","scale","unit","unit","BITSET_MAX_LENGTH","BITSET_MIN_LENGTH","Block","SALT","SBBF_HEADER_SIZE_ESTIMATE","SEED","Sbbf","ZERO","borrow","borrow","borrow_mut","borrow_mut","cast","cast","check","check","check_hash","chunk_read_bloom_filter_header_and_offset","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from_cast","from_cast","hash_as_bytes","hash_to_block_index","header","index","index_mut","insert","insert","insert_hash","into","into","mask","new","new_with_ndv_fpp","new_with_num_of_bytes","num_of_bits_from_ndv_fpp","optimal_num_of_bytes","read_bloom_filter_header_and_length","read_from_column_chunk","to_le_bytes","to_ne_bytes","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write","write_bitset","page","reader","writer","CompressedPage","DataPage","DataPageV2","DictionaryPage","Page","PageIterator","PageMetadata","PageReader","PageWriteSpec","PageWriter","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","bytes_written","cast","cast","cast","cast","clone","clone","clone_into","clone_into","close","compressed_page","compressed_page","compressed_size","compressed_size","data","default","encoding","encoding","from","from","from","from","from_cast","from_cast","from_cast","from_cast","get_next_page","into","into","into","into","is_dict","new","new","num_levels","num_rows","num_values","num_values","num_values","offset","page_type","page_type","page_type","peek_next_page","skip_next_page","statistics","to_owned","to_owned","to_thrift_header","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uncompressed_size","uncompressed_size","uncompressed_size","write_metadata","write_page","buf","buf","buf","def_level_encoding","def_levels_byte_len","encoding","encoding","encoding","is_compressed","is_sorted","num_nulls","num_rows","num_values","num_values","num_values","rep_level_encoding","rep_levels_byte_len","statistics","statistics","BoolColumnReader","ByteArrayColumnReader","ColumnReader","ColumnReaderImpl","DoubleColumnReader","FixedLenByteArrayColumnReader","FloatColumnReader","GenericColumnReader","Int32ColumnReader","Int64ColumnReader","Int96ColumnReader","borrow","borrow","borrow_mut","borrow_mut","cast","cast","decoder","def_level_decoder","def_level_decoder","descr","descr","from","from","from_cast","from_cast","get_column_reader","get_typed_column_reader","has_next","has_record_delimiter","has_record_delimiter","into","into","new","new_with_decoders","num_buffered_values","num_buffered_values","num_decoded_values","num_decoded_values","page_reader","page_reader","parse_v1_level","read_batch","read_dictionary_page","read_new_page","read_records","rep_level_decoder","rep_level_decoder","skip_records","try_from","try_from","try_into","try_into","type_id","type_id","values_decoder","values_decoder","ColumnLevelDecoder","ColumnValueDecoder","ColumnValueDecoderImpl","DefinitionLevelDecoder","DefinitionLevelDecoderImpl","LevelDecoder","LevelsBufferSlice","Packed","REPETITION_LEVELS_BATCH_SIZE","RepetitionLevelDecoder","RepetitionLevelDecoderImpl","Rle","SKIP_BUFFER_SIZE","Slice","Slice","ValuesBufferSlice","bit_width","bit_width","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer_len","buffer_offset","capacity","capacity","cast","cast","cast","cast","count_nulls","count_records","current_encoding","decoder","decoder","decoders","descr","fill_buf","from","from","from","from","from_cast","from_cast","from_cast","from_cast","has_partial","into","into","into","into","new","new","new","new","new","read","read","read","read_def_levels","read_def_levels","read_rep_levels","read_rep_levels","set_data","set_data","set_data","set_data","set_data","set_dict","set_dict","skip_def_levels","skip_def_levels","skip_rep_levels","skip_rep_levels","skip_values","skip_values","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","BoolColumnWriter","ByteArrayColumnWriter","Column","ColumnCloseResult","ColumnMetrics","ColumnWriter","ColumnWriterImpl","DoubleColumnWriter","EncodingWriteSupport","FixedLenByteArrayColumnWriter","FloatColumnWriter","GenericColumnWriter","Int32ColumnWriter","Int64ColumnWriter","Int96ColumnWriter","Level","Page","PageMetrics","add_data_page","bloom_filter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_written","cast","cast","cast","cast","cast","cast","clone","clone_into","close","close","codec","codec","column_distinct_count","column_index","column_index_builder","column_index_builder","column_metrics","column_metrics","compare_greater","compare_greater_byte_array_decimals","compressor","compressor","data_page_offset","data_pages","data_pages","def_levels_sink","def_levels_sink","default","descr","descr","dict_fallback","dictionary_page_offset","downcast_writer","encode_levels_v1","encode_levels_v2","encoder","encoder","encoder","encodings","encodings","fallback_encoding","flush_data_pages","fmt","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get_column_writer","get_descriptor","get_estimated_total_bytes","get_estimated_total_bytes","get_total_bytes_written","get_total_rows_written","get_typed_column_writer","get_typed_column_writer_mut","get_typed_column_writer_ref","has_dictionary_support","has_dictionary_support","increment","increment_utf8","into","into","into","into","into","into","is_nan","max_column_value","metadata","min_column_value","new","num_buffered_rows","num_buffered_values","num_column_nulls","num_page_nulls","offset_index","offset_index_builder","offset_index_builder","page_metrics","page_metrics","page_writer","page_writer","props","props","rep_levels_sink","rep_levels_sink","rows_written","should_add_data_page","should_dict_fallback","statistics_enabled","statistics_enabled","to_owned","total_bytes_written","total_compressed_size","total_num_values","total_rows_written","total_uncompressed_size","truncate_max_value","truncate_min_value","truncate_utf8","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_column_offset_index","update_max","update_metrics_for_page","update_min","update_stat","write_batch","write_batch_internal","write_batch_with_statistics","write_column_metadata","write_data_page","write_dictionary_page","write_mini_batch","ColumnValueEncoder","ColumnValueEncoderImpl","ColumnValues","DataPageValues","DictionaryPage","T","Values","bloom_filter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buf","buf","cast","cast","cast","descr","dict_encoder","encoder","encoding","estimated_data_page_size","estimated_data_page_size","estimated_dict_page_size","estimated_dict_page_size","flush_bloom_filter","flush_bloom_filter","flush_data_page","flush_data_page","flush_dict_page","flush_dict_page","from","from","from","from_cast","from_cast","from_cast","get_min_max","has_dictionary","has_dictionary","into","into","into","is_sorted","len","max_value","max_value","min_max","min_max","min_value","min_value","num_values","num_values","num_values","num_values","num_values","statistics_enabled","try_from","try_from","try_from","try_into","try_into","try_into","try_new","try_new","type_id","type_id","type_id","write","write","write_gather","write_gather","write_slice","AsBytes","BoolType","ByteArray","ByteArrayType","Bytes","DataType","Decimal","DoubleType","FixedLenByteArray","FixedLenByteArrayType","FloatType","Int32","Int32Type","Int64","Int64Type","Int96","Int96Type","SliceAsBytes","SliceAsBytesDataType","T","as_any","as_any","as_any","as_bytes","as_bytes","as_bytes","as_bytes","as_bytes","as_mut_any","as_mut_any","as_mut_any","as_ref","as_ref","as_utf8","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","data","data","data","decode","decode","decode","default","default","default","default","deref","deref_mut","dict_encoding_size","dict_encoding_size","encode","encode","encode","ensure_phys_ty","eq","eq","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_i32","from_i64","gen_as_bytes","get_column_reader","get_column_reader","get_column_reader","get_column_reader","get_column_reader","get_column_reader","get_column_reader","get_column_reader","get_column_reader","get_column_writer","get_column_writer","get_column_writer","get_column_writer","get_column_writer","get_column_writer","get_column_writer","get_column_writer","get_column_writer","get_column_writer_mut","get_column_writer_mut","get_column_writer_mut","get_column_writer_mut","get_column_writer_mut","get_column_writer_mut","get_column_writer_mut","get_column_writer_mut","get_column_writer_mut","get_column_writer_ref","get_column_writer_ref","get_column_writer_ref","get_column_writer_ref","get_column_writer_ref","get_column_writer_ref","get_column_writer_ref","get_column_writer_ref","get_column_writer_ref","get_physical_type","get_type_size","get_type_size","get_type_size","get_type_size","get_type_size","get_type_size","get_type_size","get_type_size","get_type_size","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","len","make_statistics","make_statistics","make_statistics","make_type","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","precision","private","scale","set_data","set_data","set_data","set_data","set_data","skip","skip","skip","slice","slice_as_bytes","slice_as_bytes","slice_as_bytes","slice_as_bytes","slice_as_bytes_mut","slice_as_bytes_mut","slice_as_bytes_mut","slice_as_bytes_mut","to_i64","to_nanos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_seconds_and_nanos","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unimplemented_slice_as_bytes","value","precision","precision","precision","scale","scale","scale","value","value","value","PHYSICAL_TYPE","ParquetValueType","as_any","as_i64","as_mut_any","as_u64","decode","dict_encoding_size","encode","impl_from_raw","set_data","skip","ArrowError","EOF","Err","External","General","IndexOutOfBound","NYI","Ok","ParquetError","Result","arrow_err","as_error_source","borrow","borrow_mut","cast","eof_err","fmt","fmt","from","from","from","from","from","from","from","from_cast","general_err","into","nyi_err","source","to_string","try_from","try_into","type_id","FOOTER_SIZE","PARQUET_MAGIC","footer","metadata","page_encoding_stats","page_index","properties","reader","serialized_reader","statistics","writer","decode_footer","decode_metadata","parse_column_orders","parse_metadata","read_metadata","ColumnChunkMetaData","ColumnChunkMetaDataBuilder","ColumnIndexBuilder","FileMetaData","FileMetaDataPtr","KeyValue","OffsetIndexBuilder","ParquetColumnIndex","ParquetMetaData","ParquetOffsetIndex","RowGroupMetaData","RowGroupMetaDataBuilder","RowGroupMetaDataPtr","alloc","alloc","append","append_offset_and_size","append_row_count","bloom_filter_offset","bloom_filter_offset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_order","buf","buf","build","build","build_to_thrift","build_to_thrift","builder","builder","byte_range","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","column","column_descr","column_descr","column_descr_ptr","column_index","column_index","column_index_length","column_index_length","column_index_offset","column_index_offset","column_index_range","column_order","column_orders","column_orders","column_path","column_type","columns","columns","compressed_page_size_array","compressed_size","compressed_size","compression","compression","created_by","created_by","current_first_row_index","data_page_offset","data_page_offset","default","default","dictionary_page_offset","dictionary_page_offset","encoding_stats","encodings","encodings","eq","eq","file_metadata","file_metadata","file_offset","file_offset","file_offset","file_offset","file_path","file_path","first_row_index_array","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_thrift","from_thrift","index_page_offset","index_page_offset","into","into","into","into","into","into","into","into","into_builder","into_builder","key","key_value_metadata","key_value_metadata","len","len","max_values","min_values","new","new","new","new","new","new","new_with_page_index","null_counts","null_pages","num_columns","num_row_groups","num_rows","num_rows","num_rows","num_rows","num_values","num_values","offset_array","offset_index","offset_index","offset_index_length","offset_index_length","offset_index_offset","offset_index_offset","offset_index_range","offset_indexes","ordinal","ordinal","page_encoding_stats","page_indexes","phantom","phantom","ptr","ptr","row_group","row_groups","row_groups","schema","schema_descr","schema_descr","schema_descr","schema_descr","schema_descr_ptr","schema_descr_ptr","set_bloom_filter_offset","set_column_index","set_column_index_length","set_column_index_offset","set_column_metadata","set_compression","set_data_page_offset","set_dictionary_page_offset","set_encodings","set_file_offset","set_file_offset","set_file_path","set_index_page_offset","set_num_rows","set_num_values","set_offset_index","set_offset_index_length","set_offset_index_offset","set_ordinal","set_page_encoding_stats","set_sorting_columns","set_statistics","set_total_byte_size","set_total_compressed_size","set_total_uncompressed_size","sorting_columns","sorting_columns","statistics","statistics","to_column_metadata_thrift","to_invalid","to_owned","to_owned","to_owned","to_owned","to_thrift","to_thrift","total_byte_size","total_byte_size","total_compressed_size","total_uncompressed_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","valid","valid","value","version","version","PageEncodingStats","borrow","borrow_mut","cast","clone","clone_into","count","encoding","eq","equivalent","equivalent","fmt","from","from_cast","into","page_type","to_owned","to_thrift","try_from","try_from_thrift","try_into","type_id","index","index_reader","BOOLEAN","BYTE_ARRAY","DOUBLE","FIXED_LEN_BYTE_ARRAY","FLOAT","INT32","INT64","INT96","Index","NONE","NativeIndex","PHYSICAL_TYPE","PageIndex","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","boundary_order","cast","cast","cast","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_cast","from_cast","from_cast","get_boundary_order","hash","hash","indexes","into","into","into","is_sorted","max","max","min","min","null_count","null_count","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_new","type_id","type_id","type_id","acc_range","decode_column_index","decode_offset_index","read_columns_indexes","read_pages_locations","BloomFilterProperties","Chunk","ColumnProperties","DEFAULT_BLOOM_FILTER_FPP","DEFAULT_BLOOM_FILTER_NDV","DEFAULT_COLUMN_INDEX_TRUNCATE_LENGTH","DEFAULT_COMPRESSION","DEFAULT_CREATED_BY","DEFAULT_DICTIONARY_ENABLED","DEFAULT_DICTIONARY_PAGE_SIZE_LIMIT","DEFAULT_MAX_ROW_GROUP_SIZE","DEFAULT_MAX_STATISTICS_SIZE","DEFAULT_PAGE_SIZE","DEFAULT_READ_BLOOM_FILTER","DEFAULT_STATISTICS_ENABLED","DEFAULT_WRITER_VERSION","DEFAULT_WRITE_BATCH_SIZE","EnabledStatistics","None","PARQUET_1_0","PARQUET_2_0","Page","ReaderProperties","ReaderPropertiesBuilder","ReaderPropertiesPtr","WriterProperties","WriterPropertiesBuilder","WriterPropertiesPtr","WriterVersion","alloc","alloc","as_num","bloom_filter_properties","bloom_filter_properties","bloom_filter_properties","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","codec","codec_options","codec_options","codec_options_builder","column_index_truncate_length","column_index_truncate_length","column_index_truncate_length","column_properties","column_properties","compression","compression","created_by","created_by","created_by","data_page_row_count_limit","data_page_row_count_limit","data_page_row_count_limit","data_page_size_limit","data_page_size_limit","data_page_size_limit","data_pagesize_limit","default","default","default","default","default_column_properties","default_column_properties","dictionary_data_page_encoding","dictionary_enabled","dictionary_enabled","dictionary_enabled","dictionary_page_encoding","dictionary_page_size_limit","dictionary_page_size_limit","dictionary_page_size_limit","dictionary_pagesize_limit","encoding","encoding","encoding","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fpp","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get_mut_props","into","into","into","into","into","into","into","into","key_value_metadata","key_value_metadata","key_value_metadata","max_row_group_size","max_row_group_size","max_row_group_size","max_statistics_size","max_statistics_size","max_statistics_size","ndv","new","phantom","phantom","ptr","ptr","read_bloom_filter","read_bloom_filter","read_bloom_filter","set_backward_compatible_lz4","set_bloom_filter_enabled","set_bloom_filter_enabled","set_bloom_filter_fpp","set_bloom_filter_fpp","set_bloom_filter_ndv","set_bloom_filter_ndv","set_column_bloom_filter_enabled","set_column_bloom_filter_fpp","set_column_bloom_filter_ndv","set_column_compression","set_column_dictionary_enabled","set_column_encoding","set_column_index_truncate_length","set_column_max_statistics_size","set_column_statistics_enabled","set_compression","set_compression","set_created_by","set_data_page_row_count_limit","set_data_page_size_limit","set_data_pagesize_limit","set_dictionary_enabled","set_dictionary_enabled","set_dictionary_page_size_limit","set_dictionary_pagesize_limit","set_encoding","set_encoding","set_key_value_metadata","set_max_row_group_size","set_max_statistics_size","set_max_statistics_size","set_read_bloom_filter","set_sorting_columns","set_statistics_enabled","set_statistics_enabled","set_write_batch_size","set_writer_version","sorting_columns","sorting_columns","sorting_columns","statistics_enabled","statistics_enabled","statistics_enabled","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_defaults","with_defaults","write_batch_size","write_batch_size","write_batch_size","writer_version","writer_version","writer_version","ChunkReader","FilePageIterator","FileReader","Length","RowGroupReader","SerializedFileReader","SerializedPageReader","T","borrow","borrow_mut","cast","column_index","file_reader","from","from_cast","get_bytes","get_column_bloom_filter","get_column_page_reader","get_column_reader","get_read","get_row_group","get_row_iter","get_row_iter","into","into_iter","len","metadata","metadata","new","next","num_columns","num_row_groups","row_group_indices","try_from","try_into","type_id","with_row_groups","Pages","ReadGroupPredicate","ReadOptions","ReadOptionsBuilder","SerializedFileReader","SerializedPageReader","SerializedPageReaderState","SerializedRowGroupReader","Values","bloom_filters","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cast","cast","cast","cast","cast","cast","chunk_reader","chunk_reader","decode_page","decompressor","default","enable_page_index","enable_page_index","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get_column_bloom_filter","get_column_page_reader","get_midpoint_offset","get_next_page","get_row_group","get_row_iter","get_row_iter","into","into","into","into","into","into","into_iter","into_iter","metadata","metadata","metadata","metadata","new","new","new","new","new_with_options","new_with_properties","next","num_columns","num_row_groups","page_locations","peek_next_page","physical_type","predicates","predicates","props","props","props","props","read_page_header","read_page_header_len","reader","skip_next_page","state","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_page_index","with_predicate","with_range","with_reader_properties","dictionary_page","next_page_header","offset","page_locations","remaining_bytes","total_rows","Boolean","ByteArray","Double","FixedLenByteArray","Float","Int32","Int64","Int96","Statistics","TypedStatistics","ValueStatistics","boolean","borrow","borrow","borrow_mut","borrow_mut","byte_array","cast","cast","clone","clone","clone_into","clone_into","distinct_count","distinct_count","distinct_count","distinct_count","double","eq","eq","equivalent","equivalent","fixed_len_byte_array","float","fmt","fmt","fmt","fmt","from","from","from","from_cast","from_cast","from_thrift","has_min_max_set","has_min_max_set","has_nulls","int32","int64","int96","into","into","is_min_max_backwards_compatible","is_min_max_backwards_compatible","is_min_max_backwards_compatible","is_min_max_backwards_compatible","is_min_max_deprecated","is_min_max_deprecated","is_min_max_deprecated","is_min_max_deprecated","max","max","max","max_bytes","max_bytes","min","min","min","min_bytes","min_bytes","new","new","null_count","null_count","null_count","null_count","physical_type","private","statistics_enum_func","statistics_new_func","to_owned","to_owned","to_string","to_string","to_thrift","try_from","try_from","try_into","try_into","type_id","type_id","with_backwards_compatible_min_max","MakeStatistics","gen_make_statistics","make_statistics","OnCloseColumnChunk","OnCloseRowGroup","SerializedColumnWriter","SerializedFileWriter","SerializedPageWriter","SerializedRowGroupWriter","TrackedWrite","append_column","append_key_value_metadata","assert_previous_writer_closed","assert_previous_writer_closed","bloom_filters","bloom_filters","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","buf","bytes_written","bytes_written","cast","cast","cast","cast","cast","close","close","close","close","column_chunks","column_index","column_indexes","column_indexes","descr","descr","file_offset","flush","flushed_row_groups","fmt","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","get_on_close","inner","inner","into","into","into","into","into","into_inner","into_inner","kv_metadatas","new","new","new","new","new","next_column","next_column_desc","next_column_with_factory","next_row_group","offset_indexes","offset_indexes","on_close","on_close","properties","props","props","row_group_index","row_group_index","row_group_metadata","row_groups","schema","schema_descr","serialize_page_header","sink","start_file","total_bytes_written","total_rows_written","total_uncompressed_bytes","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","typed","untyped","write","write_all","write_bloom_filters","write_column_indexes","write_fixedint","write_metadata","write_metadata","write_offset_indexes","write_page","write_varint","write_vectored","AESGCMCTRV1","AESGCMV1","ASCENDING","AesGcmCtrV1","AesGcmV1","BIT_PACKED","BLOCK","BOOLEAN","BROTLI","BSON","BSON","BYTE_ARRAY","BYTE_STREAM_SPLIT","BloomFilterAlgorithm","BloomFilterCompression","BloomFilterHash","BloomFilterHeader","BoundaryOrder","BsonType","ColumnChunk","ColumnCryptoMetaData","ColumnIndex","ColumnMetaData","ColumnOrder","CompressionCodec","ConvertedType","DATA_PAGE","DATA_PAGE_V2","DATE","DATE","DECIMAL","DECIMAL","DELTA_BINARY_PACKED","DELTA_BYTE_ARRAY","DELTA_LENGTH_BYTE_ARRAY","DESCENDING","DICTIONARY_PAGE","DOUBLE","DataPageHeader","DataPageHeaderV2","DateType","DecimalType","DictionaryPageHeader","ENCRYPTIONWITHCOLUMNKEY","ENCRYPTIONWITHFOOTERKEY","ENUM","ENUM","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","ENUM_VALUES","Encoding","EncryptionAlgorithm","EncryptionWithColumnKey","EncryptionWithFooterKey","EnumType","FIXED_LEN_BYTE_ARRAY","FLOAT","FieldRepetitionType","FileCryptoMetaData","FileMetaData","GZIP","INDEX_PAGE","INT32","INT64","INT96","INTEGER","INTERVAL","INT_16","INT_32","INT_64","INT_8","IndexPageHeader","IntType","JSON","JSON","JsonType","KeyValue","LIST","LIST","LZ4","LZ4_RAW","LZO","ListType","LogicalType","MAP","MAP","MAP_KEY_VALUE","MICROS","MILLIS","MapType","MicroSeconds","MilliSeconds","NANOS","NanoSeconds","NullType","OPTIONAL","OffsetIndex","PLAIN","PLAIN_DICTIONARY","PageEncodingStats","PageHeader","PageLocation","PageType","REPEATED","REQUIRED","RLE","RLE_DICTIONARY","RowGroup","SNAPPY","STRING","SchemaElement","SortingColumn","SplitBlockAlgorithm","Statistics","StringType","TIME","TIMESTAMP","TIMESTAMP_MICROS","TIMESTAMP_MILLIS","TIME_MICROS","TIME_MILLIS","TYPEORDER","TimeType","TimeUnit","TimestampType","Type","TypeDefinedOrder","UINT_16","UINT_32","UINT_64","UINT_8","UNCOMPRESSED","UNCOMPRESSED","UNKNOWN","UNORDERED","UTF8","UUID","UUIDType","Uncompressed","XXHASH","XxHash","ZSTD","aad_file_unique","aad_file_unique","aad_prefix","aad_prefix","algorithm","bit_width","bloom_filter_offset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boundary_order","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","codec","column_idx","column_index_length","column_index_offset","column_orders","columns","compressed_page_size","compressed_page_size","compression","converted_type","count","crc","created_by","crypto_metadata","data_page_header","data_page_header_v2","data_page_offset","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","definition_level_encoding","definition_levels_byte_length","descending","dictionary_page_header","dictionary_page_offset","distinct_count","encoding","encoding","encoding","encoding","encoding_stats","encodings","encrypted_column_metadata","encryption_algorithm","encryption_algorithm","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","field_id","file_offset","file_offset","file_path","first_row_index","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","footer_signing_key_metadata","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index_page_header","index_page_offset","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_adjusted_to_u_t_c","is_adjusted_to_u_t_c","is_compressed","is_signed","is_sorted","key","key_metadata","key_metadata","key_value_metadata","key_value_metadata","logical_type","max","max_value","max_values","meta_data","min","min_value","min_values","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","null_count","null_counts","null_pages","nulls_first","num_bytes","num_children","num_nulls","num_rows","num_rows","num_rows","num_values","num_values","num_values","num_values","offset","offset_index_length","offset_index_offset","ordinal","page_locations","page_type","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path_in_schema","path_in_schema","precision","precision","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","read_from_in_protocol","repetition_level_encoding","repetition_levels_byte_length","repetition_type","row_groups","scale","scale","schema","sorting_columns","statistics","statistics","statistics","supply_aad_prefix","supply_aad_prefix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_byte_size","total_compressed_size","total_compressed_size","total_uncompressed_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_length","uncompressed_page_size","unit","unit","value","version","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","write_to_out_protocol","Bool","Byte","Bytes","Date","Decimal","Double","Field","Float","Group","Int","List","ListAccessor","ListInternal","Long","Map","MapAccessor","MapInternal","Null","RecordWriter","Row","RowAccessor","RowColumnIter","RowFormatter","Short","Str","TimestampMicros","TimestampMillis","UByte","UInt","ULong","UShort","api","count","curr","elements","entries","fields","fields","fmt","get_bool","get_bool","get_byte","get_byte","get_bytes","get_bytes","get_decimal","get_decimal","get_double","get_double","get_float","get_float","get_group","get_group","get_int","get_int","get_keys","get_list","get_list","get_long","get_long","get_map","get_map","get_short","get_short","get_string","get_string","get_timestamp_micros","get_timestamp_micros","get_timestamp_millis","get_timestamp_millis","get_ubyte","get_ubyte","get_uint","get_uint","get_ulong","get_ulong","get_ushort","get_ushort","get_values","reader","record_writer","schema","triplet","write_to_row_group","Bool","Byte","Bytes","Date","Decimal","Double","Field","Float","Group","Int","List","ListAccessor","ListInternal","Long","Map","MapAccessor","MapInternal","MapList","Null","Row","RowAccessor","RowColumnIter","RowFormatter","Short","Str","TimestampMicros","TimestampMillis","UByte","UInt","ULong","UShort","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","convert_bool","convert_byte_array","convert_date_to_string","convert_decimal_to_string","convert_double","convert_float","convert_int32","convert_int64","convert_int96","convert_timestamp_micros_to_string","convert_timestamp_millis_to_string","convert_timestamp_secs_to_string","count","curr","elements","elements","elements","entries","entries","eq","eq","eq","eq","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","get_bool","get_bool","get_bool","get_bool","get_bool","get_byte","get_byte","get_byte","get_byte","get_byte","get_bytes","get_bytes","get_bytes","get_bytes","get_bytes","get_column_iter","get_decimal","get_decimal","get_decimal","get_decimal","get_decimal","get_double","get_double","get_double","get_double","get_double","get_float","get_float","get_float","get_float","get_float","get_group","get_group","get_group","get_group","get_group","get_int","get_int","get_int","get_int","get_int","get_keys","get_keys","get_list","get_list","get_list","get_list","get_list","get_long","get_long","get_long","get_long","get_long","get_map","get_map","get_map","get_map","get_map","get_short","get_short","get_short","get_short","get_short","get_string","get_string","get_string","get_string","get_string","get_timestamp_micros","get_timestamp_micros","get_timestamp_micros","get_timestamp_micros","get_timestamp_micros","get_timestamp_millis","get_timestamp_millis","get_timestamp_millis","get_timestamp_millis","get_timestamp_millis","get_type_name","get_ubyte","get_ubyte","get_ubyte","get_ubyte","get_ubyte","get_uint","get_uint","get_uint","get_uint","get_uint","get_ulong","get_ulong","get_ulong","get_ulong","get_ulong","get_ushort","get_ushort","get_ushort","get_ushort","get_ushort","get_values","get_values","into","into","into","into","into","into","into_iter","is_primitive","len","len","len","list_complex_accessor","list_primitive_accessor","make_list","make_map","make_row","map_list_primitive_accessor","multiunzip","next","nyi","row_complex_accessor","row_primitive_accessor","to_json_value","to_json_value","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","DEFAULT_BATCH_SIZE","Either","GroupReader","KeyValueReader","Left","OptionReader","PrimitiveReader","Reader","ReaderIter","RepeatedReader","Right","RowIter","TreeBuilder","advance_columns","as_iter","batch_size","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cast","cast","cast","cast","cast","current_def_level","current_rep_level","current_row_group","default","descr","field_name","file_reader","fmt","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_file","from_file_into","from_row_group","get_proj_descr","has_next","into","into","into","into","into","into_iter","into_iter","is_element_type","new","new","new","next","next","num_row_groups","option","project","read","read_field","reader","reader_tree","records_left","repetition","root_reader","row_iter","to_string","tree_builder","tree_builder","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_batch_size","with_batch_size","RecordWriter","schema","write_to_row_group","BoolTripletIter","ByteArrayTripletIter","DoubleTripletIter","FixedLenByteArrayTripletIter","FloatTripletIter","Int32TripletIter","Int64TripletIter","Int96TripletIter","TripletIter","TypedTripletIter","batch_size","borrow","borrow","borrow_mut","borrow_mut","cast","cast","column_descr","column_descr","curr_triplet_index","current_def_level","current_def_level","current_rep_level","current_rep_level","current_value","current_value","def_levels","from","from","from_cast","from_cast","has_next","has_next","has_next","into","into","is_null","max_def_level","max_def_level","max_def_level","max_rep_level","max_rep_level","max_rep_level","new","new","read_next","read_next","reader","rep_levels","triplet_enum_func","triplets_left","try_from","try_from","try_into","try_into","type_id","type_id","values","parser","printer","types","visitor","Parser","Tokenizer","add_group_type","add_primitive_type","add_type","assert_token","backtrack","borrow","borrow","borrow_mut","borrow_mut","cast","cast","from","from","from_cast","from_cast","from_str","index","into","into","into_iter","is_schema_delim","next","parse_bool","parse_child_types","parse_i32","parse_message_type","parse_message_type","parse_timeunit","split_token","tokenizer","tokens","try_from","try_from","try_into","try_into","type_id","type_id","INDENT_WIDTH","Printer","borrow","borrow_mut","cast","from","from_cast","indent","into","new","output","print","print_column_chunk_metadata","print_dashes","print_file_metadata","print_indent","print_logical_and_converted","print_parquet_metadata","print_row_group_metadata","print_schema","print_timeunit","try_from","try_into","type_id","BasicTypeInfo","ColumnDescPtr","ColumnDescriptor","ColumnPath","GroupType","GroupTypeBuilder","PrimitiveType","PrimitiveTypeBuilder","SchemaDescPtr","SchemaDescriptor","Type","TypePtr","alloc","alloc","alloc","append","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build_tree","cast","cast","cast","cast","cast","cast","cast","check_contains","check_decimal_precision_scale","clone","clone","clone","clone_into","clone_into","clone_into","column","column_root_of","columns","converted_type","converted_type","converted_type","converted_type","converted_type","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fields","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_thrift","from_thrift_helper","get_basic_info","get_column_root","get_column_root_idx","get_column_root_ptr","get_fields","get_physical_type","get_precision","get_scale","group_type_builder","has_id","has_repetition","hash","id","id","id","id","into","into","into","into","into","into","into","is_group","is_optional","is_primitive","is_schema","leaf_to_base","leaves","length","logical_type","logical_type","logical_type","logical_type","logical_type","max_def_level","max_def_level","max_rep_level","max_rep_level","name","name","name","name","name","name","name","new","new","new","new","new","num_columns","parts","parts","path","path","phantom","phantom","phantom","physical_type","physical_type","precision","primitive_type","primitive_type_builder","ptr","ptr","ptr","repetition","repetition","repetition","repetition","root_schema","root_schema_ptr","scale","schema","self_type","self_type_ptr","sort_order","string","to_owned","to_owned","to_owned","to_string","to_thrift","to_thrift_helper","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_length","type_precision","type_scale","with_converted_type","with_converted_type","with_fields","with_id","with_id","with_length","with_logical_type","with_logical_type","with_precision","with_repetition","with_repetition","with_scale","basic_info","basic_info","fields","physical_type","precision","scale","type_length","TypeVisitor","dispatch","visit_list","visit_list_with_item","visit_map","visit_primitive","visit_struct"],"q":[[0,"parquet"],[11,"parquet::arrow"],[62,"parquet::arrow::arrow_reader"],[233,"parquet::arrow::arrow_reader::filter"],[263,"parquet::arrow::arrow_reader::selection"],[319,"parquet::arrow::arrow_writer"],[434,"parquet::arrow::arrow_writer::byte_array"],[528,"parquet::arrow::arrow_writer::byte_array::FallbackEncoderImpl"],[535,"parquet::arrow::arrow_writer::levels"],[601,"parquet::arrow::async_reader"],[736,"parquet::arrow::async_reader::ColumnChunkData"],[740,"parquet::arrow::async_reader::metadata"],[771,"parquet::arrow::async_reader::store"],[797,"parquet::arrow::async_writer"],[835,"parquet::arrow::buffer"],[838,"parquet::arrow::buffer::bit_util"],[841,"parquet::arrow::buffer::dictionary_buffer"],[863,"parquet::arrow::buffer::dictionary_buffer::DictionaryBuffer"],[866,"parquet::arrow::buffer::offset_buffer"],[891,"parquet::arrow::decoder"],[895,"parquet::arrow::decoder::delta_byte_array"],[915,"parquet::arrow::decoder::dictionary_index"],[933,"parquet::arrow::record_reader"],[984,"parquet::arrow::record_reader::buffer"],[1021,"parquet::arrow::record_reader::definition_levels"],[1102,"parquet::arrow::record_reader::definition_levels::BufferInner"],[1106,"parquet::basic"],[1446,"parquet::basic::LogicalType"],[1454,"parquet::bloom_filter"],[1512,"parquet::column"],[1515,"parquet::column::page"],[1601,"parquet::column::page::Page"],[1620,"parquet::column::reader"],[1677,"parquet::column::reader::decoder"],[1770,"parquet::column::writer"],[1941,"parquet::column::writer::encoder"],[2016,"parquet::data_type"],[2327,"parquet::data_type::Decimal"],[2336,"parquet::data_type::private"],[2348,"parquet::errors"],[2382,"parquet::file"],[2393,"parquet::file::footer"],[2398,"parquet::file::metadata"],[2662,"parquet::file::page_encoding_stats"],[2684,"parquet::file::page_index"],[2686,"parquet::file::page_index::index"],[2758,"parquet::file::page_index::index_reader"],[2763,"parquet::file::properties"],[3013,"parquet::file::reader"],[3050,"parquet::file::serialized_reader"],[3166,"parquet::file::serialized_reader::SerializedPageReaderState"],[3172,"parquet::file::statistics"],[3264,"parquet::file::statistics::private"],[3267,"parquet::file::writer"],[3390,"parquet::format"],[4956,"parquet::record"],[5040,"parquet::record::api"],[5291,"parquet::record::reader"],[5390,"parquet::record::record_writer"],[5393,"parquet::record::triplet"],[5451,"parquet::schema"],[5455,"parquet::schema::parser"],[5494,"parquet::schema::printer"],[5518,"parquet::schema::types"],[5731,"parquet::schema::types::Type"],[5738,"parquet::schema::visitor"],[5745,"arrow_schema::schema"],[5746,"core::fmt"],[5747,"core::fmt"],[5748,"arrow_schema::fields"],[5749,"core::option"],[5750,"alloc::vec"],[5751,"core::result"],[5752,"core::any"],[5753,"core::marker"],[5754,"alloc::boxed"],[5755,"arrow_array::record_batch"],[5756,"arrow_array::array::boolean_array"],[5757,"arrow_schema::error"],[5758,"alloc::sync"],[5759,"arrow_schema::schema"],[5760,"core::iter::traits::iterator"],[5761,"core::ops::range"],[5762,"std::io"],[5763,"arrow_schema::datatype"],[5764,"core::slice::iter"],[5765,"bytes::bytes"],[5766,"arrow_array::array::primitive_array"],[5767,"arrow_array::array::primitive_array"],[5768,"arrow_array::array::primitive_array"],[5769,"integer_encoding::fixed"],[5770,"std::io::error"],[5771,"arrow_array::array"],[5772,"alloc::vec::into_iter"],[5773,"arrow_array::array"],[5774,"core::ops::function"],[5775,"arrow_array::array::list_array"],[5776,"arrow_array::array::struct_array"],[5777,"futures_core::future"],[5778,"core::marker"],[5779,"core::task::wake"],[5780,"core::task::poll"],[5781,"object_store"],[5782,"object_store"],[5783,"arrow_buffer::native"],[5784,"core::cmp"],[5785,"arrow_buffer::buffer::immutable"],[5786,"core::fmt"],[5787,"arrow_buffer::builder::boolean"],[5788,"core::cmp"],[5789,"alloc::string"],[5790,"core::marker"],[5791,"snap::error"],[5792,"core::str::error"],[5793,"thrift::errors"],[5794,"core::cell"],[5795,"std::io"],[5796,"core::cmp"],[5797,"std::path"],[5798,"core::ops::function"],[5799,"thrift::protocol"],[5800,"thrift"],[5801,"thrift::protocol"],[5802,"std::collections::hash::map"],[5803,"core::fmt"]],"d":["Provides API for reading/writing Arrow RecordBatches and …","Contains Rust mappings for Thrift definition. Refer to …","Bloom filter implementation specific to Parquet, as …","Low level column reader and writer APIs.","Data types that connect Parquet physical types with their …","Common Parquet errors and macros.","Defines a an item with an experimental public API","Main entrypoint for working with Parquet API.","Automatically generated code for reading parquet thrift …","Contains record-based API for reading Parquet files.","Parquet schema definitions and methods to print and parse …","Schema metadata key used to store serialized Arrow IPC …","","","Schema information necessary to decode a parquet file as …","The value of this metadata key, if present on …","","A <code>ProjectionMask</code> identifies a set of columns within a …","Create a <code>ProjectionMask</code> which selects all columns","Contains reader which reads parquet data into arrow …","Convert arrow schema to parquet schema","Contains writer which writes arrow data into parquet data.","Provides <code>async</code> API for reading parquet files as <code>RecordBatch</code>…","Contains async writer which writes arrow data into parquet …","","","","","Logic for reading data into arrow buffers","","","","","","","Specialized decoders optimised for decoding to arrow format","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the leaf column <code>leaf_idx</code> is included by …","Create a <code>ProjectionMask</code> which selects only the specified …","","If present a leaf column should be included if the value at","Convert a parquet <code>SchemaDescriptor</code> to <code>FieldLevels</code>","Convert Parquet schema to Arrow schema including optional …","Convert parquet schema to arrow schema including optional …","","Create a <code>ProjectionMask</code> which selects only the specified …","","","","","","","","","A predicate operating on <code>RecordBatch</code>","An <code>ArrowPredicate</code> created from an <code>FnMut</code>","A generic builder for constructing sync or async arrow …","The cheaply clone-able metadata necessary to construct a …","Options that control how metadata is read for a parquet …","An <code>Iterator&lt;Item = ArrowResult&lt;RecordBatch&gt;&gt;</code> that yields …","A synchronous builder used to construct …","","","A <code>RowFilter</code> allows pushing down a filter predicate to skip …","A collection of row groups","<code>RowSelection</code> allows selecting or skipping a provided …","<code>RowSelection</code> is a collection of <code>RowSelector</code> used to skip …","Applies an optional offset and limit to an optional …","","","","","","","","","","","","","","","","","Build a <code>ParquetRecordBatchReader</code>","Build a new <code>ParquetRecordBatchStream</code>","Build a <code>ParquetRecordBatchReader</code>","","","","","","","","","","","Returns a <code>PageIterator</code> for the column chunks with the …","","","","Evaluate this predicate for the given <code>RecordBatch</code> …","Evaluates an <code>ArrowPredicate</code> returning the <code>RowSelection</code>","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Loads <code>ArrowReaderMetadata</code> from the provided <code>ChunkReader</code>","Returns a new <code>ArrowReaderMetadata</code> for this builder","Returns a reference to the <code>ParquetMetaData</code> for this …","Returns a reference to the <code>ParquetMetaData</code> for this …","","","","","","Create a new <code>ParquetRecordBatchStreamBuilder</code> with the …","Create a new <code>ParquetRecordBatchReader</code> that will read at …","Create a new <code>ArrowReaderOptions</code> with the default settings","","Create a <code>ParquetRecordBatchReaderBuilder</code> from the provided …","Create a <code>ParquetRecordBatchStreamBuilder</code> from the provided …","Create a <code>ParquetRecordBatchReaderBuilder</code> from the provided …","Create a new <code>ParquetRecordBatchStreamBuilder</code> with the …","","","Get the number of rows in this collection","","","","","Returns the parquet <code>SchemaDescriptor</code> for this parquet file","Returns the parquet <code>SchemaDescriptor</code> for this parquet file","A list of <code>ArrowPredicate</code>","Returns the <code>ProjectionMask</code> that describes the columns …","","","","","","The number of rows","","","Optional list of row group indices to scan","","Returns the arrow <code>SchemaRef</code> for this parquet file","","Returns the arrow <code>SchemaRef</code> for this parquet file","","","","","","","","","","Returns <code>true</code> if <code>selection</code> is <code>None</code> or selects some rows","If true, skip <code>row_count</code> rows","","","","","","","","","","","","","","","","Create a new <code>ParquetRecordBatchReaderBuilder</code>","Create a new <code>ParquetRecordBatchReaderBuilder</code>","Create a new <code>ParquetRecordBatchReader</code> from the provided …","","Create a new <code>ParquetRecordBatchReaderBuilder</code> with …","Create a new <code>ParquetRecordBatchReaderBuilder</code> with …","Create a new <code>ParquetRecordBatchReader</code> from the provided …","","","","","","","Set the size of <code>RecordBatch</code> to produce. Defaults to 1024 …","Provide a limit to the number of rows to be read","Provide an offset to skip over the given number of rows","Set this true to enable decoding of the PageIndex if …","Only read data from the provided column indexes","Provide a <code>RowFilter</code> to skip decoding rows","Only read data from the provided row group indexes","Provide a <code>RowSelection</code> to filter out rows, and avoid …","Parquet files generated by some writers may contain …","A predicate operating on <code>RecordBatch</code>","An <code>ArrowPredicate</code> created from an <code>FnMut</code>","A <code>RowFilter</code> allows pushing down a filter predicate to skip …","","","","","","","Evaluate this predicate for the given <code>RecordBatch</code> …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ArrowPredicateFn</code>. <code>f</code> will be passed batches …","Create a new <code>RowFilter</code> from an array of <code>ArrowPredicate</code>","A list of <code>ArrowPredicate</code>","Returns the <code>ProjectionMask</code> that describes the columns …","","","","","","","","","<code>RowSelection</code> allows selecting or skipping a provided …","<code>RowSelection</code> is a collection of <code>RowSelector</code> used to skip …","","Given a <code>RowSelection</code> computed under <code>self</code>, returns the …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Creates a <code>RowSelection</code> from an iterator of consecutive …","Creates a <code>RowSelection</code> from a slice of <code>BooleanArray</code>","Creates a <code>RowSelection</code> from a slice of uncombined …","Combine two lists of <code>RowSelection</code> return the intersection …","Compute the intersection of two <code>RowSelection</code> For example: …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator over the <code>RowSelector</code>s for this …","Limit this <code>RowSelection</code> to only select <code>limit</code> rows","Applies an offset to this <code>RowSelection</code>, skipping the first …","Returns the number of selected rows","The number of rows","Given an offset index, return the byte ranges for all data …","Select <code>row_count</code> rows","","Returns <code>true</code> if this <code>RowSelection</code> selects any rows","Skip <code>row_count</code> rows","If true, skip <code>row_count</code> rows","Splits off the first <code>row_count</code> from this <code>RowSelection</code>","","","Trims this <code>RowSelection</code> removing any trailing skips","","","","","","","A list of <code>Bytes</code> comprising a single column chunk","Encodes a leaf column to <code>ArrowPageWriter</code>","","Encodes <code>RecordBatch</code> to a parquet row group","Arrow writer","","A <code>Read</code> for an iterator of <code>Bytes</code>","","A shared <code>ArrowColumnChunk</code>","","Additional <code>KeyValue</code> metadata to be written in addition to …","A copy of the Arrow schema.","","","","","","","","","","","","","","","","","","","","","","Close and finalize the underlying Parquet writer","","","","","","","Flushes all buffered rows into a new row group","Returns metadata for any flushed row groups","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Get an <code>ArrowColumnWriter</code> along with a reference to its …","","","","","Returns the estimated total bytes for this column writer","","Returns 12-byte values representing 3 values of months, …","Returns 12-byte values representing 3 values of months, …","","The in-progress row group if any","Returns the number of rows buffered in the in progress row …","Returns the estimated length in bytes of the current in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Flushes any outstanding data and returns the underlying …","","","Parquet definition and repetition levels","The length of arrays to write to each row group","","","","","","","","","","","","","","","","","","","","Try to create a new Arrow writer","","","","","","","","Encodes the provided <code>RecordBatch</code>","","","Write the leaves of <code>array</code> in depth-first order to <code>writers</code> …","","","","Underlying Parquet writer","","","<code>Storage</code> for the <code>Interner</code> used by <code>DictEncoder</code>","","","A dictionary encoder for byte array data","A fallback encoder, i.e. non-dictionary, for <code>ByteArray</code>","The fallback encoder in use","","","","","","","","","","","","","","","","","","","Computes the min and max for the provided array and indices","","","","","","","Encodes the provided <code>values</code> and <code>indices</code> to <code>encoder</code>","Encode <code>values</code> to the in-progress page","Encode <code>values</code> to the in-progress page","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create the fallback encoder for the given <code>ColumnDescPtr</code> …","","","Encoded dictionary data","","","","","","","","","","","","","","","","","","","","","","","","","","","The definition and repetition level of an array within a …","The data necessary to write a primitive Arrow array to …","A helper to construct <code>LevelInfo</code> from a potentially nested …","A list array, contains the <code>LevelInfoBuilder</code> of the child …","A primitive, leaf array","A list array, contains the <code>LevelInfoBuilder</code> of its …","","","","","","","Performs a depth-first scan of the children of <code>array</code>, …","","","","","","","","The current definition level","","Array’s definition levels","","","","","Finish this <code>LevelInfoBuilder</code> returning the <code>LevelInfo</code> for …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the DataType can be represented as a …","The maximum definition level for this leaf column","The maximum repetition for this leaf column","","","The corresponding array identifying non-null slices of data","The current repetition level","","Array’s optional repetition levels","","","","","","","","","Create a new <code>LevelInfoBuilder</code> for the given <code>Field</code> and …","","","","Visits all children of this node in depth first order","Given an <code>array</code>, write the level data for the elements in …","Write <code>range</code> elements from FixedSizeListArray with child …","Write a primitive array, as defined by <code>is_leaf</code>","Write <code>range</code> elements from ListArray <code>array</code>","Write <code>range</code> elements from StructArray <code>array</code>","The asynchronous interface used by <code>ParquetRecordBatchStream</code>…","An in-memory column chunk","Implements <code>PageIterator</code> for a single column chunk, …","Decoding a batch","Full column chunk and its offset","Contains the error value","Error","An in-memory collection of column chunks","At the start of a new row group, or the end of the parquet …","Contains the success value","Implements <code>AsyncFileReader</code> for a parquet file in object …","An asynchronous <code>Stream</code> of <code>RecordBatch</code> for a parquet file …","A builder used to construct a <code>ParquetRecordBatchStream</code> for …","","<code>ReaderFactory</code> is used by <code>ParquetRecordBatchStream</code> to create","Reading data from input","Column chunk data representing only a subset of data pages","","","","","","","","","","","","","","","","Build a new <code>ParquetRecordBatchStream</code>","","","","","","","","","","","Fetches the necessary column data into memory","Fetches parquet metadata","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Retrieve multiple byte ranges. The default implementation …","Retrieve the bytes in <code>range</code>","","Provides asynchronous access to the <code>ParquetMetaData</code> of a …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Create a new <code>ParquetRecordBatchStreamBuilder</code> with the …","Create a <code>ParquetRecordBatchStreamBuilder</code> from the provided …","Create a new <code>ParquetRecordBatchStreamBuilder</code> with the …","","","","","","","","","","","Reads the next row group with the provided <code>selection</code>, …","This is an option so it can be moved into a future","","","","","Returns the <code>SchemaRef</code> for this parquet file","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set of data pages included in this sparse chunk. Each …","","Length of the full column chunk","","A data source that can be used with <code>MetadataLoader</code> to load …","","An asynchronous interface to load <code>ParquetMetaData</code> from an …","","","","","","","","","Function that fetches byte ranges asynchronously","Fetches parquet metadata","Returns the finished <code>ParquetMetaData</code>","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>MetadataLoader</code> by reading the footer …","Loads the page index, if any","The in-progress metadata","Create a new <code>MetadataLoader</code> from an existing …","The offset and bytes of remaining unparsed data","","","","","","","Implements <code>AsyncFileReader</code> for a parquet file in object …","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","Creates a new <code>ParquetObjectReader</code> for the provided …","","","","","","","","Provide a hint as to the size of the parquet file’s …","Load the Column Index as part of <code>Self::get_metadata</code>","Load the Offset Index as part of <code>Self::get_metadata</code>","Async arrow writer.","A buffer with interior mutability shared by the <code>ArrowWriter</code>…","Append <code>KeyValue</code> metadata in addition to those in …","Async writer provided by caller","","","","","The inner buffer for reading and writing","Trigger forced flushing once buffer size reaches this value","","","","","Close and finalize the writer.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The inner buffer shared by the <code>sync_writer</code> and the …","Underlying sync writer","","Flush the data in the <code>SharedBuffer</code> into the <code>async_writer</code> …","","","","","Try to create a new Async Arrow Writer.","","","Enqueues the provided <code>RecordBatch</code> to be written","","","","","","","Counts the number of set bits in the provided range","Iterates through the set bit positions in <code>bytes</code> in reverse …","Performs big endian sign extension","","An array of variable length byte arrays that are …","","Returns a mutable reference to a keys array","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Converts this into an <code>ArrayRef</code> with the provided <code>data_type</code> …","","","","","Returns a mutable reference to a values array","","","","","","","A buffer of variable-sized byte arrays that can be …","","","","","Validates that <code>&amp;self.values[start_offset..]</code> is a valid …","","","Extends this buffer with a list of keys","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Converts this into an <code>ArrayRef</code> with the provided <code>data_type</code> …","","Returns the number of byte arrays in this buffer","","","","","","","If <code>validate_utf8</code> this verifies that the first character of …","","","","","","","Decoder for <code>Encoding::DELTA_BYTE_ARRAY</code>","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Create a new <code>DeltaByteArrayDecoder</code> with the provided data …","","Read up to <code>len</code> values, returning the number of values read …","Returns the number of values remaining","Skip up to <code>to_skip</code> values, returning the number of values …","","","","","Decoder for <code>Encoding::RLE_DICTIONARY</code> indices","","","","Decoder for the dictionary offsets array","Returns the argument unchanged.","","We want to decode the offsets in chunks so we will …","Current length of <code>index_buf</code>","Current offset into <code>index_buf</code>. If <code>index_buf_offset</code> == …","Calls <code>U::from(self)</code>.","This is a maximum as the null count is not always known, …","Create a new <code>DictIndexDecoder</code> with the provided data page, …","Read up to <code>len</code> values, returning the number of values read …","Skip up to <code>to_skip</code> values, returning the number of values …","","","","","A generic stateful column reader that delimits semantic …","A <code>RecordReader</code> is a stateful column reader that delimits …","","","","","","","","","Returns bitmap data.","Returns currently stored null bitmap data. The side effect …","Returns definition level data. The implementation has side …","Returns currently stored buffer data. The side effect is …","Return repetition level data. The side effect is similar …","The decoder for the definition levels if any","","","","","Returns the argument unchanged.","","True if the end of the current data page denotes the end …","Calls <code>U::from(self)</code>.","Create a new <code>GenericRecordReader</code>","","The total number of values stored in the data page.","The number of values from the current data page that has …","Returns number of records stored in buffer.","Number of buffered records","Number of buffered records","Return number of values stored in buffer. If the parquet …","Number of buffered levels / null-padded values","Number of buffered levels / null-padded values","Returns true if we do not need to unpack the nullability …","","Try to read one batch of data returning the number of …","Try to read <code>num_records</code> of column data into internal …","The decoder for the repetition levels if any","","","Reset state of record reader. Should be called after …","Set the current page reader.","Try to skip the next <code>num_records</code> rows","","","","","","The decoder for the values","A buffer that supports writing new data to the end, and …","","A typed buffer similar to <code>Vec&lt;T&gt;</code> but using <code>MutableBuffer</code> …","A marker trait for scalar types","","A <code>BufferQueue</code> capable of storing column values","Placeholder to allow <code>T</code> as an invariant generic parameter …","","","","","","","Consumes the contents of this <code>BufferQueue</code>","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Length in elements of size T","","If a column contains nulls, more level data may be read …","","","","","Sets the length of the <code>BufferQueue</code>.","","Returns a <code>Self::Slice</code> with at least <code>batch_size</code> capacity …","","","","","","","","","Compute levels and null mask","Only compute null bitmask - requires max level to be 1","","","An optimized decoder for decoding RLE and BIT_PACKED data …","","","","","","","","","","","","","","","","","Returns the built null bitmask","Returns the built level data","","","","Decodes a VLQ encoded little endian integer and returns it","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The length of this buffer","","","","","","","","","","","","","","","","Skips <code>level_num</code> definition levels","","","","","","","","","","","","","","","","","","","","","Bit packed encoding.","","","A BSON document embedded within a single BINARY column.","","Encoding for floating-point data.","Represents a valid brotli compression level.","","","Column order that specifies what method was used to …","Supported compression algorithms.","Common types (converted types) used by frameworks when …","","","A date stored as days since Unix epoch, encoded as the …","A decimal value. This may be used to annotate binary or …","Delta encoding for integers, either INT32 or INT64.","Incremental encoding for byte arrays.","Encoding for byte arrays to separate the length values and …","","","","","","","An enum is converted into a binary field","Encodings supported by Parquet. Not all encodings are …","","","","","","Represents a valid gzip compression level.","","","","","An interval of time.","A signed 16 bit integer value stored as INT32 physical …","A signed 32 bit integer value stored as INT32 physical …","A signed 64 bit integer value stored as INT64 physical …","A signed 8 bit integer value stored as INT32 physical type.","","","A JSON document embedded within a single UTF8 column.","","","A list is converted into an optional field containing a …","","","","","","Logical types used by version 2.4.0+ of the Parquet format.","A map is converted as an optional field containing a …","A key/value pair is converted into a group of two fields.","","","","","Field is optional (can be null) and each record has 0 or 1 …","Default byte encoding.","<strong>Deprecated</strong> dictionary encoding.","Available data pages for Parquet file format. Note that …","Field is repeated and can contain 0 or more values.","Field is required (can not be null) and each record has …","Group packed run length encoding.","Dictionary encoding.","Representation of field types in schema.","Signed (either value or legacy byte-wise) comparison.","","Sort order for page and column statistics.","","","Date and time recorded as microseconds since the Unix …","Date and time recorded as milliseconds since the Unix …","The total number of microseconds since midnight. The value …","The total number of milliseconds since midnight. The value …","Column uses the order defined by its logical or physical …","","","","","","Types supported by Parquet. These physical types are …","An unsigned 16 bit integer value stored as INT32 physical …","An unsigned 32 bit integer value stored as INT32 physical …","An unsigned 64 bit integer value stored as INT64 physical …","An unsigned 8 bit integer value stored as INT32 physical …","","Comparison is undefined.","Undefined column order, means legacy behaviour before …","Unsigned (depending on physical type either value or …","A BYTE_ARRAY actually contains UTF8 encoded chars.","","","","","Represents a valid zstd compression level.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the compression level.","Returns the compression level.","Returns the compression level.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Returns default sort order based on physical type.","Returns sort order for a physical/logical type.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this is <code>Self::SIGNED</code>","","Returns sort order associated with this column order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to create a gzip compression level.","Attempts to create a brotli compression level.","Attempts to create a zstd compression level from a given …","","","","","","","","","","","","","","","","","","","","","","","Each block is 256 bits, broken up into eight contiguous “…","Salt as defined in the spec.","","","A split block Bloom filter. The creation of this structure …","","","","","","","","returns true when every bit that is set in the result of …","Check if an AsBytes value is probably present or …","Check if a hash is in the filter. May return true for …","given an initial offset, and a ChunkReader, try to read …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Create and populate <code>BloomFilterHeader</code> from this bitset for …","","","setting every bit in the block that was also set in the …","Insert an AsBytes value into the filter","Insert a hash into the filter","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","takes as its argument a single unsigned 32-bit integer and …","","Create a new Sbbf with given number of distinct values and …","Create a new Sbbf with given number of bytes, the exact …","","","given a Bytes buffer, try to read out a bloom filter …","Read a new bloom filter from the given offset in the given …","","","","","","","","","","","Write the bloom filter data (header and then bitset) to …","Write the bitset in serialized form to the writer.","Contains Parquet Page definitions and page reader …","Contains column reader API.","Contains column writer API.","Helper struct to represent pages with potentially …","","","","Parquet Page definition.","An iterator over pages of one specific column in a parquet …","Contains metadata for a page","API for reading pages from a column chunk. This offers a …","Contains page write metrics.","API for writing pages in a column chunk.","","","","","","","","","Returns internal byte buffer reference for this page.","","","","","","","","","","Closes resources and flushes underlying sink. Page writer …","Returns underlying page with potentially compressed buffer.","","Returns compressed size in bytes.","","Returns slice of compressed buffer in the page.","","Returns encoding for values in page.","Returns this page <code>Encoding</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Gets the next page in the column chunk associated with …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the page is a dictionary page","Creates <code>CompressedPage</code> from a page with potentially …","Creates new spec with default page write metrics.","The number of levels within the page if known","The number of rows within the page if known","Number of values in page.","Returns number of values in this page.","","","Returns page type.","Returns <code>PageType</code> for this page.","","Gets metadata about the next page, returns an error if no …","Skips reading the next page, returns an error if no column …","Returns optional <code>Statistics</code>.","","","Returns the thrift page header","","","","","","","","","","","","","","Returns uncompressed size in bytes.","","","Writes column chunk metadata into the output stream/sink.","Writes a page into the output stream/sink. Returns …","","","","","","","","","","","","","","","","","","","","","","Column reader for a Parquet type.","Typed value reader for a particular primitive column.","","","","Reads data for a given column chunk, using the provided …","","","","","","","","","","","The decoder for the definition levels if any","The decoder for the definition levels if any","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Gets a specific column reader corresponding to column …","Gets a typed column reader for the specific type <code>T</code>, by “…","Check whether there is more data to read from this column, …","True if the end of the current data page denotes the end …","True if the end of the current data page denotes the end …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates new column reader based on column descriptor and …","","The total number of values stored in the data page.","The total number of values stored in the data page.","The number of values from the current data page that has …","The number of values from the current data page that has …","","","","Reads a batch of values of at most <code>batch_size</code>, returning a …","Read the next page as a dictionary page. If the next page …","Reads a new page and set up the decoders for levels, …","Read up to <code>max_records</code> whole records, returning the number …","The decoder for the repetition levels if any","The decoder for the repetition levels if any","Skips over <code>num_records</code> records, where records are …","","","","","","","The decoder for the values","The decoder for the values","Decodes level data to a <code>LevelsBufferSlice</code>","Decodes value data to a <code>ValuesBufferSlice</code>","An implementation of <code>ColumnValueDecoder</code> for <code>[T::T]</code>","","An implementation of <code>DefinitionLevelDecoder</code> for <code>[i16]</code>","","A slice of levels buffer data that is written to by a …","","","","An implementation of <code>RepetitionLevelDecoder</code> for <code>[i16]</code>","","","","","A slice of values buffer data that is written to by a …","","","","","","","","","","","","","","Returns the capacity of this slice or <code>usize::MAX</code> if no …","Returns the capacity of this slice or <code>usize::MAX</code> if no …","","","","","Count the number of levels in <code>range</code> not equal to <code>max_level</code>","Inspects the buffered repetition levels in the range …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ColumnValueDecoder</code>","","","","","Read values data into <code>out[range]</code> returning the number of …","","","Read definition level data into <code>out[range]</code> returning the …","","Read up to <code>max_records</code> of repetition level data into …","","Set data for this <code>ColumnLevelDecoder</code>","Set the current data page","","","","Set the current dictionary page","","Skips over <code>num_levels</code> definition levels","","Skips over up to <code>num_levels</code> repetition levels …","","Skips over <code>num_values</code> values","","","","","","","","","","","","","","","","","Metadata returned by <code>GenericColumnWriter::close</code>","","Column writer for a Parquet type.","Typed column writer for a primitive column.","","Trait to define default encoding for types, including …","","","","","","","","","","Adds data page. Data page is either buffered in case of …","Optional bloom filter for this column","","","","","","","","","","","","","The total number of bytes written","","","","","","","","","Close this <code>ColumnWriter</code>","Finalizes writes and closes the column writer. Returns …","","","","Optional column index, for filtering","","","","","Evaluate <code>a &gt; b</code> according to underlying logical type.","Signed comparison of bytes arrays","","","","","","","","","","","Performs dictionary fallback. Prepares and writes …","","","Encodes definition or repetition levels for Data Page v1.","Encodes definition or repetition levels for Data Page v2. …","","","","The order of encodings within the generated metadata does …","The order of encodings within the generated metadata does …","Returns encoding for a column when no other encoding is …","Finalises any outstanding data pages and flushes buffered …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Gets a specific column writer corresponding to column …","Returns a reference to a <code>ColumnDescPtr</code>","Returns the estimated total bytes for this column writer","Returns the estimated total bytes for this column writer","Returns total number of bytes written by this column …","Returns total number of rows written by this column writer …","Gets a typed column writer for the specific type <code>T</code>, by “…","Similar to <code>get_typed_column_writer</code> but returns a reference.","Similar to <code>get_typed_column_writer</code> but returns a reference.","Returns true if dictionary is supported for column writer, …","Returns true if dictionary is supported for column writer, …","Try and increment the bytes from right to left.","Try and increment the the string’s bytes from right to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Metadata for this column chunk","","","","","","","Optional offset index, identifying page locations","","","","","","","","","","","The total number of rows written","Returns true if there is enough data for a data page, …","Returns true if we need to fall back to non-dictionary …","","","","","","","","","","","Truncate a UTF8 slice to the longest prefix that is still …","","","","","","","","","","","","","","","","","","","Update the column index and offset index when adding the …","","Updates column writer metrics with each page metadata.","","Perform a conditional update of <code>cur</code>, skipping any NaN …","Writes batch of values, definition levels and repetition …","","Writer may optionally provide pre-calculated statistics …","Assembles and writes column chunk metadata.","Writes compressed data page into underlying sink and …","Writes dictionary page into underlying sink.","Writes mini batch of values, definition and repetition …","A generic encoder of <code>ColumnValues</code> to data and dictionary …","","A collection of <code>ParquetValueType</code> encoded by a …","The encoded values for a data page, with optional …","The encoded data for a dictionary page","The underlying value type of <code>Self::Values</code>","The values encoded by this encoder","","","","","","","","","","","","","","","","","Returns an estimate of the data page size in bytes","","Returns an estimate of the dictionary page size in bytes, …","","Flushes bloom filter if enabled and returns it, otherwise …","","Flush the next data page for this column chunk","","Flush the dictionary page for this column chunk if any. …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns true if this encoder has a dictionary page","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The number of values in this collection","","","Returns the min and max values in this collection, …","","","","Returns the number of buffered values","","","","","","","","","","","","Create a new <code>ColumnValueEncoder</code>","","","","","Write the corresponding values to this <code>ColumnValueEncoder</code>","","Write the values at the indexes in <code>indices</code> to this …","","","Converts an instance of data type to a slice of bytes as <code>u8</code>…","","Rust representation for BYTE_ARRAY and …","","Decimal backed by byte array.","Contains the Parquet physical type information as well as …","Rust representation for Decimal values.","","Wrapper type for performance reasons, this represents …","","","Decimal backed by <code>i32</code>.","","Decimal backed by <code>i64</code>.","","Rust representation for logical type INT96, value is …","","Converts an slice of a data type to a slice of bytes.","","","","","","Returns slice of bytes for this data type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns underlying data as slice of <code>u32</code>.","Returns slice of data.","Returns bytes of unscaled value.","","","","","","","","","","","","","","","","Macro to reduce repetition in making type assertions on …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates new decimal value from <code>ByteArray</code>.","","","","","","","","","","","","","Creates new decimal value from <code>i32</code>.","Creates new decimal value from <code>i64</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns Parquet physical type.","Returns size in bytes for Rust representation of the …","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the underlying buffer is empty.","Gets length of the underlying byte buffer.","","","","","Creates new INT96 type struct with no data set.","Creates new byte array with no data set.","","","","","","Returns decimal precision.","","Returns decimal scale.","","Sets data for this INT96 type.","Set data from another byte buffer.","","","","","","Returns <code>ByteArray</code> instance with slice of values for a data.","Returns slice of bytes for a slice of this data type.","","","","Return the internal representation as a mutable slice","","","","Converts this INT96 into an i64 representing the number of …","Converts this INT96 into an i64 representing the number of …","","","","","","","","","","","","","Converts this INT96 to a number of seconds and nanoseconds …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sealed trait to start to remove specialisation from …","Return the value as an Any to allow for downcasts without …","Return the value as i64 if possible","Return the value as an mutable Any to allow for downcasts …","Return the value as u64 if possible","Decode the value from a given buffer for a higher level …","Return the encoded size for a type","Encode the value directly from a higher level encoder","","Establish the data that will be decoded in a buffer","","Arrow error. Returned when reading into arrow or writing …","“End of file” Parquet error. Returned when IO related …","Contains the error value","An external error variant","General Parquet error. Returned when code violates normal …","","“Not yet implemented” Parquet error. Returned when …","Contains the success value","Parquet error enumeration","A specialized <code>Result</code> for Parquet errors.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","The length of the parquet footer in bytes","","","Contains information about available Parquet metadata.","Per-page encoding information.","Page Index of “Column Index Layout to Support Page …","Configuration via <code>WriterProperties</code> and <code>ReaderProperties</code>","File reader API and methods to access file metadata, row …","Contains implementations of the reader traits FileReader, …","Contains definitions for working with Parquet statistics.","Contains file writer API, and provides methods to write …","Decodes the footer returning the metadata length in bytes","Decodes <code>ParquetMetaData</code> from the provided bytes","Parses column orders from Thrift definition. If no column …","Layout of Parquet file +—————————+—–+…","Decodes <code>ParquetMetaData</code> from the provided <code>Read</code>","Metadata for a column chunk.","Builder for column chunk metadata.","Builder for column index","Metadata for a Parquet file.","Reference counted pointer for <code>FileMetaData</code>.","","Builder for offset index","<code>Index</code> for each row group of each column.","Global Parquet metadata.","<code>PageLocation</code> for each datapage of each row group of each …","Metadata for a row group.","Builder for row group metadata.","Reference counted pointer for <code>RowGroupMetaData</code>.","","","","","","Returns the offset for the bloom filter.","","","","","","","","","","","","","","","","","","","","","Builds row group metadata.","Builds column chunk metadata.","Build and get the thrift metadata of column index","Build and get the thrift metadata of offset index","Returns builder for row group metadata.","Returns builder for column chunk metadata.","Returns the offset and length in bytes of the column chunk …","","","","","","","","","","","","","","","","","Returns column chunk metadata for <code>i</code>th column.","Descriptor for this column.","","Reference counted clone of descriptor for this column.","Returns the column index for this file if loaded","Page index for all pages in each column chunk","Returns the offset for the column index length.","","Returns the offset for the column index.","","Returns the range for the offset index if any","Returns column order for <code>i</code>th column in this file. If …","Column (sort) order used for <code>min</code> and <code>max</code> values of each …","","Path (or identifier) of this column.","Type of this column. Must be primitive.","Returns slice of column chunk metadata.","","","Total size of all compressed column data in this row group.","Returns the total compressed data size of this column …","Compression for this column.","","String message for application that wrote this file.","","","Returns the offset for the column data.","","","","Returns the offset for the dictionary page, if any.","","","All encodings used for this column.","","","","Returns file metadata as reference.","","Returns file offset of this row group in file.","Byte offset in <code>file_path()</code>.","","","File where the column chunk is stored.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Method to convert from Thrift.","Method to convert from Thrift.","Returns the offset for the index page.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>RowGroupMetaData</code> into a …","Converts this <code>ColumnChunkMetaData</code> into a …","","Returns key_value_metadata of this file.","","","","","","Creates new builder from schema descriptor.","Creates new column chunk metadata builder.","","","Creates Parquet metadata from file metadata and a list of …","Creates new file metadata.","Creates Parquet metadata from file metadata, a list of row …","","","Number of columns in this row group.","Returns number of row groups in this file.","Returns number of rows in the file.","Number of rows in this row group.","","","Total number of values in this column chunk.","","","Returns offset indexes in this file.","Offset index for all pages in each column chunk","Returns the offset for the offset index length.","","Returns the offset for the offset index.","","Returns the range for the offset index if any","Returns the offset index for this file if loaded","Returns ordinal of this row group in file","","Returns the offset for the page encoding stats, or <code>None</code> if …","Returns page indexes in this file.","","","","","Returns row group metadata for <code>i</code>th position. Position …","Returns slice of row groups in this file.","","Returns Parquet <code>Type</code> that describes schema in this file.","Returns a reference to schema descriptor.","Returns reference to a schema descriptor.","","","Returns reference counted clone for schema descriptor.","Returns reference counted clone of schema descriptor.","Sets optional bloom filter offset in bytes.","Override the column index","Sets optional column index length in bytes.","Sets optional column index offset in bytes.","Sets column metadata for this row group.","Sets compression.","Sets data page offset in bytes.","Sets optional dictionary page ofset in bytes.","Sets list of encodings for this column chunk.","","Sets file offset in bytes.","Sets optional file path for this column chunk.","Sets optional index page offset in bytes.","Sets number of rows in this row group.","Sets number of values.","Override the offset index","Sets optional offset index length in bytes.","Sets optional offset index offset in bytes.","Sets ordinal for this row group.","Sets page encoding stats for this column chunk.","Sets the sorting order for columns","Sets statistics for this column chunk.","Sets total size in bytes for this row group.","Sets total compressed size in bytes.","Sets total uncompressed size in bytes.","Returns the sort ordering of the rows in this RowGroup if …","","Returns statistics that are set for this column chunk, or …","","Method to convert to Thrift <code>ColumnMetaData</code>","","","","","","Method to convert to Thrift.","Method to convert to Thrift.","Total byte size of all uncompressed column data in this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the total uncompressed data size of this column …","","","","Returns version of this file.","","PageEncodingStats for a column chunk and data page.","","","","","","number of pages of this type with this encoding","encoding of the page","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","the page type (data/dic/…)","","Converts <code>PageEncodingStats</code> into Thrift definition.","","Converts Thrift definition into <code>PageEncodingStats</code>.","","","<code>Index</code> structures holding decoded <code>ColumnIndex</code> information","Support for reading <code>Index</code> and <code>PageLocation</code> from parquet …","","","","","","","","","Typed statistics for a data page in a column chunk. This …","Sometimes reading page index from parquet file will only …","Stores the <code>PageIndex</code> for each page of a column","","PageIndex Statistics for one data page, as described in …","","","","","","","If the min/max elements are ordered, and if so in which …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Get boundary_order of this page index.","","","The indexes, one item per page","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return min/max elements inside ColumnIndex are ordered or …","","The maximum value, It is None when all values are null","","The minimum value, It is None when all values are null","","Null values in the page","","","","","","","","","","Creates a new <code>NativeIndex</code>","","","","Computes the covering range of two optional ranges","","","Reads per-column <code>Index</code> for all columns of a row group by …","Reads per-page <code>PageLocation</code> for all columns of a row group …","Controls the bloom filter to be computed by the writer.","Compute chunk-level statistics but not page-level","Container for column properties that can be changed as …","Default value for <code>BloomFilterProperties::fpp</code>","Default value for <code>BloomFilterProperties::ndv</code>","Default value for …","Default value for <code>WriterProperties::compression</code>","Default value for <code>WriterProperties::created_by</code>","Default value for <code>WriterProperties::dictionary_enabled</code>","Default value for …","Default value for <code>WriterProperties::max_row_group_size</code>","Default value for <code>WriterProperties::max_statistics_size</code>","Default value for <code>WriterProperties::data_page_size_limit</code>","","Default value for <code>WriterProperties::statistics_enabled</code>","Default value for <code>WriterProperties::writer_version</code>","Default value for <code>WriterProperties::write_batch_size</code>","Controls the level of statistics to be computed by the …","Compute no statistics","","","Compute page-level and chunk-level statistics","Configuration settings for reading parquet files.","Builder for parquet file reader configuration. See example …","Reference counted reader properties.","Configuration settings for writing parquet files.","Builder for parquet file writer configuration. See example …","Reference counted writer properties.","Parquet writer version.","","","Returns writer version as <code>i32</code>.","Returns the <code>BloomFilterProperties</code> for the given column","Returns the bloom filter properties, or <code>None</code> if not enabled","bloom filter related properties","","","","","","","","","","","","","","","","","Finalizes the configuration and returns immutable writer …","Finalizes the configuration and returns immutable reader …","Returns builder for reader properties with default values.","Returns builder for writer properties with default values.","","","","","","","","","","","","","","","","","","","","Returns codec options.","","","Returns the maximum length of truncated min/max values in …","","","","","Returns compression codec for a column.","Returns optional compression codec for this column.","Returns <code>created_by</code> string.","","","Returns the maximum page row count","","","Returns data page size limit.","","","Returns data page size limit.","","","","","","","Returns encoding for a data page, when dictionary encoding …","Returns <code>true</code> if dictionary encoding is enabled for a …","Returns <code>Some(true)</code> if dictionary encoding is enabled for …","","Returns encoding for dictionary page, when dictionary …","Returns dictionary page size limit.","","","Returns dictionary page size limit.","Returns encoding for a column, if set. In case when …","Returns optional encoding for this column.","","","","","","","","","","","","","","","False positive probability, should be always between 0 and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Helper method to get existing or new mutable reference of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>key_value_metadata</code> KeyValue pairs.","","","Returns maximum number of rows in a row group.","","","Returns max size for statistics. Only applicable if …","Returns optional max size in bytes for statistics.","","Number of distinct values, should be non-negative to be …","Create a new <code>WriterProperties</code> with the default settings","","","","","Returns whether to read bloom filter","","","Enable/disable backward compatible LZ4.","Sets whether bloom filter is enabled for any column. If …","If <code>value</code> is <code>true</code>, sets bloom filter properties to default …","Sets bloom filter false positive probability (fpp) for any …","Sets the false positive probability for bloom filter for …","Sets number of distinct values (ndv) for bloom filter for …","Sets the number of distinct (unique) values for bloom …","Sets whether a bloom filter should be created for a …","Sets the false positive probability for bloom filter for a …","Sets the number of distinct values for bloom filter for a …","Sets compression codec for a column. Takes precedence over …","Sets flag to enable/disable dictionary encoding for a …","Sets encoding for a column. Takes precedence over globally …","Sets the max length of min/max value fields in the column …","Sets max size for statistics for a column. Takes …","Sets flag to enable/disable statistics for a column. Takes …","Sets compression codec for any column.","Sets compression codec for this column.","Sets “created by” property.","Sets best effort maximum number of rows in a data page.","Sets best effort maximum size of a data page in bytes.","Sets best effort maximum size of a data page in bytes.","Sets flag to enable/disable dictionary encoding for any …","Sets whether or not dictionary encoding is enabled for …","Sets best effort maximum dictionary page size, in bytes.","Sets best effort maximum dictionary page size, in bytes.","Sets encoding for any column.","Sets encoding for this column.","Sets “key_value_metadata” property.","Sets maximum number of rows in a row group.","Sets max statistics size for any column. Applicable only …","Sets max size for statistics for this column.","Enable/disable reading bloom filter","Sets sorting order of rows in the row group if any","Sets flag to enable/disable statistics for any column.","Sets whether or not statistics are enabled for this column.","Sets write batch size.","Sets writer version.","Returns sorting columns.","","","Returns <code>true</code> if statistics are enabled for a column.","Returns <code>Some(true)</code> if statistics are enabled for this …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns default state of the builder.","Returns default state of the builder.","Returns configured batch size for writes.","","","Returns configured writer version.","","","The ChunkReader trait generates readers of chunks of a …","Implementation of page iterator for parquet file.","Parquet file reader API. With this, user can get metadata …","Length should return the total number of bytes in the …","Parquet row group reader API. With this, user can get …","","","","","","","","","Returns the argument unchanged.","","Get a range as bytes","Get bloom filter for the <code>i</code>th column chunk, if present and …","Get page reader for the <code>i</code>th column chunk.","Get value reader for the <code>i</code>th column chunk.","Get a <code>Read</code> starting at the provided file offset","Get the <code>i</code>th row group reader. Note this doesn’t do bound …","Get full iterator of <code>Row</code>s from a file (over all row …","Get iterator of <code>Row</code>s from this row group.","Calls <code>U::from(self)</code>.","","Returns the amount of bytes of the inner source.","Get metadata information about this file.","Get metadata information about this row group.","Creates a page iterator for all row groups in file.","","Get the total number of column chunks in this row group.","Get the total number of row groups for this file.","","","","","Create page iterator from parquet file reader with only …","","A predicate for filtering row groups, invoked with the …","A collection of options for reading a Parquet file.","A builder for <code>ReadOptions</code>. For the predicates that are …","A serialized implementation for Parquet <code>FileReader</code>.","A serialized implementation for Parquet <code>PageReader</code>.","","A serialized implementation for Parquet <code>RowGroupReader</code>.","","","","","","","","","","","","","","","Seal the builder and return the read options","","","","","","","","","Decodes a <code>Page</code> from the provided <code>buffer</code>","The compression codec for this column chunk. Only set for …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","get bloom filter for the <code>i</code>th column","","Get midpoint offset for a row group","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates file reader from a Parquet file. Returns error if …","Creates new row group reader from a file, row group …","Creates a new serialized page reader from a chunk reader …","New builder","Creates file reader from a Parquet file with read options. …","Creates a new serialized page with custom options.","","","","","","Column chunk type.","","","","","","","Reads a <code>PageHeader</code> from the provided <code>Read</code>","Reads a <code>PageHeader</code> from the provided <code>Read</code> returning the …","The chunk reader","","","","","","","","","","","","","","","","","","","","","","","","","Enable reading the page index structures described in “…","Add a predicate on row group metadata to the reading …","Add a range predicate on filtering row groups if their …","Set the <code>ReaderProperties</code> configuration.","Remaining dictionary location if any","","The current byte offset in the reader","Remaining page locations","The length of the chunk in bytes","The total number of rows in this column chunk","","","","","","","","","Statistics for a column chunk and data page.","Typed implementation for <code>Statistics</code>.","Statistics for a particular <code>ParquetValueType</code>","","","","","","","","","","","","","Returns optional value of number of distinct values …","Returns optional value of number of distinct values …","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Converts Thrift definition into <code>Statistics</code>.","Returns <code>true</code> if min value and max value are set. Normally …","Whether or not min and max values are set. Normally both …","Returns <code>true</code> if statistics collected any null values, <code>false</code>…","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Old versions of parquet stored statistics in <code>min</code> and <code>max</code> …","Old versions of parquet stored statistics in <code>min</code> and <code>max</code> …","If <code>true</code> the statistics are compatible with the deprecated …","If <code>true</code> the statistics are compatible with the deprecated …","Returns <code>true</code> if statistics have old <code>min</code> and <code>max</code> fields set.","Returns <code>true</code> if statistics were created using old min/max …","If <code>true</code> populate the deprecated <code>min</code> and <code>max</code> fields instead …","If <code>true</code> populate the deprecated <code>min</code> and <code>max</code> fields instead …","Returns max value of the statistics.","","","Returns slice of bytes that represent max value. Panics if …","Returns max value as bytes of the statistics.","Returns min value of the statistics.","","","Returns slice of bytes that represent min value. Panics if …","Returns min value as bytes of the statistics.","","Creates new typed statistics.","Returns number of null values for the column. Note that …","Returns null count.","","","Returns physical type associated with statistics.","","","","","","","","","","","","","","","Set whether to write the deprecated <code>min</code> and <code>max</code> fields for …","","","","Callback invoked on closing a column chunk","Callback invoked on closing a row group, arguments are:","A wrapper around a <code>ColumnWriter</code> that invokes a callback on …","Parquet file writer API. Provides methods to write row …","A serialized implementation for Parquet <code>PageWriter</code>. Writes …","Parquet row group writer API. Provides methods to access …","A wrapper around a <code>Write</code> that keeps track of the number of …","Append an encoded column chunk from another source without …","","","","","","","","","","","","","","","","","","Returns the number of bytes written to this instance","","","","","","","Closes and finalises file writer, returning the file …","Closes this row group writer and returns row group …","Close this <code>SerializedColumnWriter</code>","","","","","","","","","","Returns metadata for any flushed row groups","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns <code>OnCloseColumnChunk</code> for the next writer","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the underlying writer.","Writes the file footer and returns the underlying writer.","","Create a new <code>TrackedWrite</code> from a <code>Write</code>","Creates new file writer.","Creates a new <code>SerializedRowGroupWriter</code> with:","Create a new <code>SerializedColumnWriter</code> from a <code>ColumnWriter</code> …","Creates new page writer.","Returns the next column writer, if available; otherwise …","Advance <code>self.column_index</code> returning the next <code>ColumnDescPtr</code> …","Returns the next column writer, if available, using the …","Creates new row group from this file writer. In case of IO …","","","","","Returns a reference to the writer properties","","","","","","","","Returns a reference to schema descriptor.","Serializes page header into Thrift. Returns number of …","","Writes magic bytes at the beginning of the file.","","","","","","","","","","","","","","","","","","","Returns a reference to a typed <code>ColumnWriterImpl</code>","Returns a reference to an untyped <code>ColumnWriter</code>","","","Serialize all the bloom filter to the file","Serialize all the column index to the file","","Assembles and writes metadata at the end of the file.","","Serialize all the offset index to the file","","","","","","","","","Bit packed encoding.  This can only be used if the data …","","","","","An embedded BSON document","","Encoding for floating-point data. K byte-streams are …","","","","Bloom filter header is stored at beginning of Bloom filter …","Enum to annotate whether lists of min/max elements inside …","Embedded BSON logical type annotation","","","Description for ColumnIndex. Each <code>&lt;array-field&gt;</code>[i] refers …","Description for column metadata","","Supported compression algorithms.","DEPRECATED: Common types used by frameworks(e.g. hive, …","","","","A Date","","A decimal value.","Delta encoding for integers. This can be used for int …","Incremental-encoded byte array. Prefix lengths are encoded …","Encoding for byte arrays to separate the length values and …","","","","Data page header","New page format allowing reading levels without …","","Decimal logical type annotation","","","","","an enum is converted into a binary field","","","","","","","","Encodings supported by Parquet.  Not all encodings are …","","","","","","","Representation of Schemas","Crypto metadata for files with encrypted footer *","Description for file metadata","","","","","","","An interval of time","","","","A signed integer value.","","Integer logical type annotation","","An embedded JSON document","Embedded JSON logical type annotation","Wrapper struct to store key values","","a list is converted into an optional field containing a …","","","","","","","a map is converted as an optional field containing a …","a key/value pair is converted into a group of two fields","","","","","Time units for logical types","","","Logical type to annotate a column that is always null.","The field is optional (can be null) and each record has 0 …","","Default encoding. BOOLEAN - 1 bit per value. 0 is false; 1 …","Deprecated: Dictionary encoding. The values in the …","statistics of a given page type and encoding","","","","The field is repeated and can contain 0 or more values","This field is required (can not be null) and each record …","Group packed run length encoding. Usable for …","Dictionary encoding: the ids are encoded using the RLE …","","","","Represents a element inside a schema definition.","Wrapper struct to specify sort order","Block-based algorithm type annotation. *","Statistics per row group and per page All fields are …","Empty structs to use as logical type annotations","","","A date/time combination","A date/time combination","A time.","A time","","Time logical type annotation","","Timestamp logical type annotation","Types supported by Parquet.  These types are intended to …","Empty struct to signal the order defined by the physical …","","","","An unsigned integer value.","","","","","a BYTE_ARRAY actually contains UTF8 encoded chars","","","The compression used in the Bloom filter.","","Hash strategy type annotation. xxHash is an extremely fast …","","Unique file identifier part of AAD suffix *","Unique file identifier part of AAD suffix *","AAD prefix *","AAD prefix *","The algorithm for setting bits. *","","Byte offset from beginning of file to Bloom filter data. *","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stores whether both min_values and max_values are ordered …ompression codec *","The column index (in this row group) *","Size of ColumnChunk’s ColumnIndex, in bytes *","File offset of ColumnChunk’s ColumnIndex *","Sort order used for the min_value and max_value fields of …","Metadata for each column chunk in this row group. This …","Compressed (and potentially encrypted) page size in bytes, …","Size of the page, including header. Sum of …","The compression used in the Bloom filter *","DEPRECATED: When the schema is the result of a conversion …","number of pages of this type with this encoding *","The 32bit CRC for the page, to be be calculated as follows:","String for application that wrote this file.  This should …","Crypto metadata of encrypted columns *","","","Byte offset from beginning of file to first data page *","","","","","","","","","","","","","","","","","","","","","","Encoding used for definition levels *","length of the definition levels","If true, indicates this column is sorted in descending …","","Byte offset from the beginning of file to first (only) …","count of distinct values occurring","Encoding used for this data page *","Encoding using this dictionary page *","Encoding used for data in this page *","encoding of the page *","Set of all encodings used for pages in this column chunk. …","Set of all encodings used for this column. The purpose is …","Encrypted column metadata for this chunk *","Encryption algorithm. This field is set only in encrypted …","Encryption algorithm. This field is only used for files …hen the original schema supports field ids, this will …","Byte offset in file_path to the ColumnMetaData *","Byte offset from beginning of file to first page (data or …","File where column data is stored.  If not set, assumed to …","Index within the RowGroup of the first row of the page; …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieval metadata of key used for signing the footer. …","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The hash function used for Bloom filter. *","","Byte offset from beginning of file to root index page *","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","whether the values are compressed. Which means the section …","","If true, the entries in the dictionary are sorted in …","","Retrieval metadata of column encryption key *","Retrieval metadata of key used for encryption of footer, …","Optional key/value metadata *","Optional key/value metadata *","The logical type of this SchemaElement","DEPRECATED: min and max value of the column. Use min_value …","Min and max values for the column, determined by its …","","Column metadata for this chunk. This is the same content …","","","Two lists containing lower and upper bounds for the values …","Name of the field in the schema","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","count of null value in the column","A list containing the number of null values for each page *","A list of Boolean values to determine the validity of the …","If true, nulls will come before non-null values, otherwise,","The size of bitset in bytes *","Nested fields.  Since thrift does not support nested …","Number of NULL values, in this data page. Number of …","Number of rows in this data page. which means pages change …","Number of rows in this row group *","Number of rows in this file *","Number of values, including NULLs, in this data page. *","Number of values in the dictionary *","Number of values, including NULLs, in this data page. *","Number of values in this column *","Offset of the page in the file *","Size of ColumnChunk’s OffsetIndex, in bytes *","File offset of ColumnChunk’s OffsetIndex *","Row group ordinal in the file *","PageLocations, ordered by increasing PageLocation.offset. …","the page type (data/dic/…) *","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Path in schema *","Column path in schema *","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encoding used for repetition levels *","length of the repetition levels","repetition of the field. The root of the schema does not …","Row groups in this file *","","DEPRECATED: Used when this column contains decimal data. …","Parquet schema for this file.  This schema contains …","If set, specifies a sort ordering of the rows in this …","Optional statistics for the data in this page*","optional statistics for the data in this page *","optional statistics for this column chunk","In files encrypted with AAD prefix without storing it, …","In files encrypted with AAD prefix without storing it, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Total byte size of all the uncompressed column data in …","total byte size of all compressed, and potentially …","Total byte size of all compressed (and potentially …","total byte size of all uncompressed pages in this column …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data type for this field. Not set if the current element …","the type of the page: indicates which of the *_header …","Type of this column *","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If type is FIXED_LEN_BYTE_ARRAY, this is the byte length …","Uncompressed page size in bytes (not including this …","","","","Version of this file *","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Boolean value (<code>true</code>, <code>false</code>).","Signed integer INT_8.","General binary value.","Date without a time of day, stores the number of days from …","Decimal value.","IEEE 64-bit floating point value.","API to represent a single field in a <code>Row</code>.","IEEE 32-bit floating point value.","Struct, child elements are tuples of field-value pairs.","Signed integer INT_32.","<code>List</code> represents a list which contains an array of elements.","Trait for type-safe access of an index for a <code>List</code>. Note …","List of elements.","Signed integer INT_64.","<code>Map</code> represents a map which contains a list of key-&gt;value …","Trait for type-safe access of an index for a <code>Map</code>","List of key-value pairs.","Null value.","","<code>Row</code> represents a nested Parquet record.","Trait for type-safe convenient access to fields within a …","<code>RowColumnIter</code> represents an iterator over column names and …","Trait for formatting fields within a Row.","Signed integer INT_16.","UTF-8 encoded character string.","Microseconds from the Unix epoch, 1 January 1970.","Milliseconds from the Unix epoch, 1 January 1970.","","","","","Contains Row enum that is used to represent record in Rust.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains implementation of record assembly and converting …","","Generated schema","","","Boolean value (<code>true</code>, <code>false</code>).","Signed integer INT_8.","General binary value.","Date without a time of day, stores the number of days from …","Decimal value.","IEEE 64-bit floating point value.","API to represent a single field in a <code>Row</code>.","IEEE 32-bit floating point value.","Struct, child elements are tuples of field-value pairs.","Signed integer INT_32.","<code>List</code> represents a list which contains an array of elements.","Trait for type-safe access of an index for a <code>List</code>. Note …","List of elements.","Signed integer INT_64.","<code>Map</code> represents a map which contains a list of key-&gt;value …","Trait for type-safe access of an index for a <code>Map</code>","List of key-value pairs.","","Null value.","<code>Row</code> represents a nested Parquet record.","Trait for type-safe convenient access to fields within a …","<code>RowColumnIter</code> represents an iterator over column names and …","Trait for formatting fields within a Row.","Signed integer INT_16.","UTF-8 encoded character string.","Microseconds from the Unix epoch, 1 January 1970.","Milliseconds from the Unix epoch, 1 January 1970.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts Parquet BOOLEAN type with logical type into <code>bool</code> …","Converts Parquet BYTE_ARRAY type with converted type into …","Helper method to convert Parquet date into a string. Input …","Helper method to convert Parquet decimal into a string. We …","Converts Parquet DOUBLE type with converted type into <code>f64</code> …","Converts Parquet FLOAT type with logical type into <code>f32</code> …","Converts Parquet INT32 type with converted type into <code>i32</code> …","Converts Parquet INT64 type with converted type into <code>i64</code> …","Converts Parquet INT96 (nanosecond timestamps) type and …","Helper method to convert Parquet timestamp into a string. …","Helper method to convert Parquet timestamp into a string. …","Helper method to convert Parquet timestamp into a string. …","","","","","","","","","","","","","","","Get Display reference for a given field.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Get an iterator to go through all columns in the row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the type name.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Determines if this Row represents a primitive value.","Get the number of fields in this row.","Get the number of fields in this row","Get the number of fields in this row","Macro to generate type-safe get_xxx methods for reference …","Macro to generate type-safe get_xxx methods for primitive …","Constructs a <code>List</code> from the list of <code>fields</code> and returns it.","Constructs a <code>Map</code> from the list of <code>entries</code> and returns it.","Constructs a <code>Row</code> from the list of <code>fields</code> and returns it.","Macro to generate type-safe get_xxx methods for primitive …","","","Macro as a shortcut to generate ‘not yet implemented’ …","Macro to generate type-safe get_xxx methods for reference …","Macro to generate type-safe get_xxx methods for primitive …","","","","","","","","","","","","","","","","","","","","","","","","","","","Default batch size for a reader","The enum Either with variants That represents a reference …","","","","","","Reader tree for record assembly","Internal iterator of <code>Row</code>s for a reader.","","","Iterator of <code>Row</code>s. It is used either for a single row group …","Tree builder for <code>Reader</code> enum. Serves as a container of …","Advances leaf columns for the current reader.","Creates iterator of <code>Row</code>s directly from schema descriptor …","","","","","","","","","","","","Creates new root reader for provided schema and row group.","","","","","","Returns current definition level, Method does not advance …","Returns current repetition level. Method does not advance …","","","","Returns field name for the current reader.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates iterator of <code>Row</code>s for all row groups in a file.","Creates a iterator of <code>Row</code>s from a <code>FileReader</code> using the …","Creates iterator of <code>Row</code>s for a specific row group.","Helper method to get schema descriptor for projected …","Returns true, if current reader has more values, false …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if repeated type is an element type for the …","Creates new tree builder with default parameters.","Creates a new iterator of <code>Row</code>s.","","","","","Wraps reader in option reader based on repetition.","Tries to create a iterator of <code>Row</code>s using projections. …","Reads current record as <code>Row</code> from the reader tree. …","Reads current record as <code>Field</code> from the reader tree. …","","Builds tree of readers for the current schema recursively.","","Returns repetition for the current reader.","","","","Returns common tree builder, so the same settings are …","","","","","","","","","","","","","","","","","Sets batch size for this tree builder.","Sets batch size for this row iter.","","Generated schema","","","","","","","","","","High level API wrapper on column reader. Provides …","Internal typed triplet iterator as a wrapper for column …","","","","","","","","Returns column descriptor reference for the current typed …","","","Returns current definition level for a leaf triplet …","Returns current definition level. If field is required, …","Returns current repetition level for a leaf triplet …","Returns current repetition level. If field is required, …","Updates non-null value for current row.","Returns current value. Method does not advance the …","","Returns the argument unchanged.","Returns the argument unchanged.","","","Provides check on values/levels left without invoking the …","Quick check if iterator has more values/levels to read. It …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true, if current value is null. Based on the fact …","Returns max definition level for a leaf triplet iterator","Returns maximum definition level for the triplet iterator …","","Returns max repetition level for a leaf triplet iterator","Returns maximum repetition level for the triplet iterator …","","Creates new triplet for column reader","Creates new typed triplet iterator based on provided …","Invokes underlying typed triplet iterator to buffer …","Advances to the next triplet. Returns true, if there are …","","","Macro to generate simple functions that cover all types of …","","","","","","","","","Parquet schema parser. Provides methods to parse and …","Parquet schema printer. Provides methods to print Parquet …","Contains structs and methods to build Parquet schema and …","","Internal Schema parser. Traverses message type using …","Tokenizer to split message type string into tokens that …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Parses message type as string into a Parquet <code>Type</code> which, …","","","Splits string into tokens; input string can already be …","","","","","","","","","","Struct for printing Parquet message type.","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","Prints file metadata <code>FileMetaData</code> information.","","","Prints Parquet metadata <code>ParquetMetaData</code> information.","","Prints Parquet <code>Type</code> information.","","","","","Basic type info. This contains information such as the …","Type alias for <code>Arc&lt;ColumnDescriptor&gt;</code>.","A descriptor for leaf-level primitive columns. This …","Represents a path in a nested schema","","A builder for group types. All attributes are optional …","","A builder for primitive types. All attributes are optional …","Type alias for <code>Arc&lt;SchemaDescriptor&gt;</code>.","A schema descriptor. This encapsulates the top-level …","Representation of a Parquet type. Used to describe …","Type alias for <code>Arc&lt;Type&gt;</code>.","","","","Appends more components to end of column path.","","","","","","","","","","","","","","","","Creates a new <code>PrimitiveType</code> instance from the collected …","Creates a new <code>GroupType</code> instance from the gathered …","","","","","","","","","Checks if <code>sub_type</code> schema is part of current schema. This …","","","","","","","","Returns <code>ColumnDescriptor</code> for a field position.","","Returns slice of <code>ColumnDescriptor</code>.","Returns <code>ConvertedType</code> value for the type.","Returns <code>ConvertedType</code> for this column.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Method to convert from Thrift.","Constructs a new Type from the <code>elements</code>, starting at index …","Returns <code>BasicTypeInfo</code> information about the type.","Returns column root <code>Type</code> for a leaf position.","Returns the index of the root column for a field position","Returns column root <code>Type</code> pointer for a leaf position.","Gets the fields from this group type. Note that this will …","Gets physical type of this primitive type. Note that this …","Gets precision of this primitive type. Note that this will …","Gets scale of this primitive type. Note that this will …","Creates group type builder with provided column name.","Returns <code>true</code> if id is set, <code>false</code> otherwise.","Returns <code>true</code> if type has repetition field set, <code>false</code> …","","Returns id value for the type.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this type is a group type, <code>false</code> otherwise.","Returns <code>true</code> if this type is repeated or optional. If this …","Returns <code>true</code> if this type is a primitive type, <code>false</code> …","Returns <code>true</code> if this type is the top-level schema type …","","","","Returns <code>LogicalType</code> value for the type.","Returns <code>LogicalType</code> for this column.","","","","Returns maximum definition level for this column.","","Returns maximum repetition level for this column.","","Returns this type’s field name.","Returns field name.","Returns column name.","Returns schema name.","","","","Creates new primitive type builder with provided field …","Creates new group type builder with provided field name.","Creates new column path from vector of field names.","Creates new descriptor for leaf-level column.","Creates new schema descriptor from Parquet schema.","Returns number of leaf-level columns.","","","Returns <code>ColumnPath</code> for this column.","","","","","Returns physical type for this column. Note that it will …","","","","Creates primitive type builder with provided field name …","","","","Returns <code>Repetition</code> value for the type.","","","","Returns schema as <code>Type</code>.","","","","Returns self type <code>Type</code> for this leaf column.","Returns self type <code>TypePtr</code>  for this leaf column.","Returns the sort order for this column","Returns string representation of this column path.","","","","","Method to convert to Thrift.","Constructs list of <code>SchemaElement</code> from the schema using …","","","","","","","","","","","","","","","","","","","","","","Returns type length for this column. Note that it will …","Returns type precision for this column. Note that it will …","Returns type scale for this column. Note that it will …","Sets <code>ConvertedType</code> for this field and returns itself.","Sets <code>ConvertedType</code> for this field and returns itself.","Sets a list of fields that should be child nodes of this …","Sets optional field id and returns itself.","Sets optional field id and returns itself.","Sets type length and returns itself. This is only applied …","Sets <code>LogicalType</code> for this field and returns itself. If …","Sets <code>LogicalType</code> for this field and returns itself.","Sets precision for Parquet DECIMAL physical type and …","Sets <code>Repetition</code> for this field and returns itself.","Sets <code>Repetition</code> for this field and returns itself.","Sets scale for Parquet DECIMAL physical type and returns …","","","","","","","","A utility trait to help user to traverse against parquet …","A utility method which detects input type and calls …","Default implementation when visiting a list.","Called by <code>visit_list</code>.","Called when a map type hit.","Called when a primitive type hit.","Called when a struct type hit."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,5,1,5,1,0,5,1,5,1,5,1,0,5,5,1,5,1,5,1,5,1,1,1,5,1,0,0,0,0,1,5,1,5,1,5,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,19,24,20,19,29,36,20,25,26,19,29,36,20,25,26,19,19,24,19,29,36,20,25,26,25,26,25,26,38,29,36,25,33,0,41,19,24,26,0,19,24,25,26,19,29,36,20,25,26,19,29,36,20,25,26,19,24,19,29,36,20,25,26,36,20,19,24,26,26,19,26,19,24,29,36,26,19,20,25,19,19,19,24,19,36,20,38,29,19,24,25,19,26,39,33,41,19,24,29,36,42,19,24,29,36,19,20,26,19,24,20,26,0,19,24,20,17,0,42,25,25,26,19,29,36,20,25,26,19,29,36,20,25,26,19,24,20,26,19,24,20,19,29,36,20,25,26,19,19,19,25,19,19,19,19,25,0,0,0,41,39,41,39,41,39,33,41,41,41,39,41,39,41,39,41,39,39,33,41,41,41,39,41,39,41,39,0,0,0,17,42,17,42,17,42,17,42,17,42,17,17,42,17,42,42,17,17,42,17,42,17,17,42,17,17,17,17,0,17,42,17,17,17,17,17,42,17,42,17,17,42,42,17,42,17,17,42,17,42,17,42,17,0,0,0,0,0,63,0,63,0,339,48,48,48,67,63,50,52,51,48,67,63,50,52,51,51,50,0,48,67,63,50,52,51,48,48,50,51,52,52,51,48,48,48,48,67,63,50,52,51,48,67,63,50,52,51,0,0,52,0,0,63,0,0,0,52,48,48,48,48,67,63,50,52,51,48,52,52,0,48,50,339,339,67,67,67,50,48,67,63,50,52,51,48,67,63,50,52,51,48,48,67,63,50,52,51,48,48,50,0,0,51,51,0,48,50,0,0,340,340,0,0,0,340,83,87,88,340,87,85,83,88,340,87,85,83,88,340,87,85,83,0,85,83,87,0,0,0,0,88,83,88,88,87,83,87,83,87,87,88,87,83,87,83,85,83,88,340,87,85,83,88,340,87,85,83,87,83,83,88,340,87,85,83,87,87,87,88,87,88,85,88,340,87,85,83,88,340,87,85,83,87,88,340,87,85,83,85,87,87,341,342,343,343,342,343,343,0,0,0,97,97,97,97,95,76,97,95,76,0,97,95,76,95,76,95,76,95,76,76,95,76,76,76,97,95,76,97,95,76,97,95,76,97,95,76,0,76,76,76,76,76,95,76,76,95,76,97,95,76,97,95,76,97,97,95,76,97,97,97,97,97,97,0,0,0,105,103,344,105,0,105,344,0,0,0,0,0,105,103,0,102,23,112,105,23,104,107,103,112,105,23,104,107,103,102,112,105,23,104,107,103,103,103,104,104,104,0,102,112,102,112,105,23,112,105,23,104,107,103,112,105,23,104,107,103,103,21,21,103,21,103,102,112,112,105,23,104,107,103,107,103,102,112,116,0,102,112,23,104,116,102,102,102,107,104,102,112,104,23,116,116,102,23,112,23,107,104,102,23,23,102,23,102,23,23,0,116,103,112,105,23,104,107,103,112,105,23,104,107,103,23,112,105,23,104,107,103,345,346,345,346,0,0,0,115,113,115,113,115,113,114,113,115,0,115,115,113,115,113,115,113,115,115,115,115,115,115,113,115,113,115,113,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,0,0,120,120,120,122,120,122,122,120,120,122,122,122,120,122,120,122,120,122,120,122,122,120,120,122,120,120,122,120,122,120,120,122,120,122,122,122,0,0,0,0,0,0,127,0,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,347,347,348,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,0,0,0,0,0,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,0,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,0,0,0,136,136,0,136,349,136,349,136,136,136,136,136,136,350,349,136,0,350,136,136,350,136,136,136,350,350,136,349,136,136,349,136,0,350,136,136,350,349,136,136,136,136,136,136,136,349,136,350,0,351,0,0,351,0,128,128,128,128,128,128,128,351,128,128,128,128,128,128,128,128,128,128,128,134,128,128,128,128,351,128,351,128,128,128,128,0,0,0,352,353,353,0,352,0,353,139,352,142,140,353,139,352,142,140,139,353,139,352,142,140,139,139,139,140,140,140,142,353,139,352,142,140,353,139,352,142,140,139,353,139,352,142,140,139,142,139,142,140,140,139,140,140,140,142,140,140,142,140,139,140,142,353,139,352,142,140,353,139,352,142,140,353,139,352,142,140,354,354,354,355,144,145,149,146,145,144,0,147,0,0,0,0,150,150,146,146,144,144,144,150,145,147,0,147,0,146,0,147,0,145,145,149,0,150,145,145,145,146,146,146,146,146,0,147,146,147,0,146,149,149,149,147,0,0,146,146,147,0,146,0,148,144,144,0,148,148,144,144,0,151,149,0,147,0,146,146,146,146,152,147,0,0,147,0,0,146,146,146,146,149,151,152,151,146,0,147,147,149,0,145,146,147,148,144,149,150,151,152,153,154,155,145,146,147,148,144,149,150,151,152,153,154,155,145,146,147,148,144,149,150,151,152,153,154,155,145,146,147,148,144,149,150,151,152,153,154,155,145,146,147,148,144,149,150,151,152,153,154,155,144,153,154,155,153,154,155,145,146,147,148,144,149,150,151,152,153,154,155,145,145,146,146,147,147,148,148,144,144,149,149,150,150,151,151,152,152,153,153,154,154,155,155,145,145,146,146,147,148,148,144,144,149,149,150,150,151,151,152,152,153,154,155,145,146,146,147,147,148,144,149,150,151,152,153,154,155,145,146,147,148,144,149,150,151,152,153,154,155,145,146,147,148,152,152,152,145,144,153,154,155,145,146,147,148,144,149,150,151,152,153,154,155,151,144,152,145,146,147,148,144,149,150,151,152,153,154,155,145,146,148,144,149,150,151,152,145,145,146,146,147,148,148,144,144,149,149,150,150,151,152,153,154,155,145,146,147,148,144,149,150,151,152,153,154,155,153,154,155,145,146,147,148,144,149,150,151,152,153,154,155,356,357,358,356,359,359,357,358,0,0,0,0,0,0,0,169,169,89,169,89,169,89,169,89,89,0,169,89,169,89,169,89,169,89,169,89,0,89,89,169,169,169,89,89,169,89,169,89,89,89,0,0,0,89,169,169,169,89,169,89,169,89,169,89,89,89,0,0,0,0,175,175,175,0,0,0,0,0,0,79,80,175,176,79,80,175,176,175,80,79,80,175,176,175,176,175,176,193,79,79,79,80,79,80,79,175,79,80,175,176,79,80,175,176,138,79,80,175,176,176,79,80,176,176,79,175,80,80,79,175,80,138,138,175,175,176,79,79,80,175,176,176,79,80,175,176,79,80,175,176,79,79,80,193,193,360,361,362,360,361,360,361,362,361,362,361,361,360,361,362,360,361,360,361,179,179,0,0,179,179,179,0,179,179,179,179,184,179,184,179,184,0,181,184,181,184,179,184,179,184,0,0,184,181,184,179,184,184,184,181,184,181,184,181,184,0,184,184,184,184,181,184,184,179,184,179,184,179,184,181,184,0,0,0,0,0,0,0,188,0,0,0,188,0,363,135,0,186,185,187,188,186,185,187,188,186,185,185,185,185,364,365,187,188,186,185,364,185,187,186,185,187,187,185,187,188,186,185,187,188,186,185,185,187,188,186,185,135,187,188,186,185,135,187,188,183,186,182,185,363,135,187,186,185,135,187,183,186,182,185,135,187,187,188,186,185,187,188,186,185,187,188,186,185,74,74,366,0,0,0,0,74,0,74,74,0,74,74,74,0,366,0,82,189,74,366,367,82,189,192,74,366,367,82,189,192,189,74,366,367,82,189,192,189,189,74,82,194,82,367,189,194,82,194,82,0,0,194,82,367,194,82,194,82,192,194,82,82,367,0,82,82,0,194,82,194,82,0,82,189,74,366,367,82,189,192,74,366,367,82,189,192,0,82,74,82,82,82,0,0,0,0,368,0,0,74,366,367,82,189,192,0,367,189,367,82,192,192,367,192,189,194,82,194,82,194,82,194,82,194,82,189,82,82,194,82,189,367,367,367,367,367,82,82,0,74,366,367,82,189,192,74,366,367,82,189,192,74,366,367,82,189,192,82,0,82,0,0,82,82,82,82,82,82,82,0,0,0,0,0,81,81,195,92,91,195,92,91,195,92,91,92,91,195,195,195,195,91,81,195,81,195,81,195,81,195,81,195,92,91,195,92,91,195,0,81,195,92,91,195,92,369,91,195,81,195,91,195,81,195,92,91,195,195,92,91,195,92,91,195,81,195,92,91,195,81,195,81,195,195,0,0,0,0,198,0,0,0,0,0,0,198,0,198,0,0,0,0,0,180,196,90,61,170,196,90,61,198,196,90,61,90,61,90,196,90,61,198,199,200,201,202,203,204,205,206,196,90,61,198,199,200,201,202,203,204,205,206,196,90,61,198,199,200,201,202,203,204,205,206,196,90,61,198,199,200,201,202,203,204,205,206,196,90,61,198,199,200,201,202,203,204,205,206,196,90,198,90,196,90,61,196,90,61,198,61,61,90,61,196,90,61,0,196,90,90,61,61,198,196,196,196,196,90,90,61,61,198,196,196,90,90,90,90,90,90,61,61,61,198,199,200,201,202,203,204,205,206,198,196,90,61,198,199,200,201,202,203,204,205,206,198,198,0,180,199,200,201,202,203,204,205,206,180,199,200,201,202,203,204,205,206,180,199,200,201,202,203,204,205,206,180,199,200,201,202,203,204,205,206,180,180,199,200,201,202,203,204,205,206,196,90,61,198,199,200,201,202,203,204,205,206,90,90,196,90,61,0,196,90,196,90,90,61,61,198,0,198,196,196,90,90,61,196,90,61,90,370,196,90,61,370,196,90,61,196,196,196,90,61,198,199,200,201,202,203,204,205,206,196,196,90,61,196,90,61,198,199,200,201,202,203,204,205,206,196,90,61,198,199,200,201,202,203,204,205,206,196,90,61,198,199,200,201,202,203,204,205,206,0,196,371,372,373,371,372,373,371,372,373,191,0,191,191,191,191,191,191,191,0,191,191,171,171,4,171,171,171,171,4,0,0,0,171,171,171,171,0,171,171,171,171,171,171,171,171,171,171,0,171,0,171,171,171,171,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,374,53,215,216,216,78,78,217,219,215,216,34,223,218,78,217,219,215,216,34,223,218,78,215,224,228,217,219,215,216,218,78,78,217,219,215,216,34,223,218,78,34,223,218,78,34,223,218,78,218,78,78,78,34,34,78,78,78,78,78,223,223,223,78,78,218,218,216,218,78,78,78,223,223,216,78,78,215,216,78,78,78,78,78,218,78,34,34,218,78,218,78,78,78,216,34,223,218,78,217,219,215,216,34,223,218,78,217,219,215,216,34,223,218,78,218,78,78,78,217,219,215,216,34,223,218,78,218,78,13,223,223,224,228,215,215,217,219,215,216,34,223,34,215,215,218,34,223,218,223,218,78,78,216,34,34,78,78,78,78,78,34,218,218,78,34,374,53,374,53,34,34,34,223,223,218,223,218,223,218,219,34,219,219,217,219,219,219,219,217,219,219,219,217,219,34,219,219,217,219,217,219,217,219,219,218,218,78,78,78,215,34,223,218,78,218,78,218,218,78,78,217,219,215,216,34,223,218,78,217,219,215,216,34,223,218,78,217,219,215,216,34,223,218,78,78,215,215,13,223,223,0,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,0,229,0,229,229,0,0,236,236,236,236,236,236,236,236,0,236,0,237,0,235,236,237,235,236,237,237,235,236,237,235,236,237,235,236,237,235,236,237,235,235,237,237,235,236,237,235,236,237,235,236,237,236,235,237,237,235,236,237,236,235,235,235,235,235,235,235,236,237,235,236,237,235,236,237,237,235,236,237,0,0,0,0,0,0,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,241,241,247,0,0,0,0,0,0,0,55,258,241,73,243,243,244,246,245,241,73,247,242,243,244,246,245,241,73,247,242,243,244,245,246,73,244,246,245,241,73,247,242,243,241,73,247,242,243,241,73,247,242,243,243,246,246,245,73,244,73,244,73,73,243,73,244,73,73,244,73,73,244,73,73,73,247,242,243,244,73,73,73,243,243,73,73,244,73,73,73,243,243,241,247,242,243,241,241,247,247,241,73,247,242,243,242,244,246,245,241,73,247,242,243,244,246,245,241,73,247,242,243,244,244,246,245,241,73,247,242,243,73,244,73,73,244,73,73,243,243,242,73,55,258,55,258,246,246,245,245,244,243,244,243,244,243,244,244,244,244,244,244,244,244,244,244,243,244,244,244,244,244,243,244,244,244,243,244,244,244,243,245,244,244,243,244,244,73,244,73,73,243,243,241,73,247,242,243,244,246,245,241,73,247,242,243,244,246,245,241,73,247,242,243,244,246,245,241,73,247,242,243,244,245,73,244,73,73,244,73,0,0,0,0,0,0,0,18,251,251,251,251,251,251,251,18,248,248,248,18,250,250,248,251,251,375,250,248,251,251,248,250,251,251,251,251,251,376,0,0,0,0,0,0,0,376,254,256,253,254,376,255,252,256,253,254,376,255,252,252,256,253,254,376,255,252,256,254,0,255,252,253,252,256,253,254,376,255,252,256,253,254,376,255,252,254,254,0,255,256,256,254,256,253,254,376,255,252,256,255,256,254,256,254,256,254,255,252,256,255,255,254,256,254,255,255,253,252,256,253,254,252,0,0,255,255,255,256,256,256,256,256,253,254,376,255,252,256,253,254,376,255,252,256,253,254,376,255,252,252,252,252,252,377,378,378,377,378,377,177,177,177,177,177,177,177,177,0,0,0,177,177,207,177,207,177,177,207,177,207,177,207,177,207,379,207,177,177,207,207,207,177,177,177,177,207,207,177,177,207,177,207,0,177,207,177,177,177,177,177,207,177,207,379,207,177,207,379,207,207,379,207,177,207,207,379,207,177,207,177,207,177,207,379,207,177,0,0,0,177,207,177,207,0,177,207,177,207,177,207,207,0,0,380,0,0,0,0,0,0,0,263,264,264,263,264,263,265,264,263,266,267,265,264,263,266,267,264,263,265,265,265,264,263,266,267,264,263,266,267,263,263,264,263,264,263,263,265,264,264,265,264,263,266,267,265,264,263,266,267,263,265,266,265,264,263,266,267,265,264,264,265,264,263,266,267,263,263,263,264,264,263,263,266,264,264,263,264,263,263,264,264,264,267,267,264,263,263,263,265,264,263,266,267,265,264,263,266,267,265,264,263,266,267,266,266,265,265,264,264,265,264,267,264,267,265,265,307,307,239,0,0,166,296,163,167,159,164,163,166,0,0,0,0,0,0,0,0,0,0,0,0,0,168,168,159,164,159,164,166,166,166,239,168,163,0,0,0,0,0,303,303,159,164,163,164,165,166,167,168,239,0,0,0,0,0,163,163,0,0,0,167,168,163,163,163,159,164,164,164,164,164,0,0,159,164,0,0,159,164,167,167,167,0,0,159,164,164,284,284,0,0,0,284,0,0,165,0,166,166,0,0,0,0,165,165,166,166,0,167,159,0,0,0,0,0,159,159,164,164,164,164,213,0,0,0,0,0,164,164,164,164,300,167,159,239,164,159,0,0,298,0,167,305,306,305,306,173,287,232,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,220,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,232,231,227,227,49,226,178,45,173,290,233,178,49,227,178,178,232,262,273,274,275,276,277,278,279,281,282,283,288,289,292,295,297,299,301,304,305,306,291,294,231,178,232,262,291,293,294,233,232,232,227,49,308,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,163,163,164,164,165,165,166,166,167,167,168,168,239,239,262,262,273,273,274,274,275,275,276,276,277,277,278,278,279,279,280,280,281,281,282,282,283,283,284,284,285,285,286,286,287,287,288,288,289,289,159,159,290,290,291,291,292,292,293,293,294,294,295,295,296,296,297,297,298,298,299,299,300,300,173,173,178,178,121,121,231,231,233,233,232,232,301,301,302,302,303,303,227,227,226,226,304,304,213,213,45,45,221,221,220,220,305,305,306,306,307,307,49,49,308,308,290,227,226,227,45,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,49,163,163,163,163,164,164,164,165,165,165,165,166,166,166,166,167,167,167,167,168,168,168,168,239,239,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,173,178,232,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,285,286,294,287,293,121,302,308,232,49,290,262,262,220,227,262,262,220,290,262,273,274,275,276,277,278,279,280,281,282,283,285,286,287,288,289,290,291,292,293,294,295,297,299,173,178,121,231,233,232,301,302,227,226,304,45,221,220,305,306,49,308,262,220,220,231,173,290,294,294,226,49,291,293,294,232,45,227,227,226,221,233,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,232,302,280,290,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,291,294,290,49,280,290,49,226,291,294,232,305,306,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,226,232,226,232,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,290,178,232,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,290,178,285,286,121,49,163,164,165,166,167,168,239,262,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,159,290,291,292,293,294,295,296,297,298,299,300,173,178,121,231,233,232,301,302,303,227,226,304,213,45,221,220,305,306,307,49,308,320,320,320,320,320,320,0,320,320,320,0,0,320,320,0,0,320,320,0,0,0,0,0,320,320,320,320,320,320,320,320,0,322,322,317,318,322,315,381,382,316,382,316,382,316,382,316,382,316,382,316,382,316,382,316,383,382,316,382,316,382,316,382,316,382,316,382,316,382,316,382,316,382,316,382,316,382,316,383,0,0,384,0,384,320,320,320,320,320,320,0,320,320,320,0,0,320,320,0,0,320,0,320,0,0,0,0,320,320,320,320,320,320,320,320,322,321,315,317,318,320,322,321,315,317,318,320,322,321,315,317,318,320,315,317,318,320,315,317,318,320,320,320,0,0,320,320,320,320,320,0,0,0,322,322,317,321,317,318,318,315,317,318,320,322,315,381,315,315,315,317,318,320,320,322,321,315,317,318,320,322,321,315,317,318,320,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,315,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,383,318,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,320,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,382,316,321,315,317,383,318,322,321,315,317,318,320,322,320,315,317,318,0,0,0,0,0,0,322,322,0,0,0,315,320,315,317,318,320,315,320,322,321,315,317,318,320,322,321,315,317,318,320,322,321,315,317,318,320,0,0,324,324,327,324,324,0,0,324,327,0,0,324,325,325,325,324,327,249,326,325,324,327,249,326,325,325,324,327,249,326,324,324,249,325,249,324,249,324,325,324,327,249,326,325,324,327,249,326,249,249,249,249,324,325,324,327,249,326,249,326,324,325,249,326,249,326,249,324,249,324,324,327,325,326,324,326,249,324,249,249,325,324,327,249,326,325,324,327,249,326,325,324,327,249,326,325,249,0,384,384,330,330,330,330,330,330,330,330,0,0,329,330,329,330,329,330,329,329,329,329,330,329,330,329,330,329,329,330,329,330,329,330,329,329,330,329,330,330,329,329,330,329,329,330,329,330,329,329,329,0,329,330,329,330,329,330,329,329,0,0,0,0,0,0,331,331,331,0,332,332,331,332,331,332,331,332,331,332,331,332,332,332,331,332,332,332,0,331,0,0,331,0,332,331,332,332,331,332,331,332,331,0,0,335,335,335,335,335,335,335,335,335,335,0,0,0,335,0,0,0,0,0,335,335,335,0,0,0,0,230,0,230,0,0,0,0,0,268,222,56,225,225,336,337,230,338,225,190,3,336,337,230,338,225,190,3,336,337,0,336,337,230,338,225,190,3,230,336,230,338,225,230,338,225,3,3,3,338,190,336,337,338,230,338,225,190,3,338,338,225,225,337,230,338,225,225,190,3,336,337,230,338,225,225,225,225,190,3,336,337,230,338,225,190,3,0,0,230,3,3,3,230,230,230,230,230,338,338,225,338,336,337,338,336,337,230,338,225,190,3,230,230,230,230,3,3,336,338,190,336,337,338,190,190,190,190,230,338,190,3,336,337,338,336,337,225,190,3,3,225,225,190,190,268,222,56,190,336,336,190,230,268,222,56,338,336,337,338,3,3,336,3,190,190,190,225,230,338,225,225,0,0,336,337,230,338,225,190,3,336,337,230,338,225,190,3,336,337,230,338,225,190,3,190,190,190,336,337,337,336,337,336,336,337,336,336,337,336,385,386,386,385,385,385,385,0,387,387,387,387,387,387],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],0,[2,[[4,[3]]]],0,0,0,[[]],[[]],[[]],[[]],0,[[]],[[]],[5,5],[1,1],[[]],[[]],0,0,[[5,6],7],[[1,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[1,8],9],[[3,10],1],0,0,[[3,1,[12,[11]]],[[4,[5]]]],[[3,[12,[[14,[13]]]]],[[4,[2]]]],[[3,1,[12,[[14,[13]]]]],[[4,[2]]]],0,[[3,10],1],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[12,[17]],8,[12,[8]],[12,[8]]],[[12,[17]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[19,[[0,[18]]]]],[[4,[20]]]],[[[19,[[0,[[0,[21,22]]]]]]],[[4,[[23,[[0,[21,22]]]]]]]],[[[24,[18]]],[[4,[20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[25,25],[26,26],[[]],[[]],[8,[[4,[[28,[27]]]]]],[[[29,[18]],8],[[4,[[28,[27]]]]]],0,[[],25],[30,[[15,[31,32]]]],[[8,[28,[0]],[12,[17]],33],[[4,[17]]]],0,0,0,0,0,0,0,[[25,6],7],[[26,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[18,25],[[4,[26]]]],[[21,25],[[4,[26]]]],[19,[[35,[34]]]],[26,[[35,[34]]]],0,0,0,0,0,[[[0,[21,22]]],[[4,[[19,[[0,[[0,[21,22]]]]]]]]]],[[8,[28,[0]],[12,[17]]],20],[[],25],[26,19],[[18,26],[[19,[[0,[18]]]]]],[[[0,[21,22]],26],[[19,[[0,[[0,[21,22]]]]]]]],[[18,26],[[24,[18]]]],[[[0,[21,22]],25],[[4,[[19,[[0,[[0,[21,22]]]]]]]]]],[[[36,[18]]],12],[20,12],[[],8],[[[29,[18]]],8],0,0,0,[19,3],[26,3],0,[[],1],0,0,0,0,0,0,0,0,0,0,[19,37],[20,37],[26,37],0,0,0,0,0,0,0,0,0,[[[12,[17]]],9],0,0,[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[18,[[4,[[19,[[0,[18]]]]]]]],[18,[[4,[[24,[18]]]]]],[[18,8],[[4,[20]]]],[[[35,[34]],25],[[4,[26]]]],[[18,25],[[4,[[19,[[0,[18]]]]]]]],[[18,25],[[4,[[24,[18]]]]]],[[5,38,8,[12,[17]]],[[4,[20]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[19,8],19],[[19,8],19],[[19,8],19],[[25,9],25],[[19,1],19],[[19,39],19],[[19,[14,[8]]],19],[[19,17],19],[[25,9],25],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[30,[[15,[31,32]]]],[[[41,[[0,[40,22]]]],30],[[15,[31,32]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,[0,[40,22]]],[[41,[[0,[40,22]]]]]],[[[14,[[28,[33]]]]],39],0,[[],1],[[[41,[[0,[40,22]]]]],1],0,[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,[[9,8,[14,[42]]]],[[17,17],17],[[]],[[]],[[]],[[]],[[]],[[]],[42,42],[17,17],[[]],[[]],[[],17],[[42,42],9],[[17,17],9],[[],9],[[],9],[[],9],[[],9],[[42,6],7],[[17,6],7],[[]],[[]],[[[14,[42]]],17],[[]],[[]],[[43,8],17],[[[44,[31]]],17],[[[44,[42]]],17],[[[44,[42]],[44,[42]]],[[14,[42]]]],[[17,17],17],[[]],[[]],[17,43],[[17,8],17],[[17,8],17],[17,8],0,[[17,[44,[45]]],[[14,[[46,[8]]]]]],[8,42],0,[17,9],[8,42],0,[[17,8],17],[[]],[[]],[17,17],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,[[[48,[[0,[47,22]]]],13]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[48,[[0,[47,22]]]]],[[4,[49]]]],[[[48,[[0,[47,22]]]]],[[15,[32]]]],[50,[[4,[14]]]],[51,4],0,[[],52],[[],51],[[[48,[[0,[47,22]]]]],4],[[[48,[[0,[47,22]]]]],[[44,[53]]]],[[[48,[[0,[47,22]]]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[54,55,[57,[56]],14],4],[[31,[44,[8]]],[[14,[9]]]],[[52,58,8],[[4,[59]]]],[[60,[44,[8]]],[[14,[61]]]],[[62,[44,[8]]],[[14,[61]]]],[63,58],[[64,[44,[8]]],[[14,[61]]]],[[65,[44,[8]]],[[14,[61]]]],[[66,[44,[8]]],[[14,[61]]]],[[52,58],4],0,[[[48,[[0,[47,22]]]]],8],[[[48,[[0,[47,22]]]]],8],[[]],[[]],[[]],[[]],[[]],[[]],[[[48,[[0,[47,22]]]]],[[4,[[0,[47,22]]]]]],[52,58],0,0,0,[[3,55,37],[[4,[50]]]],0,0,[[67,[44,[68]]],[[69,[8]]]],[[],[[15,[70,71]]]],[[],[[15,[72,71]]]],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[[0,[47,22]],37,[12,[73]]],[[4,[[48,[[0,[47,22]]]]]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[48,[[0,[47,22]]]],30],[[4,[32]]]],[[[48,[[0,[47,22]]]],30],4],[[50,30],4],[[74,75,76],[[4,[8]]]],[[43,[77,[76]],75],4],[[51,78],4],[[51,79],[[4,[80]]]],[[[82,[81]],76],[[4,[8]]]],0,0,0,0,0,0,0,0,0,0,[83,68],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[84,43],12],[[],85],[[],83],0,0,0,0,[[[0,[84,86]],[44,[8]],87]],[[88,[0,[84,86]],[44,[8]]]],[[83,[0,[84,86]],[44,[8]]]],0,[88,8],[87,8],[83,8],[87,[[12,[8]]]],[83,8],0,[87,[[12,[89]]]],[[88,[12,[90]],[12,[90]]],[[4,[[91,[90]]]]]],[87,[[4,[[91,[90]]]]]],[[83,[12,[90]],[12,[90]]],[[91,[90]]]],[87,[[4,[[12,[92]]]]]],[83,92],[[85,6],7],[[83,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[87,9],0,0,[[]],[[]],[[]],[[]],[[]],0,[[87,75,[12,[[44,[8]]]]],12],0,[[56,73],[[4,[88]]]],[87,8],0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[56,73],[[4,[87]]]],[[],16],[[],16],[[],16],[[],16],[[],16],0,[[87,8,8],4],[[87,[44,[8]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[93,94],[[4,[[14,[76]]]]]],[[]],[[]],[[]],[95,95],[76,76],[[]],[[]],0,[76,[[12,[[44,[96]]]]]],0,[[],95],[[76,76],9],[[],9],[[],9],[97,[[14,[76]]]],[[95,6],7],[[76,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,9],0,0,[[95,9],76],[76,[[44,[8]]]],0,0,[76,[[12,[[44,[96]]]]]],0,[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[94,95],[[4,[97]]]],[[],16],[[],16],[[],16],[[97,[0,[98,86]]]],[[97,75,[46,[8]]]],[[97,8,[12,[99]],75,[46,[8]]]],[[97,75,[46,[8]]]],[[97,[44,[100]],[12,[99]],75,[46,[8]]]],[[97,101,[46,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[102,[[0,[21,22]]]]],[[4,[[23,[[0,[21,22]]]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[103,103],[[]],[[104,8],[[4,[[28,[27]]]]]],0,[[104,[0,[21,22]],1,[12,[17]]],4],[[[0,[40,22]],8,[12,[8]]],[[4,[34]]]],0,0,0,0,[[105,6],7],[[23,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[103,58],[[4,[59]]]],[[[14,[[46,[8]]]]],[[106,[[4,[[14,[59]]]]]]]],[[[46,[8]]],[[106,[[4,[59]]]]]],[[103,58,8],[[4,[59]]]],[[],[[106,[[4,[[35,[34]]]]]]]],[[103,58],4],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[103,58],0,0,0,0,0,0,0,0,0,[[[0,[21,22]]],[[4,[[102,[[0,[21,22]]]]]]]],[[[0,[21,22]],26],[[102,[[0,[21,22]]]]]],[[[0,[21,22]],25],[[4,[[102,[[0,[21,22]]]]]]]],[107,12],[104,8],0,0,0,[[[109,[[23,[[0,[21,108,22]]]]]],110],[[111,[12]]]],0,0,0,0,[[[112,[[0,[21,22]]]],8,[12,[17]],1,8],4],0,0,0,0,0,[23,37],0,0,0,0,0,0,0,[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[109,110],[[111,[[12,[15]]]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[46,[8]]],[[106,[[4,[59]]]]]],[[[113,[[0,[40,22]]]],[46,[8]]],[[106,[[4,[59]]]]]],0,[[[0,[40,22]],8,[12,[8]]],[[4,[34]]]],[[[115,[114]]],34],[[]],[[]],[[]],[[]],[[]],[[]],[[114,8,[12,[8]]],[[4,[[115,[114]]]]]],[[[115,[114]],9,9],4],0,[[114,34],[[115,[114]]]],0,[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,[[]],[[]],[[]],[116,116],[[]],[[116,6],7],[[]],[[]],[[116,[14,[[46,[8]]]]],[[106,[[4,[[14,[59]]]]]]]],[[116,[46,[8]]],[[106,[[4,[59]]]]]],[116,[[106,[[4,[[35,[34]]]]]]]],[[]],0,0,[[[35,[117]],118],116],0,0,0,[[]],[[],15],[[],15],[[],16],[[116,8],116],[[116,9],116],[[116,9],116],0,0,[[[120,[[0,[119,108,22]]]],121]],0,[[]],[[]],[[]],[[]],0,0,[[]],[[]],[122,122],[[]],[[[120,[[0,[119,108,22]]]]],[[4,[49]]]],[122,69],[[]],[[]],[[]],[[]],[[]],[[]],[8,122],0,0,[[]],[[122,[0,[119,108,22]],8],4],[[],15],[[],15],[[],15],[[],15],[[[0,[119,108,22]],37,8,[12,[73]]],[[4,[[120,[[0,[119,108,22]]]]]]]],[[],16],[[],16],[[[120,[[0,[119,108,22]]]],30],4],[[122,[44,[68]]],[[69,[8]]]],[70,[[15,[8,71]]]],[72,[[15,[8,71]]]],0,0,0,[[[44,[68]],[46,[8]]],8],[[[44,[68]]],43],[[[44,[68]]],[[123,[68]]]],0,0,0,[[[127,[[0,[124,125,126]],[0,[124,100]]]],93],[[12,[[128,[[0,[124,125,126]]]]]]]],[[]],[[]],[[[127,[124,124]]],8],[[]],[[[127,[124,[0,[124,100]]]]]],[[],[[127,[124,124]]]],[[]],[[]],[[]],[[[127,[[0,[124,125,126]],[0,[124,100]]]],[12,[129]],54],[[4,[93]]]],[[[127,[[0,[124,125,126]],[0,[124,100]]]]],8],[[[127,[124,[0,[124,100]]]],8,8,8,[44,[68]]]],[[[127,[124,[0,[124,100]]]],8]],[[[127,[124,[0,[124,100]]]],8]],[[[127,[[0,[124,125,126]],[0,[124,100]]]]],[[4,[[130,[[0,[124,100]]]]]]]],[[],15],[[],15],[[],16],0,0,0,0,[[]],[[]],[[[130,[124]]],8],[[]],[[[130,[[0,[100,124]]]],8],4],[[[130,[[0,[100,124]]]]]],[[],[[130,[124]]]],[[[130,[[0,[100,124]]]],[44,[125]],[44,[125]],[44,[68]]],4],[[[130,[[0,[131,124]]]],6],7],[[]],[[]],[[]],[[[130,[[0,[100,124]]]],[12,[129]],54],93],[[[130,[[0,[100,124]]]]],9],[[[130,[[0,[100,124]]]]],8],0,[[[130,[[0,[100,124]]]],8,8,8,[44,[68]]]],[[[130,[[0,[100,124]]]],8]],[[[130,[[0,[100,124]]]],8]],[[],15],[[],15],[[[130,[[0,[100,124]]]],[44,[68]],9],4],[[],16],0,0,0,0,0,0,[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,0,0,[[132,8,40],[[4,[8]]]],[132,8],[[132,8],[[4,[8]]]],0,[[],15],[[],15],[[],16],0,[[]],[[]],[[]],0,[[]],[[]],0,0,0,[[]],0,0,[[133,8,40],[[4,[8]]]],[[133,8],[[4,[8]]]],[[],15],[[],15],[[],16],0,0,0,[[]],[[]],0,[[]],0,0,0,0,[[[136,[134,135]]],[[12,[129]]]],[[[136,[134,135]]],[[12,[129]]]],[[[136,[134,135]]],[[12,[129]]]],[[[136,[134,135]]]],[[[136,[134,135]]],[[12,[129]]]],0,0,0,0,0,[[]],[[]],0,[[]],[56,[[136,[[0,[134,137]],135]]]],[[56,134],[[136,[134,135]]]],0,0,[[[136,[134,135]]],8],0,0,[[[136,[134,135]]],8],0,0,[56,9],0,[[[136,[134,135]],8],[[4,[8]]]],[[[136,[134,135]],8],[[4,[8]]]],0,0,0,[[[136,[134,135]]]],[[[136,[134,135]],[28,[138]]],4],[[[136,[134,135]],8],[[4,[8]]]],[[],15],[[],15],[[],16],0,0,0,0,0,0,0,0,0,0,[[[128,[124]]],[[44,[124]]]],[[[128,[124]]],[[44,[124]]]],[[]],[[]],0,[[]],[[]],[[[128,[124]]]],[[],[[128,[124]]]],[[[128,[[0,[124,125]]]],[44,[[0,[124,125]]]]]],[[[128,[[0,[131,124]]]],6],7],[[]],[[]],[[]],[[[128,[124]]],9],[[[128,[124]]],8],0,[[],[[128,[124]]]],[[8,8,8,[44,[68]]]],[[[128,[124]],8,8,8,[44,[68]]]],[[[128,[[0,[124,125]]]],[0,[124,125]]]],[[[128,[124]],8]],[[[128,[124]],8]],[8],[[[128,[124]],8]],[8],[[[128,[124]],8]],[[],15],[[],15],[[],16],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[139,8],[[]],[[]],[[]],[[]],[[]],[139,129],[139,[[12,[129]]]],[[139,[46,[8]],96],8],0,0,[140,[[4,[141]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],0,0,[[56,9],139],[[96,9],142],[[],140],[140,4],[139,143],0,0,[[140,143,8],[[4,[8]]]],[[142,[46,[8]]],[[4,[8]]]],0,0,0,0,[[139,8]],[[140,8],4],[[142,8,96],4],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[145,145],[146,146],[147,147],[148,148],[144,144],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[144,144],156],[153,157],[154,157],[155,158],[[],153],[[],154],[[],155],[[145,145],9],[[146,146],9],[[147,147],9],[[148,148],9],[[144,144],9],[[149,149],9],[[150,150],9],[[151,151],9],[[152,152],9],[[153,153],9],[[154,154],9],[[155,155],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[145,6],7],[[145,6],7],[[146,6],7],[[146,6],7],[[147,6],7],[[148,6],7],[[148,6],7],[[144,6],7],[[144,6],7],[[149,6],7],[[149,6],7],[[150,6],7],[[150,6],7],[[151,6],7],[[151,6],7],[[152,6],7],[[152,6],7],[[153,6],7],[[154,6],7],[[155,6],7],[[]],[[]],[[[12,[147]]],146],[159,147],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[160,[[4,[145]]]],[160,[[4,[146]]]],[160,[[4,[147]]]],[160,[[4,[148]]]],[[146,145],151],[145,151],[[[12,[147]],146,145],151],[[145,161]],[[144,161]],[[153,161]],[[154,161]],[[155,161]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[151,9],[[144,144],[[12,[156]]]],[152,151],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[[],162],[163,[[4,[145]]]],[[],15],[[],15],[[[12,[164]]],[[4,[146]]]],[[],15],[[],15],[165,[[4,[148]]]],[[],15],[166,[[4,[144]]]],[167,[[4,[149]]]],[[],15],[168,[[4,[150]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[157,[[4,[153]]]],[157,[[4,[154]]]],[158,[[4,[155]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[169,157],9],[[89,170],9],[[89,58],9],[[58,[35,[18]]],[[15,[171]]]],[169,169],[89,89],[[]],[[]],[[169,6],7],[[89,6],7],[[]],[[]],[[]],[[]],[[[0,[170,172]]],58],[[89,58],8],[89,173],[[169,8]],[[169,8]],[[169,157]],[[89,[0,[170,172]]]],[[89,58]],[[]],[[]],[157,169],[[[44,[68]]],89],[[58,174],[[15,[89,171]]]],[8,89],[[58,174],8],[8,8],[59,[[15,[171]]]],[[78,[35,[18]]],[[15,[[12,[89]],171]]]],[169,[[123,[68]]]],[169,[[123,[68]]]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[89,47],[[15,[171]]]],[[89,47],[[15,[171]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[175,175],[176,176],[[]],[[]],[[],4],[79,175],0,[79,8],0,[79,[[44,[68]]]],[[],80],[79,144],[175,144],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[[12,[175]]]]]],[[]],[[]],[[]],[[]],0,[[175,8],79],[[],80],0,0,[79,157],[175,157],0,0,[79,150],[175,150],0,[[],[[4,[[12,[176]]]]]],[[],4],[175,[[12,[177]]]],[[]],[[]],[79,178],[[],15],[[],15],[[],15],[178,[[15,[176]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[79,8],0,0,[78,4],[79,[[4,[80]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[56,[28,[138]]],179],[179,[[181,[180]]]],[[[184,[182,183,135]]],[[4,[9]]]],0,0,[[]],[[]],[[56,[28,[138]]],[[184,[185,186,135]]]],[[56,[28,[138]],135,[12,[183]],[12,[182]]],[[184,[182,183,135]]]],0,0,0,0,0,0,0,[[[184,[182,183,135]],8,12,12],4],[[[184,[182,183,135]]],4],[[[184,[182,183,135]]],[[4,[9]]]],[[[184,[182,183,135]],8,12,12],4],0,0,[[[184,[182,183,135]],8],[[4,[8]]]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],8],[[],8],[[]],[[]],[[]],[[]],[[[46,[8]],96],8],[[185,8,8]],0,0,0,0,0,[185,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[56],[56,[[187,[180]]]],0,[96,186],[96,185],[[[46,[8]]],[[4,[8]]]],[[[187,[180]],[46,[8]]],[[4,[8]]]],[[188,[44,[96]]],[[4,[8]]]],[[[46,[8]]],[[4,[8]]]],[[186,[46,[8]]],[[4,[8]]]],[[[46,[8]],8],4],[[185,[46,[8]],8],4],0,0,0,0,0,0,0,[[8,96],4],[[186,8,96],4],[[8,8],4],[[185,8,8],4],[8,[[4,[8]]]],[[[187,[180]],8],[[4,[8]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[82,[81]]],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[189,189],[[]],[74,[[4,[189]]]],[[[82,[81]]],[[4,[189]]]],0,0,0,0,0,0,0,0,[[190,191,191],9],[[[44,[68]],[44,[68]]],9],0,0,0,0,0,0,0,[[],192],0,0,[[[82,[81]]],4],0,0,[[[82,[81]],144,[44,[96]],96],[[14,[68]]]],[[[82,[81]],[44,[96]],96],[[14,[68]]]],0,0,0,0,0,[[145,73],144],[[[82,[81]]],4],[[189,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[56,55,[28,[193]]],74],[[[82,[81]]],56],[74,58],[[[82,[81]]],58],[[[82,[81]]],58],[[[82,[81]]],58],[74,[[194,[180]]]],[74,[[194,[180]]]],[74,[[194,[180]]]],[[145,73],9],[73,9],[[[14,[68]]],[[12,[[14,[68]]]]]],[[[14,[68]]],[[12,[[14,[68]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[191,9],0,0,0,[[56,55,[28,[193]]],[[82,[81]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[82,[81]]],9],[[[82,[81]]],9],0,0,[[]],0,0,0,0,0,[[[82,[81]],[44,[68]]],[[14,[68]]]],[[[82,[81]],[44,[68]]],[[14,[68]]]],[[160,8],[[12,[[14,[68]]]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[[82,[81]],[12,[177]]]],[[190,191,[12,[191]]]],[[[82,[81]],80]],[[190,191,[12,[191]]]],[[191,[12,[191]],98]],[[[82,[81]],[12,[[44,[96]]]],[12,[[44,[96]]]]],[[4,[8]]]],[[[82,[81]],[12,[[44,[8]]]],[12,[[44,[96]]]],[12,[[44,[96]]]],12,12,[12,[58]]],[[4,[8]]]],[[[82,[81]],[12,[[44,[96]]]],[12,[[44,[96]]]],12,12,[12,[58]]],[[4,[8]]]],[[[82,[81]]],[[4,[78]]]],[[[82,[81]],79],4],[[[82,[81]]],4],[[[82,[81]],8,[12,[[44,[8]]]],8,[12,[[44,[96]]]],[12,[[44,[96]]]]],[[4,[8]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,0,0,[[],8],[[[195,[180]]],8],[[],[[12,[8]]]],[[[195,[180]]],[[12,[8]]]],[[],[[12,[89]]]],[[[195,[180]]],[[12,[89]]]],[[],[[4,[91]]]],[[[195,[180]]],[[4,[91]]]],[[],[[4,[[12,[92]]]]]],[[[195,[180]]],[[4,[[12,[92]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[190,43],12],[[],9],[[[195,[180]]],9],[[]],[[]],[[]],0,[[],8],0,0,[[[12,[[44,[8]]]]],12],[[[195,[180]],[12,[[44,[8]]]]],12],0,0,[[],8],[[[195,[180]]],8],0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[56,73],[[4,[172]]]],[[56,73],[[4,[[195,[180]]]]]],[[],16],[[],16],[[],16],[[8,8],4],[[[195,[180]],44,8,8],4],[[[44,[8]]],4],[[[195,[180]],[44,[8]]],4],[[[195,[180]],44],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[196,197],[90,197],[61,197],[[],[[44,[68]]]],[196,[[44,[68]]]],[90,[[44,[68]]]],[61,[[44,[68]]]],[198,[[44,[68]]]],[196,197],[90,197],[61,197],[90,[[44,[68]]]],[61,[[44,[68]]]],[90,[[4,[160]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[196,196],[90,90],[61,61],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[196,[[44,[157]]]],[90,[[44,[68]]]],[198,[[44,[68]]]],0,0,0,0,[[],196],[[],90],[[],61],[[],198],[61],[61],[90],[61],0,0,0,0,[[196,196],9],[[90,61],9],[[90,90],9],[[61,90],9],[[61,61],9],[[198,198],9],[[],9],[[],9],[[196,6],7],[[196,6],7],[[90,6],7],[[90,6],7],[[61,6],7],[[61,6],7],[[198,6],7],[[]],[[[14,[157]]],196],[[[14,[68]]],90],[[[44,[68]]],90],[61,90],[[]],[59,90],[160,90],[[]],[[[14,[68]]],61],[90,61],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[90,158,158],198],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[158,158,158],198],[[141,158,158],198],0,[179,[[12,[[181,[172]]]]]],[179,[[12,[[181,[199]]]]]],[179,[[12,[[181,[200]]]]]],[179,[[12,[[181,[201]]]]]],[179,[[12,[[181,[202]]]]]],[179,[[12,[[181,[203]]]]]],[179,[[12,[[181,[204]]]]]],[179,[[12,[[181,[205]]]]]],[179,[[12,[[181,[206]]]]]],[74,[[12,[[194,[172]]]]]],[74,[[12,[[194,[199]]]]]],[74,[[12,[[194,[200]]]]]],[74,[[12,[[194,[201]]]]]],[74,[[12,[[194,[202]]]]]],[74,[[12,[[194,[203]]]]]],[74,[[12,[[194,[204]]]]]],[74,[[12,[[194,[205]]]]]],[74,[[12,[[194,[206]]]]]],[74,[[12,[[194,[172]]]]]],[74,[[12,[[194,[199]]]]]],[74,[[12,[[194,[200]]]]]],[74,[[12,[[194,[201]]]]]],[74,[[12,[[194,[202]]]]]],[74,[[12,[[194,[203]]]]]],[74,[[12,[[194,[204]]]]]],[74,[[12,[[194,[205]]]]]],[74,[[12,[[194,[206]]]]]],[74,[[12,[[194,[172]]]]]],[74,[[12,[[194,[199]]]]]],[74,[[12,[[194,[200]]]]]],[74,[[12,[[194,[201]]]]]],[74,[[12,[[194,[202]]]]]],[74,[[12,[[194,[203]]]]]],[74,[[12,[[194,[204]]]]]],[74,[[12,[[194,[205]]]]]],[74,[[12,[[194,[206]]]]]],[[],145],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[90,9],[90,8],[[[207,[196]]],177],[[[207,[90]]],177],[[[207,[61]]],177],0,[[],196],[[],90],[[196,196],[[12,[156]]]],[[90,61],[[12,[156]]]],[[90,90],[[12,[156]]]],[[61,90],[[12,[156]]]],[[61,61],[[12,[156]]]],[198,158],0,[198,158],0,[[196,157,157,157]],0,0,0,0,0,0,[[90,8,8],90],[44,[[44,[68]]]],[[[44,[196]]],[[44,[68]]]],[[[44,[90]]],[[44,[68]]]],[[[44,[61]]],[[44,[68]]]],[44,[[44,[68]]]],[[[44,[196]]],[[44,[68]]]],[[[44,[90]]],[[44,[68]]]],[[[44,[61]]],[[44,[68]]]],[196,141],[196,141],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[196],[[],162],[[],162],[[],162],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],197],[[],[[4,[141]]]],[[],197],[[],[[4,[58]]]],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],208],[[]],[[]],[[]],0,[[171,6],7],[[171,6],7],[[]],[209,171],[210,171],[71,171],[211,171],[32,171],[212,171],[[]],0,[[]],0,[171,[[12,[208]]]],[[],162],[[],15],[[],15],[[],16],0,0,0,0,0,0,0,0,0,0,0,[[[123,[68]]],[[4,[8]]]],[[[44,[68]]],[[4,[34]]]],[[[12,[[14,[213]]]],3],[[12,[[14,[152]]]]]],[18,[[4,[34]]]],[214,[[4,[34]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[215,9,[14,[68]],[14,[68]],141]],[[216,141,158]],[[216,141]],[78,[[12,[141]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[217,[[4,[218]]]],[219,[[4,[78]]]],[215,220],[216,221],[222,217],[56,219],[78],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,34],[223,223],[218,218],[78,78],[[]],[[]],[[]],[[]],[[218,8],78],[78,190],0,[78,56],[34,[[12,[224]]]],0,[78,[[12,[158]]]],0,[78,[[12,[141]]]],0,[78,[[12,[[46,[8]]]]]],[[223,8],152],[223,[[12,[[14,[152]]]]]],0,[78,225],[78,145],[218,[[44,[78]]]],0,0,[218,141],[78,141],[78,149],0,[223,[[12,[160]]]],0,0,[78,141],0,[[],215],[[],216],[78,[[12,[141]]]],0,0,[78,[[14,[144]]]],0,[[218,218],9],[[78,78],9],[34,223],0,[218,[[12,[141]]]],[78,141],0,0,[78,[[12,[160]]]],0,0,[[34,6],7],[[223,6],7],[[218,6],7],[[78,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[222,226],[[4,[218]]]],[[56,227],[[4,[78]]]],[78,[[12,[141]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[218,217],[78,219],0,[223,[[12,[[14,[13]]]]]],0,0,0,0,0,[222,217],[56,219],[[],215],[[],216],[[223,[14,[218]]],34],[[158,141,[12,[162]],[12,[[14,[13]]]],222,[12,[[14,[152]]]]],223],[[223,[14,[218]],[12,[224]],[12,[228]]],34],0,0,[218,8],[34,8],[223,141],[218,141],0,0,[78,141],0,0,[34,[[12,[228]]]],0,[78,[[12,[158]]]],0,[78,[[12,[141]]]],0,[78,[[12,[[46,[8]]]]]],[34,[[12,[228]]]],[218,[[12,[96]]]],0,[78,[[12,[[14,[229]]]]]],[34,[[12,[224]]]],0,0,0,0,[[34,8],218],[34,[[44,[218]]]],0,[223,230],[223,3],[218,3],0,0,[223,222],[218,222],[[219,[12,[141]]],219],[[34,[12,[224]]]],[[219,[12,[158]]],219],[[219,[12,[141]]],219],[[217,[14,[78]]],217],[[219,149],219],[[219,141],219],[[219,[12,[141]]],219],[[219,[14,[144]]],219],[[217,141],217],[[219,141],219],[[219,162],219],[[219,[12,[141]]],219],[[217,141],217],[[219,141],219],[[34,[12,[228]]]],[[219,[12,[158]]],219],[[219,[12,[141]]],219],[[217,96],217],[[219,[14,[229]]],219],[[217,[12,[[14,[231]]]]],217],[[219,177],219],[[217,141],217],[[219,141],219],[[219,141],219],[218,[[12,[[14,[231]]]]]],0,[78,[[12,[177]]]],0,[78,232],[215],[[]],[[]],[[]],[[]],[218,226],[78,227],[218,141],0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[78,141],[215,9],0,0,[223,158],0,0,[[]],[[]],[[]],[229,229],[[]],0,0,[[229,229],9],[[],9],[[],9],[[229,6],7],[[]],[[]],[[]],0,[[]],[229,233],[[],15],[233,[[4,[229]]]],[[],15],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[[235,[234]]],[[235,[234]]]],[236,236],[[[237,[[0,[234,191]]]]],[[237,[[0,[234,191]]]]]],[[]],[[]],[[]],[[[235,[238]],[235,[238]]],9],[[236,236],9],[[[237,[[0,[238,191]]]],[237,[[0,[238,191]]]]],9],[[],9],[[],9],[[],9],[[],9],[[[235,[131]],6],7],[[236,6],7],[[[237,[[0,[131,191]]]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[236,[[12,[239]]]],[[[235,[240]],161]],[[[237,[[0,[240,191]]]],161]],0,[[]],[[]],[[]],[236,9],[235,12],0,[235,12],0,[235,[[12,[141]]]],0,[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[220,[[15,[[237,[191]],171]]]],[[],16],[[],16],[[],16],[[[12,[[46,[8]]]],[12,[[46,[8]]]]],[[12,[[46,[8]]]]]],[[[44,[68]],145],[[15,[236,171]]]],[[[44,[68]]],[[15,[[14,[45]],171]]]],[[18,[44,[78]]],[[15,[[14,[236]],171]]]],[[18,[44,[78]]],[[15,[[14,[[14,[45]]]],171]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[241,158],[[73,225],[[12,[242]]]],[243,[[12,[242]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[244,73],[245,246],[[],245],[[],244],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[241,241],[73,73],[247,247],[242,242],[243,243],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[73,[[12,[8]]]],0,0,0,0,[[73,225],149],[243,[[12,[149]]]],[73,160],0,0,[73,8],0,0,[73,8],0,0,[73,8],[[],73],[[],247],[[],242],[[],243],0,0,[73,144],[[73,225],9],[243,[[12,[9]]]],0,[73,144],[73,8],0,0,[73,8],[[73,225],[[12,[144]]]],[243,[[12,[144]]]],0,[[241,241],9],[[247,247],9],[[242,242],9],[[243,243],9],[[],9],[[],9],[[],9],[[],9],[[241,6],7],[[73,6],7],[[247,6],7],[[242,6],7],[[243,6],7],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[244,225],243],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[73,[[12,[[14,[13]]]]]],0,0,[73,8],0,0,[[73,225],8],[243,[[12,[8]]]],0,0,[[],73],0,0,0,0,[246,9],0,0,[[245,9],245],[[244,9],244],[[243,9]],[[244,174],244],[[243,174]],[[244,58],244],[[243,58]],[[244,225,9],244],[[244,225,174],244],[[244,225,58],244],[[244,225,149],244],[[244,225,9],244],[[244,225,144],244],[[244,[12,[8]]],244],[[244,225,8],244],[[244,225,247],244],[[244,149],244],[[243,149]],[[244,162],244],[[244,8],244],[[244,8],244],[[244,8],244],[[244,9],244],[[243,9]],[[244,8],244],[[244,8],244],[[244,144],244],[[243,144]],[[244,[12,[[14,[13]]]]],244],[[244,8],244],[[244,8],244],[[243,8]],[[245,9],245],[[244,[12,[[14,[231]]]]],244],[[244,247],244],[[243,247]],[[244,8],244],[[244,241],244],[73,[[12,[[14,[231]]]]]],0,0,[[73,225],247],[243,[[12,[247]]]],0,[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],244],[[],245],[73,8],0,0,[73,241],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,[[]],[[]],[[58,8],[[4,[59]]]],[8,[[12,[89]]]],[8,[[4,[[28,[138]]]]]],[8,[[4,[179]]]],[58,4],[8,[[4,[[28,[248]]]]]],[[[12,[230]]],[[4,[249]]]],[[[12,[230]]],[[4,[249]]]],[[]],[[]],[[],58],[[],34],[[],218],[[8,[35,[250]]],[[4,[251]]]],[251,[[12,[[4,[[28,[138]]]]]]]],[[],8],[[],8],0,[[],15],[[],15],[[],16],[[8,[28,[43]],[35,[250]]],[[4,[251]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[252,253],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],252],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[254,[18]],8],[[12,[89]]]],[[[254,[18]],8],[[4,[[28,[138]]]]]],[218,141],[[[255,[18]]],[[4,[[12,[175]]]]]],[[[256,[18]],8],[[4,[[28,[248]]]]]],[[[256,[18]],[12,[230]]],[[4,[249]]]],[[[254,[18]],[12,[230]]],[[4,[249]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[256,[257]]]],[[]],[[[256,[18]]],34],[[[254,[18]]],218],0,0,[18,[[4,[[256,[18]]]]]],[[[35,[18]],218,[12,[[44,[[14,[45]]]]]],258],[[4,[[254,[18]]]]]],[[[35,[18]],78,8,[12,[[14,[45]]]]],[[4,[[255,[18]]]]]],[[],252],[[18,253],[[4,[[256,[18]]]]]],[[[35,[18]],78,8,[12,[[14,[45]]]],258],[[4,[[255,[18]]]]]],[[[255,[18]]],12],[[[254,[18]]],8],[[[256,[18]]],8],0,[[[255,[18]]],[[4,[[12,[176]]]]]],0,0,0,0,0,0,0,[214,[[4,[178]]]],[214,4],0,[[[255,[18]]],4],0,[259,[[4,[[256,[257]]]]]],[162,[[4,[[256,[257]]]]]],[160,[[4,[[256,[257]]]]]],[257,[[4,[[256,[257]]]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[252,252],[[252,260],252],[[252,141,141],252],[[252,246],252],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[12,[9]],[12,[9]],[12,[58]],58,9],177],[[]],[[]],[[]],[[]],[[[12,[90]],[12,[90]],[12,[58]],58,9],177],[[]],[[]],[177,177],[[[207,[234]]],[[207,[234]]]],[[]],[[]],[177,[[12,[58]]]],[[[207,[191]]],[[12,[58]]]],0,0,[[[12,[174]],[12,[174]],[12,[58]],58,9],177],[[177,177],9],[[[207,[238]],[207,[238]]],9],[[],9],[[],9],[[[12,[61]],[12,[61]],[12,[58]],58,9],177],[[[12,[261]],[12,[261]],[12,[58]],58,9],177],[[177,6],7],[[177,6],7],[[[207,[191]],6],7],[[[207,[191]],6],7],[[]],[[[207,[191]]],177],[[]],[[]],[[]],[[145,[12,[262]]],[[4,[[12,[177]]]]]],[177,9],[[[207,[191]]],9],[177,9],[[[12,[158]],[12,[158]],[12,[58]],58,9],177],[[[12,[141]],[12,[141]],[12,[58]],58,9],177],[[[12,[196]],[12,[196]],[12,[58]],58,9],177],[[]],[[]],[177,9],[[[207,[191]]],9],0,0,[177,9],[[[207,[191]]],9],0,0,[[[207,[191]]],191],0,0,[177,[[44,[68]]]],[[[207,[191]]],[[44,[68]]]],[[[207,[191]]],191],0,0,[177,[[44,[68]]]],[[[207,[191]]],[[44,[68]]]],[[[12,[191]],[12,[191]],[12,[58]],58,9],177],[[[12,[191]],[12,[191]],[12,[58]],58,9],[[207,[191]]]],[177,58],[[[207,[191]]],58],0,0,[177,145],0,0,0,[[]],[[]],[[],162],[[],162],[[[12,[177]]],[[12,[262]]]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[[207,[191]],9],[[207,[191]]]],0,0,[[[207,[172]]],177],0,0,0,0,0,0,0,[[[263,[[0,[47,22]]]],18,189],4],[[[264,[[0,[47,22]]]],13]],[[[264,[[0,[47,22]]]]],4],[[[263,[[0,[47,22]]]]],4],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[265,[47]]],8],0,[[]],[[]],[[]],[[]],[[]],[[[264,[[0,[47,22]]]]],[[4,[49]]]],[[[263,[[0,[47,22]]]]],[[4,[53]]]],[266,4],[[[267,[[0,[47,22]]]]],4],0,0,0,0,0,0,0,[[[265,[47]]],69],[[[264,[[0,[47,22]]]]],[[44,[53]]]],[[[264,[47]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[263,[[0,[47,22]]]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[[265,[47]]],[[4,[47]]]],[[[264,[[0,[47,22]]]]],[[4,[[0,[47,22]]]]]],0,[47,[[265,[47]]]],[[[0,[47,22]],268,55],[[4,[[264,[[0,[47,22]]]]]]]],[[222,55,[265,[[0,[47,22]]]],96,[12,[269]]],[[263,[[0,[47,22]]]]]],[[74,[12,[270]]],266],[[[265,[47]]],[[267,[47]]]],[[[263,[[0,[47,22]]]]],[[4,[[12,[266]]]]]],[[[263,[[0,[47,22]]]]],[[12,[56]]]],[[[263,[[0,[47,22]]]],271],[[4,[12]]]],[[[264,[[0,[47,22]]]]],[[4,[[263,[[0,[47,22]]]]]]]],0,0,0,0,[[[264,[[0,[47,22]]]]],55],0,0,0,0,0,0,0,[[[264,[[0,[47,22]]]]],3],[[[267,[47]],178],[[4,[8]]]],0,[[[265,[[0,[47,22]]]]],4],0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[266,[[194,[180]]]],[266,74],[[[265,[47]],[44,[68]]],[[69,[8]]]],[[[265,[47]],[44,[68]]],69],[[[264,[[0,[47,22]]]],[44,[226]]],4],[[[264,[[0,[47,22]]]],[44,[226]]],4],[70,[[15,[8,71]]]],[[[264,[[0,[47,22]]]]],[[4,[49]]]],[[[267,[[0,[47,22]]]],78],4],[[[264,[[0,[47,22]]]],[44,[226]]],4],[[[267,[[0,[47,22]]]],79],[[4,[80]]]],[72,[[15,[8,71]]]],[[[265,[47]],[44,[272]]],[[69,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[239,239],[262,262],[273,273],[274,274],[275,275],[276,276],[277,277],[278,278],[279,279],[280,280],[281,281],[282,282],[283,283],[284,284],[285,285],[286,286],[287,287],[288,288],[289,289],[159,159],[290,290],[291,291],[292,292],[293,293],[294,294],[295,295],[296,296],[297,297],[298,298],[299,299],[300,300],[173,173],[178,178],[121,121],[231,231],[233,233],[232,232],[301,301],[302,302],[303,303],[227,227],[226,226],[304,304],[213,213],[45,45],[221,221],[220,220],[305,305],[306,306],[307,307],[49,49],[308,308],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[163,163],156],[[164,164],156],[[165,165],156],[[166,166],156],[[167,167],156],[[168,168],156],[[239,239],156],[[262,262],156],[[273,273],156],[[274,274],156],[[275,275],156],[[276,276],156],[[277,277],156],[[278,278],156],[[279,279],156],[[280,280],156],[[281,281],156],[[282,282],156],[[283,283],156],[[284,284],156],[[285,285],156],[[286,286],156],[[287,287],156],[[288,288],156],[[289,289],156],[[159,159],156],[[290,290],156],[[291,291],156],[[292,292],156],[[293,293],156],[[294,294],156],[[295,295],156],[[296,296],156],[[297,297],156],[[298,298],156],[[299,299],156],[[300,300],156],[[173,173],156],[[178,178],156],[[121,121],156],[[231,231],156],[[233,233],156],[[232,232],156],[[301,301],156],[[302,302],156],[[303,303],156],[[227,227],156],[[226,226],156],[[304,304],156],[[213,213],156],[[45,45],156],[[221,221],156],[[220,220],156],[[305,305],156],[[306,306],156],[[307,307],156],[[49,49],156],[[308,308],156],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],262],[[],273],[[],274],[[],275],[[],276],[[],277],[[],278],[[],279],[[],281],[[],282],[[],283],[[],288],[[],289],[[],292],[[],295],[[],297],[[],299],[[],301],[[],304],[[],305],[[],306],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[163,163],9],[[164,164],9],[[165,165],9],[[166,166],9],[[167,167],9],[[168,168],9],[[239,239],9],[[262,262],9],[[273,273],9],[[274,274],9],[[275,275],9],[[276,276],9],[[277,277],9],[[278,278],9],[[279,279],9],[[280,280],9],[[281,281],9],[[282,282],9],[[283,283],9],[[284,284],9],[[285,285],9],[[286,286],9],[[287,287],9],[[288,288],9],[[289,289],9],[[159,159],9],[[290,290],9],[[291,291],9],[[292,292],9],[[293,293],9],[[294,294],9],[[295,295],9],[[296,296],9],[[297,297],9],[[298,298],9],[[299,299],9],[[300,300],9],[[173,173],9],[[178,178],9],[[121,121],9],[[231,231],9],[[233,233],9],[[232,232],9],[[301,301],9],[[302,302],9],[[303,303],9],[[227,227],9],[[226,226],9],[[304,304],9],[[213,213],9],[[45,45],9],[[221,221],9],[[220,220],9],[[305,305],9],[[306,306],9],[[307,307],9],[[49,49],9],[[308,308],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,0,0,0,[[163,6],7],[[164,6],7],[[165,6],7],[[166,6],7],[[167,6],7],[[168,6],7],[[239,6],7],[[262,6],7],[[273,6],7],[[274,6],7],[[275,6],7],[[276,6],7],[[277,6],7],[[278,6],7],[[279,6],7],[[280,6],7],[[281,6],7],[[282,6],7],[[283,6],7],[[284,6],7],[[285,6],7],[[286,6],7],[[287,6],7],[[288,6],7],[[289,6],7],[[159,6],7],[[290,6],7],[[291,6],7],[[292,6],7],[[293,6],7],[[294,6],7],[[295,6],7],[[296,6],7],[[297,6],7],[[298,6],7],[[299,6],7],[[300,6],7],[[173,6],7],[[178,6],7],[[121,6],7],[[231,6],7],[[233,6],7],[[232,6],7],[[301,6],7],[[302,6],7],[[303,6],7],[[227,6],7],[[226,6],7],[[304,6],7],[[213,6],7],[[45,6],7],[[221,6],7],[[220,6],7],[[305,6],7],[[306,6],7],[[307,6],7],[[49,6],7],[[308,6],7],0,[145,163],[158,163],[[]],[158,163],[158,164],[[]],[158,164],[158,165],[158,165],[148,165],[[]],[158,166],[158,166],[144,166],[[]],[149,167],[[]],[158,167],[158,167],[[]],[150,168],[158,168],[158,168],[158,239],[158,239],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[147,159],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[163,161]],[[164,161]],[[165,161]],[[166,161]],[[167,161]],[[168,161]],[[239,161]],[[262,161]],[[273,161]],[[274,161]],[[275,161]],[[276,161]],[[277,161]],[[278,161]],[[279,161]],[[280,161]],[[281,161]],[[282,161]],[[283,161]],[[284,161]],[[285,161]],[[286,161]],[[287,161]],[[288,161]],[[289,161]],[[159,161]],[[290,161]],[[291,161]],[[292,161]],[[293,161]],[[294,161]],[[295,161]],[[296,161]],[[297,161]],[[298,161]],[[299,161]],[[300,161]],[[173,161]],[[178,161]],[[121,161]],[[231,161]],[[233,161]],[[232,161]],[[301,161]],[[302,161]],[[303,161]],[[227,161]],[[226,161]],[[304,161]],[[213,161]],[[45,161]],[[221,161]],[[220,161]],[[305,161]],[[306,161]],[[307,161]],[[49,161]],[[308,161]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[309,[[12,[[14,[68]]]]]],[309,[[12,[[14,[68]]]]]],[309,[[12,[141]]]],[309,[[12,[141]]]],[309,[[12,[[14,[68]]]]]],[309,[[12,[[14,[68]]]]]]],262],[[],273],[[],274],[[],275],[[],276],[[],277],[[],278],[[],279],[[158,158],280],[[],281],[[],282],[[],283],[[9,284],285],[[9,284],286],[[310,9],287],[[],288],[[],289],[[[309,[[12,[163]]]],[309,[[12,[158]]]],[309,[[12,[165]]]],162,[309,[[12,[158]]]],[309,[[12,[164]]]],[309,[[12,[158]]]],[309,[[12,[158]]]],[309,[[12,[158]]]],[309,[[12,[159]]]]],290],[[158,166,166,166,[309,[[12,[262]]]]],291],[[],292],[[158,166,[309,[[12,[9]]]]],293],[[158,158,158,166,158,158,[309,[[12,[9]]]],[309,[[12,[262]]]]],294],[[],295],[[],297],[[],299],[[158,296,298,300],173],[[168,158,158,[309,[[12,[158]]]],[309,[[12,[291]]]],[309,[[12,[292]]]],[309,[[12,[293]]]],[309,[[12,[294]]]]],178],[[162,[309,[[12,[162]]]]],121],[[158,9,9],231],[[168,166,158],233],[[163,[14,[166]],[14,[162]],167,141,141,141,[309,[[12,[[14,[121]]]]]],141,[309,[[12,[141]]]],[309,[[12,[141]]]],[309,[[12,[262]]]],[309,[[12,[[14,[233]]]]]],[309,[[12,[141]]]]],232],[[],301],[[[14,[162]],[309,[[12,[[14,[68]]]]]]],302],[[[309,[[12,[162]]]],141,[309,[[12,[232]]]],[309,[[12,[141]]]],[309,[[12,[158]]]],[309,[[12,[141]]]],[309,[[12,[158]]]],[309,[[12,[303]]]],[309,[[12,[[14,[68]]]]]]],227],[[[14,[227]],141,141,[309,[[12,[[14,[231]]]]]],[309,[[12,[141]]]],[309,[[12,[141]]]],[309,[[12,[96]]]]],226],[[],304],[[141,158,141],45],[[[14,[45]]],221],[[[14,[9]],[14,[[14,[68]]]],[14,[[14,[68]]]],239,[309,[[12,[[14,[141]]]]]]],220],[[[309,[[12,[[14,[68]]]]]],[309,[[12,[[14,[68]]]]]],[309,[[12,[9]]]]],305],[[[309,[[12,[[14,[68]]]]]],[309,[[12,[[14,[68]]]]]],[309,[[12,[9]]]]],306],[[158,[14,[290]],141,[14,[226]],[309,[[12,[[14,[121]]]]]],[309,[[12,[162]]]],[309,[[12,[[14,[213]]]]]],[309,[[12,[307]]]],[309,[[12,[[14,[68]]]]]]],49],[[307,[309,[[12,[[14,[68]]]]]]],308],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[163,163],[[12,[156]]]],[[164,164],[[12,[156]]]],[[165,165],[[12,[156]]]],[[166,166],[[12,[156]]]],[[167,167],[[12,[156]]]],[[168,168],[[12,[156]]]],[[239,239],[[12,[156]]]],[[262,262],[[12,[156]]]],[[273,273],[[12,[156]]]],[[274,274],[[12,[156]]]],[[275,275],[[12,[156]]]],[[276,276],[[12,[156]]]],[[277,277],[[12,[156]]]],[[278,278],[[12,[156]]]],[[279,279],[[12,[156]]]],[[280,280],[[12,[156]]]],[[281,281],[[12,[156]]]],[[282,282],[[12,[156]]]],[[283,283],[[12,[156]]]],[[284,284],[[12,[156]]]],[[285,285],[[12,[156]]]],[[286,286],[[12,[156]]]],[[287,287],[[12,[156]]]],[[288,288],[[12,[156]]]],[[289,289],[[12,[156]]]],[[159,159],[[12,[156]]]],[[290,290],[[12,[156]]]],[[291,291],[[12,[156]]]],[[292,292],[[12,[156]]]],[[293,293],[[12,[156]]]],[[294,294],[[12,[156]]]],[[295,295],[[12,[156]]]],[[296,296],[[12,[156]]]],[[297,297],[[12,[156]]]],[[298,298],[[12,[156]]]],[[299,299],[[12,[156]]]],[[300,300],[[12,[156]]]],[[173,173],[[12,[156]]]],[[178,178],[[12,[156]]]],[[121,121],[[12,[156]]]],[[231,231],[[12,[156]]]],[[233,233],[[12,[156]]]],[[232,232],[[12,[156]]]],[[301,301],[[12,[156]]]],[[302,302],[[12,[156]]]],[[303,303],[[12,[156]]]],[[227,227],[[12,[156]]]],[[226,226],[[12,[156]]]],[[304,304],[[12,[156]]]],[[213,213],[[12,[156]]]],[[45,45],[[12,[156]]]],[[221,221],[[12,[156]]]],[[220,220],[[12,[156]]]],[[305,305],[[12,[156]]]],[[306,306],[[12,[156]]]],[[307,307],[[12,[156]]]],[[49,49],[[12,[156]]]],[[308,308],[[12,[156]]]],0,0,0,0,[311,[[312,[163]]]],[311,[[312,[164]]]],[311,[[312,[165]]]],[311,[[312,[166]]]],[311,[[312,[167]]]],[311,[[312,[168]]]],[311,[[312,[239]]]],[311,[[312,[262]]]],[311,[[312,[273]]]],[311,[[312,[274]]]],[311,[[312,[275]]]],[311,[[312,[276]]]],[311,[[312,[277]]]],[311,[[312,[278]]]],[311,[[312,[279]]]],[311,[[312,[280]]]],[311,[[312,[281]]]],[311,[[312,[282]]]],[311,[[312,[283]]]],[311,[[312,[284]]]],[311,[[312,[285]]]],[311,[[312,[286]]]],[311,[[312,[287]]]],[311,[[312,[288]]]],[311,[[312,[289]]]],[311,[[312,[159]]]],[311,[[312,[290]]]],[311,[[312,[291]]]],[311,[[312,[292]]]],[311,[[312,[293]]]],[311,[[312,[294]]]],[311,[[312,[295]]]],[311,[[312,[296]]]],[311,[[312,[297]]]],[311,[[312,[298]]]],[311,[[312,[299]]]],[311,[[312,[300]]]],[311,[[312,[173]]]],[311,[[312,[178]]]],[311,[[312,[121]]]],[311,[[312,[231]]]],[311,[[312,[233]]]],[311,[[312,[232]]]],[311,[[312,[301]]]],[311,[[312,[302]]]],[311,[[312,[303]]]],[311,[[312,[227]]]],[311,[[312,[226]]]],[311,[[312,[304]]]],[311,[[312,[213]]]],[311,[[312,[45]]]],[311,[[312,[221]]]],[311,[[312,[220]]]],[311,[[312,[305]]]],[311,[[312,[306]]]],[311,[[312,[307]]]],[311,[[312,[49]]]],[311,[[312,[308]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,[[163,313],312],[[164,313],312],[[165,313],312],[[166,313],312],[[167,313],312],[[168,313],312],[[239,313],312],[[262,313],312],[[273,313],312],[[274,313],312],[[275,313],312],[[276,313],312],[[277,313],312],[[278,313],312],[[279,313],312],[[280,313],312],[[281,313],312],[[282,313],312],[[283,313],312],[[284,313],312],[[285,313],312],[[286,313],312],[[287,313],312],[[288,313],312],[[289,313],312],[[159,313],312],[[290,313],312],[[291,313],312],[[292,313],312],[[293,313],312],[[294,313],312],[[295,313],312],[[296,313],312],[[297,313],312],[[298,313],312],[[299,313],312],[[300,313],312],[[173,313],312],[[178,313],312],[[121,313],312],[[231,313],312],[[233,313],312],[[232,313],312],[[301,313],312],[[302,313],312],[[303,313],312],[[227,313],312],[[226,313],312],[[304,313],312],[[213,313],312],[[45,313],312],[[221,313],312],[[220,313],312],[[305,313],312],[[306,313],312],[[307,313],312],[[49,313],312],[[308,313],312],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[8,314],[8,[[4,[9]]]],[8,[[4,[9]]]],[8,[[4,[310]]]],[8,[[4,[310]]]],[8,[[4,[90]]]],[8,[[4,[90]]]],[8,[[4,[198]]]],[8,[[4,[198]]]],[8,[[4,[174]]]],[8,[[4,[174]]]],[8,[[4,[261]]]],[8,[[4,[261]]]],[8,[[4,[315]]]],[8,[[4,[315]]]],[8,[[4,[158]]]],[8,[[4,[158]]]],[[],[[28,[316]]]],[8,[[4,[317]]]],[8,[[4,[317]]]],[8,[[4,[141]]]],[8,[[4,[141]]]],[8,[[4,[318]]]],[8,[[4,[318]]]],[8,[[4,[96]]]],[8,[[4,[96]]]],[8,[[4,[162]]]],[8,[[4,[162]]]],[8,[[4,[141]]]],[8,[[4,[141]]]],[8,[[4,[141]]]],[8,[[4,[141]]]],[8,[[4,[68]]]],[8,[[4,[68]]]],[8,[[4,[157]]]],[8,[[4,[157]]]],[8,[[4,[58]]]],[8,[[4,[58]]]],[8,[[4,[319]]]],[8,[[4,[319]]]],[[],[[28,[316]]]],0,0,[[],[[15,[268,171]]]],0,[[[263,[[0,[47,22]]]]],[[15,[171]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[315,315],[317,317],[318,318],[320,320],[[]],[[]],[[]],[[]],[[56,9],320],[[56,90],[[4,[320]]]],[158,162],[198,162],[[56,174],320],[[56,261],320],[[56,158],320],[[56,141],320],[[56,196],320],[141,162],[141,162],[141,162],0,0,[317,[[44,[320]]]],0,0,[318,44],0,[[315,315],9],[[317,317],9],[[318,318],9],[[320,320],9],0,0,[8,314],[[315,8],314],[[315,6],7],[[315,6],7],[[317,6],7],[[318,6],7],[[320,6],7],[[320,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,[[4,[9]]]],[8,[[4,[9]]]],[[321,8],[[4,[9]]]],[[315,8],[[4,[9]]]],[[317,8],[[4,[9]]]],[8,[[4,[310]]]],[8,[[4,[310]]]],[[321,8],[[4,[310]]]],[[315,8],[[4,[310]]]],[[317,8],[[4,[310]]]],[8,[[4,[90]]]],[8,[[4,[90]]]],[[321,8],[[4,[90]]]],[[315,8],[[4,[90]]]],[[317,8],[[4,[90]]]],[315,322],[8,[[4,[198]]]],[8,[[4,[198]]]],[[321,8],[[4,[198]]]],[[315,8],[[4,[198]]]],[[317,8],[[4,[198]]]],[8,[[4,[174]]]],[8,[[4,[174]]]],[[321,8],[[4,[174]]]],[[315,8],[[4,[174]]]],[[317,8],[[4,[174]]]],[8,[[4,[261]]]],[8,[[4,[261]]]],[[321,8],[[4,[261]]]],[[315,8],[[4,[261]]]],[[317,8],[[4,[261]]]],[8,[[4,[315]]]],[8,[[4,[315]]]],[[321,8],[[4,[315]]]],[[315,8],[[4,[315]]]],[[317,8],[[4,[315]]]],[8,[[4,[158]]]],[8,[[4,[158]]]],[[321,8],[[4,[158]]]],[[315,8],[[4,[158]]]],[[317,8],[[4,[158]]]],[[],[[28,[316]]]],[318,[[28,[316]]]],[8,[[4,[317]]]],[8,[[4,[317]]]],[[321,8],[[4,[317]]]],[[315,8],[[4,[317]]]],[[317,8],[[4,[317]]]],[8,[[4,[141]]]],[8,[[4,[141]]]],[[321,8],[[4,[141]]]],[[315,8],[[4,[141]]]],[[317,8],[[4,[141]]]],[8,[[4,[318]]]],[8,[[4,[318]]]],[[321,8],[[4,[318]]]],[[315,8],[[4,[318]]]],[[317,8],[[4,[318]]]],[8,[[4,[96]]]],[8,[[4,[96]]]],[[321,8],[[4,[96]]]],[[315,8],[[4,[96]]]],[[317,8],[[4,[96]]]],[8,[[4,[162]]]],[8,[[4,[162]]]],[[321,8],[[4,[162]]]],[[315,8],[[4,[162]]]],[[317,8],[[4,[162]]]],[8,[[4,[141]]]],[8,[[4,[141]]]],[[321,8],[[4,[141]]]],[[315,8],[[4,[141]]]],[[317,8],[[4,[141]]]],[8,[[4,[141]]]],[8,[[4,[141]]]],[[321,8],[[4,[141]]]],[[315,8],[[4,[141]]]],[[317,8],[[4,[141]]]],[320,160],[8,[[4,[68]]]],[8,[[4,[68]]]],[[321,8],[[4,[68]]]],[[315,8],[[4,[68]]]],[[317,8],[[4,[68]]]],[8,[[4,[157]]]],[8,[[4,[157]]]],[[321,8],[[4,[157]]]],[[315,8],[[4,[157]]]],[[317,8],[[4,[157]]]],[8,[[4,[58]]]],[8,[[4,[58]]]],[[321,8],[[4,[58]]]],[[315,8],[[4,[58]]]],[[317,8],[[4,[58]]]],[8,[[4,[319]]]],[8,[[4,[319]]]],[[321,8],[[4,[319]]]],[[315,8],[[4,[319]]]],[[317,8],[[4,[319]]]],[[],[[28,[316]]]],[318,[[28,[316]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[320,9],[315,8],[317,8],[318,8],0,0,[[[14,[320]]],317],[14,318],[14,315],0,[[]],[322,12],0,0,0,[315,323],[320,323],[[]],[[]],[[]],[[]],[[],162],[[],162],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,[324],[[325,222,248],[[4,[326]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[325,222,248],[[4,[324]]]],[[]],[[]],[[]],[[]],[[]],[324,96],[324,96],0,[[],325],0,[324,160],0,[[324,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[12,[230]],250],[[4,[249]]]],[[[28,[250]]],249],[[[12,[230]],248],[[4,[249]]]],[[[12,[230]],222],[[4,[222]]]],[324,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[230,9],[[],325],[[[12,[327]],[12,[326]],222],249],[[324,8],326],[249,[[12,[[4,[315]]]]]],[326,[[12,[[4,[315]]]]]],0,[[148,96,324],324],[[249,[12,[230]]],[[4,[249]]]],[324,[[4,[315]]]],[324,[[4,[320]]]],[327,250],[[325,268,[14,[162]],96,96,[328,[225,8]],248],[[4,[324]]]],0,[324,148],0,0,[[],162],[[],325],0,[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[325,8],325],[[249,8],249],0,[[],[[15,[268,171]]]],[[[263,[[0,[47,22]]]]],[[15,[171]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[329,[180]]],56],0,0,[330,96],[[[329,[180]]],96],[330,96],[[[329,[180]]],96],[330,[[4,[320]]]],[[[329,[180]]]],0,[[]],[[]],[[]],[[]],[330,9],[[[329,[180]]],9],0,[[]],[[]],[330,9],[330,96],[[[329,[180]]],96],0,[330,96],[[[329,[180]]],96],0,[[56,179,8],330],[[56,8,179],[[329,[180]]]],[330,[[4,[9]]]],[[[329,[180]]],[[4,[9]]]],0,0,0,0,[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,0,0,0,0,0,[[331,[12,[148]]],[[4,[230]]]],[[331,148,145],[[4,[230]]]],[331,[[4,[230]]]],[[[12,[160]],160],4],[332],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[160,332],0,[[]],[[]],[[]],[333,9],[332,[[12,[160]]]],[[[12,[160]],160,160],[[4,[9]]]],[331,[[4,[[14,[268]]]]]],[[[12,[160]],160,160],[[4,[158]]]],[160,[[4,[230]]]],[331,[[4,[230]]]],[[[12,[160]],160,160],[[4,[284]]]],[160,[[14,[160]]]],0,0,[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,[[]],[[]],[[]],[[]],[[]],0,[[]],[334,335],0,[[335,230]],[[47,78]],[[47,158]],[[47,223]],[335],[[[12,[147]],146,158,158],162],[[47,34]],[[47,218]],[[47,230]],[284,160],[[],15],[[],15],[[],16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[225,[14,[162]]]],[225,[[44,[162]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[336,[[4,[230]]]],[337,[[4,[230]]]],[[268,8,96,96,[14,[56]],[14,[8]],[14,[160]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[230,230],9],[336,4],[230,230],[338,338],[225,225],[[]],[[]],[[]],[[3,8],56],[[3,8],268],[3,[[44,[56]]]],[338,146],[190,146],0,0,0,[[230,230],9],[[338,338],9],[[225,225],9],[[190,190],9],[[3,3],9],[[],9],[[],9],[[],9],[[],9],0,[[230,6],7],[[338,6],7],[[225,6],7],[[225,6],7],[[190,6],7],[[3,6],7],[[]],[[]],[[]],[[]],[162,225],[160,225],[[]],[[[14,[162]]],225],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[44,[290]]],[[4,[268]]]],[[[44,[290]],8],4],[230,338],[[3,8],230],[[3,8],8],[[3,8],268],[230,[[44,[268]]]],[230,145],[230,158],[230,158],[160,337],[338,9],[338,9],[[225,161]],[338,158],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[230,9],[230,9],[230,9],[230,9],0,0,0,[338,[[12,[147]]]],[190,[[12,[147]]]],0,0,0,[190,96],0,[190,96],0,[230,160],[338,160],[190,160],[3,160],0,0,0,[[160,145],336],[160,337],[[[14,[162]]],225],[[268,96,96,225],190],[268,3],[3,8],[225,[[44,[162]]]],0,[190,225],0,0,0,0,[190,145],0,0,0,[[160,145],336],0,0,0,[338,148],0,0,0,[3,230],[3,268],0,0,[190,230],[190,268],[190,151],[225,162],[[]],[[]],[[]],[[],162],[230,[[4,[[14,[290]]]]]],[[230,[14,[290]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[190,158],[190,158],[190,158],[[336,146],336],[[337,146],337],[[337,[14,[268]]],337],[[336,[12,[158]]],336],[[337,[12,[158]]],337],[[336,158],336],[[336,[12,[147]]],336],[[337,[12,[147]]],337],[[336,158],336],[[336,148],336],[[337,148],337],[[336,158],336],0,0,0,0,0,0,0,0,[268,4],[268,4],[[268,268],4],[268,4],[268,4],[268,4]],"c":[1662,2572,2576,2856,2871,2953,2957],"p":[[3,"ProjectionMask",11],[3,"Schema",5745],[3,"SchemaDescriptor",5518],[6,"Result",2348],[3,"FieldLevels",11],[3,"Formatter",5746],[6,"Result",5746],[15,"usize"],[15,"bool"],[8,"IntoIterator",5747],[3,"Fields",5748],[4,"Option",5749],[6,"KeyValue",2398],[3,"Vec",5750],[4,"Result",5751],[3,"TypeId",5752],[3,"RowSelection",263],[8,"ChunkReader",3013],[3,"ArrowReaderBuilder",62],[3,"ParquetRecordBatchReader",62],[8,"AsyncFileReader",601],[8,"Send",5753],[3,"ParquetRecordBatchStream",601],[6,"ParquetRecordBatchReaderBuilder",62],[3,"ArrowReaderOptions",62],[3,"ArrowReaderMetadata",62],[8,"PageIterator",1515],[3,"Box",5754],[3,"ReaderRowGroups",62],[3,"RecordBatch",5755],[3,"BooleanArray",5756],[4,"ArrowError",5757],[8,"ArrowPredicate",233],[3,"ParquetMetaData",2398],[3,"Arc",5758],[3,"ReaderPageIterator",62],[6,"SchemaRef",5745],[8,"RowGroups",62],[3,"RowFilter",233],[8,"FnMut",5759],[3,"ArrowPredicateFn",233],[3,"RowSelector",263],[8,"Iterator",5760],[15,"slice"],[3,"PageLocation",3390],[3,"Range",5761],[8,"Write",5762],[3,"ArrowWriter",319],[3,"FileMetaData",3390],[3,"ArrowRowGroupWriter",319],[3,"ArrowPageWriter",319],[3,"ArrowColumnChunk",319],[6,"RowGroupMetaDataPtr",2398],[4,"DataType",5763],[6,"WriterPropertiesPtr",2763],[6,"ColumnDescPtr",5518],[3,"Iter",5764],[15,"u64"],[3,"Bytes",5765],[6,"Decimal128Array",5766],[3,"FixedLenByteArray",2016],[6,"Decimal256Array",5766],[4,"ArrowColumnWriter",319],[3,"FixedSizeBinaryArray",5767],[6,"IntervalDayTimeArray",5766],[6,"IntervalYearMonthArray",5766],[3,"ChainReader",319],[15,"u8"],[6,"Result",5768],[8,"FixedInt",5769],[3,"Error",5768],[8,"VarInt",5770],[3,"WriterProperties",2763],[4,"ColumnWriter",1770],[8,"Array",5771],[3,"LevelInfo",535],[3,"IntoIter",5772],[3,"ColumnChunkMetaData",2398],[3,"CompressedPage",1515],[3,"PageWriteSpec",1515],[8,"ColumnValueEncoder",1941],[3,"GenericColumnWriter",1770],[3,"DictEncoder",434],[8,"ArrayAccessor",5771],[3,"ByteArrayStorage",434],[8,"Copy",5753],[3,"ByteArrayEncoder",434],[3,"FallbackEncoder",434],[3,"Sbbf",1454],[3,"ByteArray",2016],[3,"DataPageValues",1941],[3,"DictionaryPage",1941],[6,"ArrayRef",5771],[3,"Field",5773],[3,"LevelContext",535],[15,"i16"],[4,"LevelInfoBuilder",535],[8,"Fn",5759],[3,"NullBuffer",5774],[8,"OffsetSizeTrait",5775],[3,"StructArray",5776],[6,"ParquetRecordBatchStreamBuilder",601],[4,"ColumnChunkData",601],[3,"InMemoryRowGroup",601],[4,"StreamState",601],[6,"BoxFuture",5777],[3,"ColumnChunkIterator",601],[8,"Unpin",5753],[3,"Pin",5778],[3,"Context",5779],[4,"Poll",5780],[3,"ReaderFactory",601],[3,"MetadataFetchFn",740],[8,"MetadataFetch",740],[3,"MetadataLoader",740],[3,"ParquetObjectReader",771],[8,"ObjectStore",5781],[3,"ObjectMeta",5781],[8,"AsyncWrite",5782],[3,"AsyncArrowWriter",797],[3,"KeyValue",3390],[3,"SharedBuffer",797],[15,"array"],[8,"ScalarValue",984],[8,"ArrowNativeType",5783],[8,"Ord",5784],[4,"DictionaryBuffer",841],[3,"ScalarBuffer",984],[3,"Buffer",5785],[3,"OffsetBuffer",866],[8,"Debug",5746],[3,"DeltaByteArrayDecoder",895],[3,"DictIndexDecoder",915],[8,"ValuesBuffer",984],[8,"ColumnValueDecoder",1677],[3,"GenericRecordReader",933],[8,"Default",5786],[8,"PageReader",1515],[3,"DefinitionLevelBuffer",1021],[3,"PackedDecoder",1021],[15,"i64"],[3,"DefinitionLevelBufferDecoder",1021],[3,"BooleanBufferBuilder",5787],[4,"Encoding",1106],[4,"Type",1106],[4,"ConvertedType",1106],[4,"LogicalType",1106],[4,"Repetition",1106],[4,"Compression",1106],[4,"PageType",1106],[4,"SortOrder",1106],[4,"ColumnOrder",1106],[3,"GzipLevel",1106],[3,"BrotliLevel",1106],[3,"ZstdLevel",1106],[4,"Ordering",5784],[15,"u32"],[15,"i32"],[4,"LogicalType",3390],[15,"str"],[8,"Hasher",5788],[3,"String",5789],[3,"Type",3390],[3,"ConvertedType",3390],[3,"FieldRepetitionType",3390],[3,"Encoding",3390],[3,"CompressionCodec",3390],[3,"PageType",3390],[3,"Block",1454],[8,"AsBytes",2016],[4,"ParquetError",2348],[8,"Sized",5753],[3,"BloomFilterHeader",3390],[15,"f64"],[4,"Page",1515],[3,"PageMetadata",1515],[4,"Statistics",3172],[3,"PageHeader",3390],[4,"ColumnReader",1620],[8,"DataType",2016],[6,"ColumnReaderImpl",1620],[8,"RepetitionLevelDecoder",1677],[8,"DefinitionLevelDecoder",1677],[3,"GenericColumnReader",1620],[3,"RepetitionLevelDecoderImpl",1677],[3,"DefinitionLevelDecoderImpl",1677],[3,"ColumnValueDecoderImpl",1677],[4,"LevelDecoder",1677],[3,"ColumnCloseResult",1770],[3,"ColumnDescriptor",5518],[8,"ParquetValueType",2336],[3,"PageMetrics",1770],[8,"PageWriter",1515],[6,"ColumnWriterImpl",1770],[3,"ColumnValueEncoderImpl",1941],[3,"Int96",2016],[8,"Any",5752],[4,"Decimal",2016],[3,"BoolType",2016],[3,"Int32Type",2016],[3,"Int64Type",2016],[3,"Int96Type",2016],[3,"FloatType",2016],[3,"DoubleType",2016],[3,"ByteArrayType",2016],[3,"FixedLenByteArrayType",2016],[3,"ValueStatistics",3172],[8,"Error",5790],[4,"Error",5791],[3,"Utf8Error",5792],[4,"Error",5793],[3,"BorrowMutError",5794],[4,"ColumnOrder",3390],[8,"Read",5762],[3,"ColumnIndexBuilder",2398],[3,"OffsetIndexBuilder",2398],[3,"RowGroupMetaDataBuilder",2398],[3,"RowGroupMetaData",2398],[3,"ColumnChunkMetaDataBuilder",2398],[3,"ColumnIndex",3390],[3,"OffsetIndex",3390],[6,"SchemaDescPtr",5518],[3,"FileMetaData",2398],[6,"ParquetColumnIndex",2398],[3,"ColumnPath",5518],[3,"RowGroup",3390],[3,"ColumnChunk",3390],[6,"ParquetOffsetIndex",2398],[3,"PageEncodingStats",2662],[4,"Type",5518],[3,"SortingColumn",3390],[3,"ColumnMetaData",3390],[3,"PageEncodingStats",3390],[8,"Clone",5795],[3,"PageIndex",2686],[4,"Index",2686],[3,"NativeIndex",2686],[8,"PartialEq",5784],[3,"BoundaryOrder",3390],[8,"Hash",5788],[4,"WriterVersion",2763],[3,"BloomFilterProperties",2763],[3,"ColumnProperties",2763],[3,"WriterPropertiesBuilder",2763],[3,"ReaderPropertiesBuilder",2763],[3,"ReaderProperties",2763],[4,"EnabledStatistics",2763],[8,"RowGroupReader",3013],[3,"RowIter",5291],[8,"FileReader",3013],[3,"FilePageIterator",3013],[3,"ReadOptionsBuilder",3050],[3,"ReadOptions",3050],[3,"SerializedRowGroupReader",3050],[3,"SerializedPageReader",3050],[3,"SerializedFileReader",3050],[3,"File",5796],[6,"ReaderPropertiesPtr",2763],[3,"Path",5797],[6,"ReadGroupPredicate",3050],[15,"f32"],[3,"Statistics",3390],[3,"SerializedRowGroupWriter",3267],[3,"SerializedFileWriter",3267],[3,"TrackedWrite",3267],[3,"SerializedColumnWriter",3267],[3,"SerializedPageWriter",3267],[6,"TypePtr",5518],[6,"OnCloseRowGroup",3267],[6,"OnCloseColumnChunk",3267],[8,"FnOnce",5759],[3,"IoSlice",5762],[3,"StringType",3390],[3,"UUIDType",3390],[3,"MapType",3390],[3,"ListType",3390],[3,"EnumType",3390],[3,"DateType",3390],[3,"NullType",3390],[3,"DecimalType",3390],[3,"MilliSeconds",3390],[3,"MicroSeconds",3390],[3,"NanoSeconds",3390],[4,"TimeUnit",3390],[3,"TimestampType",3390],[3,"TimeType",3390],[3,"IntType",3390],[3,"JsonType",3390],[3,"BsonType",3390],[3,"SchemaElement",3390],[3,"DataPageHeader",3390],[3,"IndexPageHeader",3390],[3,"DictionaryPageHeader",3390],[3,"DataPageHeaderV2",3390],[3,"SplitBlockAlgorithm",3390],[4,"BloomFilterAlgorithm",3390],[3,"XxHash",3390],[4,"BloomFilterHash",3390],[3,"Uncompressed",3390],[4,"BloomFilterCompression",3390],[3,"EncryptionWithFooterKey",3390],[3,"EncryptionWithColumnKey",3390],[4,"ColumnCryptoMetaData",3390],[3,"TypeDefinedOrder",3390],[3,"AesGcmV1",3390],[3,"AesGcmCtrV1",3390],[4,"EncryptionAlgorithm",3390],[3,"FileCryptoMetaData",3390],[8,"Into",5798],[15,"i8"],[8,"TInputProtocol",5799],[6,"Result",5800],[8,"TOutputProtocol",5799],[8,"Display",5746],[3,"Row",5040],[8,"ListAccessor",5040],[3,"List",5040],[3,"Map",5040],[15,"u16"],[4,"Field",5040],[3,"MapList",5040],[3,"RowColumnIter",5040],[4,"Value",5801],[4,"Reader",5291],[3,"TreeBuilder",5291],[3,"ReaderIter",5291],[4,"Either",5291],[3,"HashMap",5802],[3,"TypedTripletIter",5393],[4,"TripletIter",5393],[3,"Parser",5455],[3,"Tokenizer",5455],[15,"char"],[8,"Write",5746],[3,"Printer",5494],[3,"PrimitiveTypeBuilder",5518],[3,"GroupTypeBuilder",5518],[3,"BasicTypeInfo",5518],[6,"SharedColumnChunk",319],[4,"FallbackEncoderImpl",434],[13,"Plain",528],[13,"DeltaLength",528],[13,"Delta",528],[6,"ReadResult",601],[13,"Sparse",736],[13,"Dense",736],[13,"Dict",863],[13,"Values",863],[6,"RecordReader",933],[6,"ColumnReader",933],[8,"BufferQueue",984],[4,"MaybePacked",1021],[4,"BufferInner",1021],[13,"Full",1102],[13,"Mask",1102],[13,"Integer",1446],[13,"Time",1446],[13,"Timestamp",1446],[13,"Decimal",1446],[13,"DataPage",1601],[13,"DataPageV2",1601],[13,"DictionaryPage",1601],[8,"ColumnLevelDecoder",1677],[8,"LevelsBufferSlice",1677],[8,"ValuesBufferSlice",1677],[4,"Level",1770],[3,"ColumnMetrics",1770],[8,"EncodingWriteSupport",1770],[8,"ColumnValues",1941],[8,"SliceAsBytes",2016],[13,"Int32",2327],[13,"Int64",2327],[13,"Bytes",2327],[6,"FileMetaDataPtr",2398],[8,"Length",3013],[4,"SerializedPageReaderState",3050],[13,"Pages",3166],[13,"Values",3166],[6,"TypedStatistics",3172],[8,"MakeStatistics",3264],[8,"RowFormatter",5040],[8,"RowAccessor",5040],[8,"MapAccessor",5040],[8,"RecordWriter",5390],[13,"PrimitiveType",5731],[13,"GroupType",5731],[8,"TypeVisitor",5738]]},\
"parquet_concat":{"doc":"Binary that concatenates the column data of one or more …","t":"DLLLLLLLLLLLLLMLFMLLLLLL","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","cast","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","from_cast","group_id","input","into","main","output","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"parquet_concat"],[24,"clap_builder::builder::command"],[25,"core::fmt"],[26,"core::fmt"],[27,"clap_builder"],[28,"core::result"],[29,"clap_builder::util::id"],[30,"core::option"],[31,"parquet::errors"],[32,"core::any"]],"d":["Concatenates one or more parquet files","","","","","","","","","Returns the argument unchanged.","","","","","Path to input files","Calls <code>U::from(self)</code>.","","Path to output","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2],"f":[0,[1,1],[1,1],[[]],[[]],[[]],[[],1],[[],1],[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[]],[[],[[9,[8]]]],0,[[]],[[],10],0,[2,10],[[],7],[[],7],[[],11],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]]],"c":[],"p":[[3,"Command",24],[3,"Args",0],[3,"Formatter",25],[6,"Result",25],[3,"ArgMatches",26],[6,"Error",27],[4,"Result",28],[3,"Id",29],[4,"Option",30],[6,"Result",31],[3,"TypeId",32]]},\
"parquet_derive":{"doc":"","t":"YANNNDNNNEENNNLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLMLLLLLLMLLLL","n":["ParquetRecordWriter","parquet_field","Array","ChronoNaiveDate","ChronoNaiveDateTime","Field","Option","Reference","Slice","ThirdPartyType","Type","TypePath","Uuid","Vec","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","column_writer","converted_type","copied_direct_vals","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from_type","from_type_array","from_type_path","from_type_reference","from_type_slice","ident","inner_type","into","into","into","is_a_byte_buf","last_part","leaf_type_recursive","leaf_type_recursive_helper","logical_type","option_into_vals","optional_definition_levels","parquet_type","physical_type","repetition","third_party_type","try_from","try_from","try_from","try_into","try_into","try_into","ty","type_id","type_id","type_id","writer_snippet"],"q":[[0,"parquet_derive"],[2,"parquet_derive::parquet_field"],[66,"syn::ty"],[67,"proc_macro2"],[68,"core::option"],[69,"core::fmt"],[70,"core::fmt"],[71,"syn::ty"],[72,"parquet::basic"],[73,"core::result"],[74,"core::any"]],"d":["Derive flat, simple RecordWriter implementations. Works by …","","","","","","","","","Use third party libraries, detected at compile time. These …","","","","","","","","","","","Takes a rust type and returns the appropriate parquet-rs …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a parsed rust field AST in to a more easy to …","","","","","","","Helper method to further unwrap leaf_type() to get …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Helper to normalize a type path by extracting the most …","Helper to simplify a nested field definition to its leaf …","","","","","","Converts rust types to parquet physical types.","","","","","","","","","","","","","Takes the parsed field of the struct and emits a valid …"],"i":[0,0,1,7,7,0,1,1,1,0,0,1,7,1,5,7,1,5,7,1,1,1,5,5,7,1,5,7,1,5,5,7,1,1,1,1,1,1,1,5,1,5,7,1,5,1,1,1,1,5,5,5,1,1,5,5,7,1,5,7,1,5,5,7,1,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[1,[[4,[3]]]],[5,3],[[5,5],6],[[7,7],6],[[1,1],6],[[5,8],9],[[7,8],9],[[1,8],9],[10,5],[[]],[[]],[[]],[10,1],[[10,11],1],[[10,12],1],[[10,2],1],[[10,13],1],[[10,14],1],0,[1,11],[[]],[[]],[[]],0,[1,15],[1,1],[[1,[4,[1]]],1],[1,3],[5,3],[5,3],[5,3],[1,16],[1,3],0,[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,[[],18],[[],18],[[],18],[5,3]],"c":[],"p":[[4,"Type",2],[3,"TypePath",66],[3,"TokenStream",67],[4,"Option",68],[3,"Field",2],[15,"bool"],[4,"ThirdPartyType",2],[3,"Formatter",69],[6,"Result",69],[3,"Field",70],[4,"Type",66],[3,"TypeArray",66],[3,"TypeReference",66],[3,"TypeSlice",66],[3,"String",71],[4,"Type",72],[4,"Result",73],[3,"TypeId",74]]},\
"parquet_derive_test":{"doc":"","t":"DMMMMLLMMMMMMLMMLLMMLMMMMMMMMMMMLLLM","n":["ACompleteRecord","a_bool","a_borrowed_string","a_str","a_string","borrow","borrow_mut","borrowed_byte_vec","borrowed_maybe_a_str","borrowed_maybe_a_string","borrowed_maybe_borrowed_byte_vec","borrowed_maybe_byte_vec","byte_vec","cast","double","float","from","from_cast","i16","i32","into","isize","maybe_a_str","maybe_a_string","maybe_byte_vec","maybe_double","maybe_float","maybe_i16","maybe_u32","maybe_u8","maybe_usize","now","try_from","try_into","type_id","u64"],"q":[[0,"parquet_derive_test"],[36,"core::result"],[37,"core::any"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,0,0,0,[[]],[[]],0,0,0,0,0,0,[[]],0,0,[[]],[[]],0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],2],0],"c":[],"p":[[4,"Result",36],[3,"TypeId",37],[3,"ACompleteRecord",0]]},\
"parquet_fromcsv":{"doc":"Binary file to converts csv to Parquet file","t":"DNNNNNENNNEENNFLLMLLLLLLLLLLLLLLLLLLFFFFMMMMLLMLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLFMMMMMMLLLLLLLLLLLLLLLLLLLLLLLMF","n":["Args","ArrowError","CR","CommandLineParseError","Crlf","Csv","CsvDialect","IoError","LF","ParquetError","ParquetFromCsvError","RecordTerminator","Tsv","WithContext","arrow_schema_from_string","augment_args","augment_args_for_update","batch_size","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","clone","clone","clone_into","clone_into","command","command_for_update","compression_from_str","configure_reader_builder","configure_writer_properties","convert_csv_to_parquet","csv_compression","delimiter","double_quote","enable_bloom_filter","eq","eq","escape_char","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_cast","from_cast","from_cast","from_cast","get_delimiter","get_escape","get_quote","get_terminator","group_id","has_header","help","input_file","input_format","into","into","into","into","main","max_row_group_size","output_file","parquet_compression","quote_char","record_terminator","schema","schema_path","to_owned","to_owned","to_possible_value","to_possible_value","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","value_variants","with_context","writer_version","writer_version_from_str"],"q":[[0,"parquet_fromcsv"],[111,"arrow_schema::schema"],[112,"alloc::sync"],[113,"core::result"],[114,"clap_builder::builder::command"],[115,"parquet::basic"],[116,"alloc::string"],[117,"arrow_csv::reader"],[118,"parquet::file::properties"],[119,"core::fmt"],[120,"core::fmt"],[121,"clap_builder"],[122,"std::io::error"],[123,"parquet::errors"],[124,"clap_builder::parser::matches::arg_matches"],[125,"core::option"],[126,"clap_builder::util::id"],[127,"std::path"],[128,"clap_builder::builder::possible_value"],[129,"core::any"],[130,"core::convert"],[131,"parquet::file::properties"]],"d":["","","","","","","","","","","","","","","","","","batch size","","","","","","","","","","","","","","","","","","","","","","","","field delimiter","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","has header line","","input CSV file path","input file format","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","output Parquet file path","","","","Path to a text file containing a parquet schema definition","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,4,8,4,8,7,0,4,8,4,0,0,7,4,0,11,11,11,4,11,7,8,4,11,7,8,4,11,7,8,7,8,7,8,11,11,0,0,0,0,11,11,11,11,7,8,11,4,4,11,7,8,4,4,4,4,4,11,7,8,11,11,4,11,7,8,11,11,11,11,11,11,11,11,11,4,11,7,8,0,11,11,11,11,11,11,11,7,8,7,8,4,4,11,7,8,4,11,7,8,4,11,7,8,11,11,7,8,4,11,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[5,[[3,[2]],4]]]],[6,6],[6,6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[8,8],[[]],[[]],[[],6],[[],6],[1,[[5,[9,10]]]],[[11,[3,[2]]],12],[11,13],[11,[[5,[4]]]],0,0,0,0,[[7,7],14],[[8,8],14],0,[[4,15],16],[[4,15],16],[[11,15],16],[[7,15],16],[[8,15],16],[17,4],[18,4],[19,4],[[]],[20,4],[[]],[[]],[[]],[21,[[5,[11,18]]]],[21,[[5,[11,18]]]],[[]],[[]],[[]],[[]],[11,22],[11,[[23,[22]]]],[11,[[23,[22]]]],[11,[[23,[22]]]],[[],[[23,[24]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[],[[5,[4]]]],0,0,0,0,0,0,[11,25],[[]],[[]],[7,[[23,[26]]]],[8,[[23,[26]]]],[[],10],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],27],[[],27],[[],27],[[],27],[[11,21],[[5,[18]]]],[[11,21],[[5,[18]]]],[[],[[28,[7]]]],[[],[[28,[8]]]],[[[29,[4]],1],4],0,[1,[[5,[30,10]]]]],"c":[],"p":[[15,"str"],[3,"Schema",111],[3,"Arc",112],[4,"ParquetFromCsvError",0],[4,"Result",113],[3,"Command",114],[4,"CsvDialect",0],[4,"RecordTerminator",0],[4,"Compression",115],[3,"String",116],[3,"Args",0],[3,"ReaderBuilder",117],[3,"WriterProperties",118],[15,"bool"],[3,"Formatter",119],[6,"Result",119],[4,"ArrowError",120],[6,"Error",121],[3,"Error",122],[4,"ParquetError",123],[3,"ArgMatches",124],[15,"u8"],[4,"Option",125],[3,"Id",126],[3,"Path",127],[3,"PossibleValue",128],[3,"TypeId",129],[15,"slice"],[8,"Into",130],[4,"WriterVersion",118]]},\
"parquet_index":{"doc":"Binary that prints the [page index] of a parquet file","t":"DLLLLLMLLFMLLLLLLLFFLLLLLL","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","cast","column","command","command_for_update","compute_row_counts","file","fmt","from","from_arg_matches","from_arg_matches_mut","from_cast","group_id","into","main","print_index","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"parquet_index"],[26,"clap_builder::builder::command"],[27,"parquet::format"],[28,"alloc::vec"],[29,"core::fmt"],[30,"core::fmt"],[31,"clap_builder"],[32,"core::result"],[33,"clap_builder::util::id"],[34,"core::option"],[35,"parquet::errors"],[36,"core::fmt"],[37,"core::any"]],"d":["","","","","","","","","","Computes the number of rows in each page within a column …","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Prints index information for a single column chunk","","","","","",""],"i":[0,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,0,0,6,6,6,6,6,6],"f":[0,[1,1],[1,1],[[]],[[]],[[]],0,[[],1],[[],1],[[[3,[2]],4],[[5,[4]]]],0,[[6,7],8],[[]],[9,[[11,[6,10]]]],[9,[[11,[6,10]]]],[[]],[[],[[13,[12]]]],[[]],[[],14],[[[3,[[16,[15]]]],[3,[2]],[3,[4]]],14],[6,14],[[],11],[[],11],[[],17],[[6,9],[[11,[10]]]],[[6,9],[[11,[10]]]]],"c":[],"p":[[3,"Command",26],[3,"PageLocation",27],[15,"slice"],[15,"i64"],[3,"Vec",28],[3,"Args",0],[3,"Formatter",29],[6,"Result",29],[3,"ArgMatches",30],[6,"Error",31],[4,"Result",32],[3,"Id",33],[4,"Option",34],[6,"Result",35],[8,"Display",29],[3,"PageIndex",36],[3,"TypeId",37]]},\
"parquet_layout":{"doc":"Binary that prints the physical layout of a parquet file","t":"DDDDDLLLLLLLLLLLLLLLLLMLLMFMFFMMLLLLLLLLLLLLLLLLLLMMMMLLLLLFMMMMMFMMLLLLLLLLLLLLLLLLLLLLMLL","n":["Args","ColumnChunk","Page","ParquetFile","RowGroup","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","columns","command","command_for_update","compressed_bytes","compression","compression","do_layout","encoding","encoding","file","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_cast","from_cast","from_cast","from_cast","from_cast","group_id","has_bloom_filter","has_column_index","has_offset_index","header_bytes","into","into","into","into","into","main","num_values","offset","page_type","pages","path","read_page_header","row_count","row_groups","run","serialize","serialize","serialize","serialize","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","uncompressed_bytes","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"parquet_layout"],[91,"clap_builder::builder::command"],[92,"parquet::basic"],[93,"core::option"],[94,"parquet::file::reader"],[95,"parquet::errors"],[96,"parquet::format"],[97,"core::fmt"],[98,"core::fmt"],[99,"clap_builder"],[100,"core::result"],[101,"clap_builder::util::id"],[102,"serde::ser"],[103,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a string representation for a given compression","","","Returns a string representation for a given encoding","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Reads the page header at <code>offset</code> from <code>reader</code>, returning …","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,14,14,6,11,12,13,14,6,11,12,13,14,6,11,12,13,14,11,14,14,13,0,13,0,0,13,14,6,11,12,13,14,6,11,12,13,14,14,14,6,11,12,13,14,14,12,12,12,13,6,11,12,13,14,0,13,13,13,12,12,0,11,6,14,6,11,12,13,6,11,12,13,14,6,11,12,13,14,6,11,12,13,14,13,14,14],"f":[0,0,0,0,0,[1,1],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[],1],0,[2,[[4,[3]]]],0,[5,[[7,[6]]]],[8,3],0,0,[[6,9],10],[[11,9],10],[[12,9],10],[[13,9],10],[[14,9],10],[[]],[[]],[[]],[[]],[[]],[15,[[17,[14,16]]]],[15,[[17,[14,16]]]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[18]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],7],0,0,0,0,0,[[5,19],7],0,0,[14,7],[[6,20],17],[[11,20],17],[[12,20],17],[[13,20],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],21],[[],21],[[],21],[[],21],[[],21],0,[[14,15],[[17,[16]]]],[[14,15],[[17,[16]]]]],"c":[],"p":[[3,"Command",91],[4,"Compression",92],[15,"str"],[4,"Option",93],[8,"ChunkReader",94],[3,"ParquetFile",0],[6,"Result",95],[3,"Encoding",96],[3,"Formatter",97],[6,"Result",97],[3,"RowGroup",0],[3,"ColumnChunk",0],[3,"Page",0],[3,"Args",0],[3,"ArgMatches",98],[6,"Error",99],[4,"Result",100],[3,"Id",101],[15,"u64"],[8,"Serializer",102],[3,"TypeId",103]]},\
"parquet_read":{"doc":"Binary file to read data from a Parquet file.","t":"DLLLLLLLMLLLLLLLMFMFLLLLL","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","cast","command","command_for_update","file_name","fmt","from","from_arg_matches","from_arg_matches_mut","from_cast","group_id","into","json","main","num_records","print_row","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"parquet_read"],[25,"clap_builder::builder::command"],[26,"core::fmt"],[27,"core::fmt"],[28,"clap_builder"],[29,"core::result"],[30,"clap_builder::util::id"],[31,"core::option"],[32,"parquet::record::api"],[33,"core::any"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2],"f":[0,[1,1],[1,1],[[]],[[]],[[]],[[],1],[[],1],0,[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[]],[[],[[9,[8]]]],[[]],0,[[]],0,[[10,11]],[[],7],[[],7],[[],12],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]]],"c":[],"p":[[3,"Command",25],[3,"Args",0],[3,"Formatter",26],[6,"Result",26],[3,"ArgMatches",27],[6,"Error",28],[4,"Result",29],[3,"Id",30],[4,"Option",31],[3,"Row",32],[15,"bool"],[3,"TypeId",33]]},\
"parquet_rewrite":{"doc":"Binary file to rewrite parquet files.","t":"DNNEENNNNNNNNNNENLLMMMLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLMLLLLFMMMLLMLLLLLLLLLLLLLLLLLLLLLLLM","n":["Args","Brotli","Chunk","CompressionArgs","EnabledStatisticsArgs","Gzip","Lz4","Lz4Raw","Lzo","None","None","Page","Parquet1_0","Parquet2_0","Snappy","WriterVersionArgs","Zstd","augment_args","augment_args_for_update","bloom_filter_enabled","bloom_filter_fpp","bloom_filter_ndv","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","command","command_for_update","compression","data_page_row_count_limit","data_page_size_limit","dictionary_enabled","dictionary_page_size_limit","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_arg_matches","from_arg_matches_mut","from_cast","from_cast","from_cast","from_cast","group_id","input","into","into","into","into","main","max_row_group_size","max_statistics_size","output","partial_cmp","partial_cmp","statistics_enabled","to_owned","to_owned","to_owned","to_possible_value","to_possible_value","to_possible_value","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","value_variants","value_variants","writer_version"],"q":[[0,"parquet_rewrite"],[106,"clap_builder::builder::command"],[107,"core::cmp"],[108,"core::fmt"],[109,"core::fmt"],[110,"clap_builder"],[111,"core::result"],[112,"clap_builder::util::id"],[113,"core::option"],[114,"clap_builder::builder::possible_value"],[115,"core::any"]],"d":["","Brotli","Compute chunk-level statistics but not page-level","","","GZip","LZ4","LZ4 Raw","LZO","No compression.","Compute no statistics","Compute page-level and chunk-level statistics","","","Snappy","","Zstd","","","Sets whether bloom filter is enabled for any column.","Sets bloom filter false positive probability (fpp) for any …","Sets number of distinct values (ndv) for bloom filter for …","","","","","","","","","","","","","","","","","","","","","","","Compression used.","Sets best effort maximum number of rows in a data page.","Sets best effort maximum size of a data page in bytes.","Sets flag to enable/disable dictionary encoding for any …","Sets best effort maximum dictionary page size, in bytes.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Path to input parquet file.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Sets maximum number of rows in a row group.","Sets max statistics size for any column.","Path to output parquet file.","","","Sets flag to enable/disable statistics for any column.","","","","","","","","","","","","","","","","","","","","","","","","Sets writer version."],"i":[0,2,3,0,0,2,2,2,2,2,3,3,4,4,2,0,2,9,9,9,9,9,2,3,4,9,2,3,4,9,2,3,4,9,2,3,4,2,3,4,2,3,9,9,9,9,9,9,9,2,3,2,2,3,3,2,3,4,9,2,3,4,9,9,9,2,3,4,9,9,9,2,3,4,9,0,9,9,9,2,3,9,2,3,4,2,3,4,2,3,4,9,2,3,4,9,2,3,4,9,9,9,2,3,4,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[1,1],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[2,2],5],[[3,3],5],[[],1],[[],1],0,0,0,0,0,[[2,2],6],[[3,3],6],[[],6],[[],6],[[],6],[[],6],[[2,7],8],[[3,7],8],[[4,7],8],[[9,7],8],[[]],[[]],[[]],[[]],[10,[[12,[9,11]]]],[10,[[12,[9,11]]]],[[]],[[]],[[]],[[]],[[],[[14,[13]]]],0,[[]],[[]],[[]],[[]],[[]],0,0,0,[[2,2],[[14,[5]]]],[[3,3],[[14,[5]]]],0,[[]],[[]],[[]],[2,[[14,[15]]]],[3,[[14,[15]]]],[4,[[14,[15]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],16],[[],16],[[],16],[[],16],[[9,10],[[12,[11]]]],[[9,10],[[12,[11]]]],[[],[[17,[2]]]],[[],[[17,[3]]]],[[],[[17,[4]]]],0],"c":[],"p":[[3,"Command",106],[4,"CompressionArgs",0],[4,"EnabledStatisticsArgs",0],[4,"WriterVersionArgs",0],[4,"Ordering",107],[15,"bool"],[3,"Formatter",108],[6,"Result",108],[3,"Args",0],[3,"ArgMatches",109],[6,"Error",110],[4,"Result",111],[3,"Id",112],[4,"Option",113],[3,"PossibleValue",114],[3,"TypeId",115],[15,"slice"]]},\
"parquet_rowcount":{"doc":"Binary file to return the number of rows found from …","t":"DLLLLLLLMLLLLLLLFLLLLL","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","cast","command","command_for_update","file_paths","fmt","from","from_arg_matches","from_arg_matches_mut","from_cast","group_id","into","main","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"parquet_rowcount"],[22,"clap_builder::builder::command"],[23,"core::fmt"],[24,"core::fmt"],[25,"clap_builder"],[26,"core::result"],[27,"clap_builder::util::id"],[28,"core::option"],[29,"core::any"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2],"f":[0,[1,1],[1,1],[[]],[[]],[[]],[[],1],[[],1],0,[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[]],[[],[[9,[8]]]],[[]],[[]],[[],7],[[],7],[[],10],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]]],"c":[],"p":[[3,"Command",22],[3,"Args",0],[3,"Formatter",23],[6,"Result",23],[3,"ArgMatches",24],[6,"Error",25],[4,"Result",26],[3,"Id",27],[4,"Option",28],[3,"TypeId",29]]},\
"parquet_schema":{"doc":"Binary file to print the schema and metadata of a Parquet …","t":"DLLLLLLLMLLLLLLLFLLLLLM","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","cast","command","command_for_update","file_path","fmt","from","from_arg_matches","from_arg_matches_mut","from_cast","group_id","into","main","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","verbose"],"q":[[0,"parquet_schema"],[23,"clap_builder::builder::command"],[24,"core::fmt"],[25,"core::fmt"],[26,"clap_builder"],[27,"core::result"],[28,"clap_builder::util::id"],[29,"core::option"],[30,"core::any"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2],"f":[0,[1,1],[1,1],[[]],[[]],[[]],[[],1],[[],1],0,[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[]],[[],[[9,[8]]]],[[]],[[]],[[],7],[[],7],[[],10],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]],0],"c":[],"p":[[3,"Command",23],[3,"Args",0],[3,"Formatter",24],[6,"Result",24],[3,"ArgMatches",25],[6,"Error",26],[4,"Result",27],[3,"Id",28],[4,"Option",29],[3,"TypeId",30]]},\
"parquet_show_bloom_filter":{"doc":"Binary file to read bloom filter data from a Parquet file.","t":"DLLLLLMLLMLLLLLLLFLLLLLM","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","cast","column","command","command_for_update","file_name","fmt","from","from_arg_matches","from_arg_matches_mut","from_cast","group_id","into","main","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","values"],"q":[[0,"parquet_show_bloom_filter"],[24,"clap_builder::builder::command"],[25,"core::fmt"],[26,"core::fmt"],[27,"clap_builder"],[28,"core::result"],[29,"clap_builder::util::id"],[30,"core::option"],[31,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2],"f":[0,[1,1],[1,1],[[]],[[]],[[]],0,[[],1],[[],1],0,[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[]],[[],[[9,[8]]]],[[]],[[]],[[],7],[[],7],[[],10],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]],0],"c":[],"p":[[3,"Command",24],[3,"Args",0],[3,"Formatter",25],[6,"Result",25],[3,"ArgMatches",26],[6,"Error",27],[4,"Result",28],[3,"Id",29],[4,"Option",30],[3,"TypeId",31]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
